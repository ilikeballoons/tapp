{"version":3,"sources":["api/defs/prop-types.js","api/mockAPI/data.js","api/mockAPI/utils.js","api/mockAPI/sessions.js","api/mockAPI/contract_templates.js","api/mockAPI/instructors.js","api/mockAPI/positions.js","api/mockAPI/wage_chunks.js","api/mockAPI/applications.js","api/mockAPI/applicants.js","api/mockAPI/assignments.js","api/mockAPI/active_user.js","api/mockAPI/debug.js","api/mockAPI/index.js","api/defs/doc-generation.js","api/actions/errors.js","api/actions/status.js","api/constants/index.js","api/actions/utils.js","libs/apiUtils.js","api/reducers/utils.js","api/reducers/sessions.js","api/reducers/users.js","api/reducers/applicants.js","api/actions/applicants.js","api/reducers/applications.js","api/reducers/positions.js","api/reducers/instructors.js","api/actions/instructors.js","api/reducers/contract_templates.js","api/actions/contract_templates.js","api/actions/positions.js","api/actions/applications.js","api/reducers/assignments.js","api/actions/assignments.js","api/actions/globals.js","libs/urlUtils.js","api/actions/init.js","api/actions/users.js","api/actions/sessions.js","api/actions/wage_chunks.js","api/actions/offers.js","views/dev_frame/mockAPI.js","views/dev_frame/active-user-switch.js","views/dev_frame/index.js","views/notificatons/index.js","views/offertable/actions.js","components/forms/common-controls.js","components/forms/session-editor.js","components/applicants-list.js","components/contract-templates-list.js","components/instructors.js","components/edit-field-widgets.js","views/instructors/editable-instructors-list.js","libs/utils.js","views/instructors/add-instructor-dialog.js","views/instructors/index.js","components/positions-list.js","components/search-box.js","libs/fileManager.js","components/import-button.js","components/offer-table.js","views/offertable/index.js","views/offertable/constants.js","components/forms/position-editor.js","components/forms/assignment-editor.js","components/forms/contract-template-editor.js","views/dashboard/index.js","components/assignments-list.js","components/email-button.js","views/cp_control_panel/ControlPanel.jsx","components/filtered-list.js","views/sessions/add-session-dialog.js","components/sessions.js","views/sessions/index.js","views/positions/add-position-dialog.js","views/positions/position-list.js","views/positions/index.js","views/assignments/add-assignment-dialog.js","views/assignments/assignment-details.js","views/assignments/offer-actions.js","views/assignments/index.js","views/contract_template/contract-template-dialog.js","views/contract_template/contract-template-list.js","views/contract_template/index.js","views/routes/index.js","components/header.js","components/filterable-menu.js","views/admin/header.js","components/active-session.js","components/active-user.js","App.jsx","api/reducers/globals.js","views/offertable/reducers.js","rootReducer.js","api/reducers/status.js","store.js","index.js"],"names":["generatePropTypes","PropTypes","id","oneOfType","number","string","apiResponse","shape","status","oneOf","isRequired","message","payload","any","apiResponseSuccess","apiResponseError","idOnly","session","start_date","end_date","name","contractTemplateMinimal","template_file","contractTemplate","template_name","position","position_code","position_title","hours_per_assignment","contract_template_id","duties","qualifications","ad_hours_per_assignment","ad_num_assignments","ad_open_date","ad_close_date","desired_num_assignments","current_enrollment","current_waitlisted","instructor_ids","arrayOf","instructor_preference","preference_level","applicant_id","instructor_id","instructor","first_name","last_name","email","utorid","assignment","note","contract_override_pdf","position_id","active_offer_status","applicant","student_number","phone","wageChunk","hours","rate","reportingTag","offer","position_start_date","position_end_date","first_time_ta","bool","instructor_contact_desc","pay_period_desc","installments","ta_coordinator_name","ta_coordinator_email","emailed_date","accepted_date","rejected_date","withdrawn_date","application","session_id","comments","program","department","previous_uoft_experience","yip","annotation","position_preference","user","roles","mockData","sessions","rate1","rate2","available_contract_templates","contract_templates","contract_templates_by_session","instructors","positions_by_session","positions","instructor_preferences","applicants","assignments_by_session","assignments","wage_chunks","assignment_id","offers","applications","previous_uoft_ta_experience","position_preferences","users","active_user","sum","ret","numbers","num","getUnusedId","data","prop","ids","map","x","filter","max","Math","isNaN","round","random","find","obj","s","findAllById","includes","deleteInArray","splice","indexOf","getAttributesCheckMessage","props","required","unique","Object","entries","requirements","MockAPIController","ownData","this","query","rawFind","Error","JSON","stringify","newId","newItem","push","value","item","validateProp","updateIfFound","validateNew","create","joinWithConjunction","items","length","join","formatInstructorsContact","wageChunkArrayToPayPeriodDescription","wageChunks","rateData","Date","min","values","toLocaleDateString","month","day","year","Session","newSession","undefined","findAll","sessionsRoutes","get","documentCallback","func","summary","returns","wrappedPropTypes","docApiPropTypes","post","params","body","upsert","posts","ContractTemplate","template","findAllBySession","matchingSession","newTemplate","templatesRoutes","upsertBySession","Instructor","matchingInstructor","instructorsRoutes","Position","rawPosition","_session_id","matchingPosition","bySessionsList","newPosition","keys","positionsRoutes","assign","WageChunk","matchingAssignment","Assignment","rawWageChunk","getSession","session_start_date","december","getFullYear","getPosition","existingWageChunks","findAllByAssignment","forEach","chunk","upsertByAssignment","wageChunkRoutes","Application","applicationsRoutes","Applicant","Array","from","Set","concat","applicantsRoutes","ActiveOffer","findByAssignment","getWageChunkInfo","activeOffer","getActiveOffer","upsertedAssignment","findAssociatedSession","dateRanges","january","toISOString","splitDateRangeAtNewYear","range","perChunkDelta","_ensureAssignment","baseOffer","getAssignment","getApplicant","getInstructors","getContractTemplate","startDates","endDates","sort","wageChunkArrayToStartAndEndDates","signature","nag_count","contract_template","assignmentsRoutes","setAllByAssignment","withdrawByAssignment","rejectByAssignment","acceptByAssignment","createByAssignment","emailByAssignment","nagByAssignment","User","matchingUser","activeUserRoutes","getActiveUser","storage","Debug","getAllData","makeSnapshot","key","constructor","snapshot","parse","clearData","debugRoutes","found_user","setActiveUser","restoreSnapshot","MockAPI","seedData","routePrefix","getRoutes","exclude","postRoutes","apiGET","url","_getRoutesParsers","route","match","authenticateActiveUserBasedOnRole","role","spec","e","toString","apiPOST","_postRoutesParsers","active","routeStr","r","Route","delay","_origFetch","fetch","window","a","init","parsedURL","URL","pathname","startsWith","replace","method","mockResponse","console","log","responseObj","Response","Blob","type","statusText","Promise","resolve","setTimeout","mockAPI","CallAtom","args","createCallChain","chain","propTypesProxy","callChain","handler","receiver","Reflect","apply","thisArg","lastProp","pop","ownKeys","Proxy","PROPTYPES_TO_SWAGGER_TYPES","object","array","wrappedPropTypesToSwagger","pt","requiredList","swaggerVal","warn","wrapInStandardApiResponseForSwagger","properties","enum","urlTemplateToSwagger","parsed","RouteParser","templateVars","subs","templateVar","decodeURI","reverse","documentedCallbackToSwagger","docs","responses","default","prefixRoles","parameters","in","description","content","schema","requestBody","mockApiRoutesAsSwaggerPaths","path","val","templatePath","tags","split","info","applicableTags","sortedRet","attrs","defaultNotifProps","autoDismiss","title","fetchError","error","upsertError","deleteError","apiError","apiInteractionStart","apiInteractionEnd","arrayToHash","l","indexBy","isArray","d","actionFactory","splitObjByProps","filtered","hasOwnProperty","call","flattenIdFactory","inPropName","outPropName","isArrayOfIds","validatedApiDispatcher","dispatcher","propTypes","onErrorDispatch","dispatch","propTypeCheck","arg","checkPropTypes","wasPropTypesError","i","statusId","uuid","Function","FETCH_INIT","credentials","headers","ApiError","resp","errorMessage","captureStackTrace","ApiFetchError","response","_ensurePath","_processFetchResponse","json","upsertItem","modelData","didUpdate","newModelData","createBasicReducerObject","FETCH_MANY","FETCH_ONE","UPSERT_ONE","DELETE_ONE","state","action","_modelData","deletedItem","createReducer","initialState","handlers","_storePath","pushToPath","dir","unshift","reducer","_origCreateReducer","_localStoreSelector","localState","createLocalStoreSelector","combineReducers","model","pushToPathCallbacks","newReducer","_origCombineReducers","basicReducers","sessionsReducer","activeSession","usersReducer","active_role","insertIfMissing","target","source","missingItems","some","applicantsReducer","fetchApplicantsSuccess","fetchOneApplicantSuccess","upsertOneApplicantSuccess","deleteOneApplicantSuccess","fetchApplicants","getState","activeRoleSelector","activeSessionId","upsertApplicant","localStoreSelector","applicantsSelector","createSelector","applicationsReducer","positionsReducer","positionId","instructorsReducer","fetchInstructorsSuccess","fetchOneInstructorSuccess","upsertOneInstructorSuccess","deleteOneInstructorSuccess","fetchInstructors","upsertInstructor","instructorsSelector","contractTemplatesReducer","all","fetchContractTemplatesSuccess","fetchAllContractTemplatesSuccess","upsertOneContractTemplateSuccess","deleteOneContractTemplateSuccess","fetchContractTemplates","upsertContractTemplate","fetchAllContractTemplates","contractTemplatesSelector","allContractTemplatesSelector","fetchPositionsSuccess","fetchOnePositionSuccess","upsertOnePositionSuccess","deleteOnePositionSuccess","fetchPositions","instructorsToInstructorIds","contractTemplateToContractTemplateId","instructorToInstructorId","applicantToApplicantId","prepForApi","preference","upsertPosition","_positionsSelector","positionsSelector","contractTemplates","instructorsById","contractTemplatesById","applicantsById","rest","fetchApplicationsSuccess","fetchOneApplicationSuccess","upsertOneApplicationSuccess","deleteOneApplicationSuccess","positionToPositionId","fetchApplications","_applicationsSelector","positionsById","setWageChunks","assignmentId","_wageChunksByAssignmentId","assignmentsReducer","fetchAssignmentsSuccess","fetchOneAssignmentSuccess","upsertOneAssignmentSuccess","deleteOneAssignmentSuccess","fetchAssignments","fetchAssignment","upsertAssignment","_assignmentsSelector","assignmentsSelector","setGlobals","globals","globalsSelector","setGlobalsInUrl","searchParams","URLSearchParams","append","history","pushState","newUrl","location","search","setMockAPIState","options","skipInit","initFromStage","ui","otherGlobals","storedActiveSession","activeSessionSelector","stringToNativeType","parseURLSearchString","toggleMockApi","enableMockAPI","require","replaceGlobalFetch","restoreGlobalFetch","prepareGlobals","stage","startAfterStage","shouldRunStage","queryStage","initOrder","stageDependent","sessionsSelector","parsedGlobals","fetchActiveUser","activeRole","setActiveUserRole","fetchSessions","setActiveSession","fetchActions","fetchActiveUserSuccess","fetchUsersSuccess","upsertUserSuccess","setActiveUserRoleSuccess","fetchUsers","debugOnlyFetchUsers","debugOnlySetActiveUser","usersSelector","activeUserSelector","fetchSessionsSuccess","fetchOneSessionSuccess","upsertOneSessionSuccess","setActiveSessionAction","upsertSession","currentActiveSession","fetchWageChunksForAssignmentSuccess","upsertWageChunksForAssignmentSuccess","upsertOneWageChunkSuccess","deleteOneWageChunkSuccess","fetchWageChunksForAssignment","upsertWageChunksForAssignment","wageChunksByAssignmentSelector","fetchOfferSucces","setOfferAcceptedSuccess","setOfferRejectedSuccess","offerCreateSuccess","offerEmailSuccess","offerNagSuccess","offerWithdrawSuccess","setOfferForAssignmentAccepted","setOfferForAssignmentRejected","offerForAssignmentWithdraw","offerForAssignmentCreate","offerForAssignmentEmail","offerForAssignmentNag","ToggleMockApi","ButtonGroup","Button","variant","onClick","connect","ident","BootstrapNavLink","Nav","Link","as","NavLink","activeClassName","to","children","swaggerData","openapi","servers","paths","ConnectedActiveUserButton","activeUser","React","useState","dropdownVisible","setDropdownVisible","useEffect","className","Dropdown","onSelect","onToggle","desiredVisibility","show","alignRight","Toggle","Menu","flip","Item","eventKey","ConnectedToggleMockApi","ConnectedNotifications","notifications","Notifications","offerTableSelector","offerTable","fieldEditorFactory","boundData","setBoundData","setAttrFactory","attr","coerceFunc","newVal","newData","inputAttrs","valueFunc","Number","slice","Fragment","Form","Label","Control","onChange","DialogRow","Row","style","alignItems","Children","child","index","Group","Col","SessionEditor","createFieldEditor","setSession","step","ApplicantsList","applicantsList","Component","DEFAULT_COLUMNS","Header","accessor","ContractTemplatesList","columns","showPagination","minRows","InstructorsList","DEFAULT_INSTRUCTOR","InstructorEditor","instructorProps","setInstructor","newInstructor","EditFieldDialog","onHide","fieldVal","setFieldVal","cancelClick","changeIndicator","Modal","closeButton","Title","Body","currentTarget","Footer","EditFieldIcon","hidden","EditableField","editable","dialogShow","setDialogShow","EditableCell","column","field","applicantId","original","ConnectedInstructorsList","generateCell","Cell","strip","trim","BLANK_INSTRUCTOR","ConnectedAddInstructorDialog","setNewInstructor","conflicts","delayShow","immediateShow","getConficts","Alert","disabled","AdminIstructorsView","addDialogVisible","setAddDialogVisible","Badge","PositionsList","SearchBox","filters","event","input","v","toLowerCase","setState","nextProps","placeholder","bind","optSuccess","success","importChoices","file","loadDataFunc","getExtension","err","extension","ImportButton","uploadFunc","dialogContents","dialogOpen","setDialogOpen","handleClose","DropdownButton","accept","display","component","files","reader","FileReader","importFunc","readAsText","onload","result","readFile","htmlFor","SelectTable","selectTableHOC","ReactTable","COLUMNS","width","backgroundColor","toUpperCase","OfferTable","selected","setSelected","_selected","_setSelected","filterString","setFilterString","lastSelected","setLastSelected","allSelected","setAllSelected","filteredData","row","rowToStr","reactTableRef","useRef","getDisplayedData","getWrappedInstance","getResolvedState","sortedData","_original","displayedData","every","has","tableComponent","ref","toggleSelection","onToggleRow","shiftOn","rowIds","lastSelectedIndex","selectedIndex","start","end","newSelectedState","newSelected","add","selectAll","toggleAll","isSelected","selectType","keyField","ApplicantCell","AssignmentCell","applicationId","ConnectedOfferTable","selectedAssignmentIds","generateApplicantCell","word","charAt","capitalize","DEFAULT_POSITION","PositionEditor","positionProp","setPosition","defaultContractTemplate","ignoreDiacritics","multiple","labelKey","option","selectedContractTypes","DEFAULT_ASSIGNMENT","AssignmentEditor","assignmentProp","setAssignment","DEFAULT_CONTRACT_TEMPLATE","ContractTemplateEditor","contractTemplateProp","setContractTemplate","availableTemplates","templates","templateFile","ConnectedApplicantList","ConnectedContractTemplatesList","ConnectedPositionsList","ConnectedAssignmentsList","assignmentsList","ConnectedSearchBox","ConnectedEmailButton","emailHandler","emailContract","nagOffers","ConnectedPositionEditor","ConnectedAssignmentEditor","DashboardWidget","margin","color","fontFamily","border","padding","Dashboard","ConnectedFilteredList","ownProps","listRenderer","filterFunc","Renderer","setQuery","ControlPanel","BLANK_SESSION","ConnectedAddSessionDialog","setNewSession","ConnectedSessionList","AdminSessionsView","BLANK_POSITION","ConnectedAddPositionDialog","setNewPosition","defaultTemplate","AdminPositionsView","BLANK_ASSIGNMENT","ConnectedAddAssignmentDialog","newAssignment","setNewAssignment","ConnectedAssignmentDetails","wageChunksByAssignment","changeHoursFactory","newWageChunks","j","position_name","ConnectedViewAssignmentDetailsButton","selectedAssignments","visibleAssignments","setVisibleAssignments","ConnectedOfferActionButtons","AdminAssignmentsView","BLANK_CONTRACT_TEMPLATE","ConnectedAddContractTemplateDialog","newContractTemplate","setNewContractTemplate","matchingTemplate","ConnectedContractTemplateList","AdminContractTemplatesView","AdminRoutes","exact","routes","infoComponents","Navbar","bg","Brand","NavDropdown","tabIndex","subroutes","subroute","fullroute","FilterableMenuContents","forwardRef","clearFilter","setFilter","sessionList","toArray","emptyListMessage","FormControl","autoFocus","FilterableMenu","activeItemId","AdminHeader","ConnectedActiveSessionDisplay","ConnectedActiveUserDisplay","mapSessionsDispatchToProps","label","mapActiveUserDispatchToProps","isActiveRole","App","ConnectedApp","globalReducer","offerTableReducer","ongoingInteraction","ongoingInteractionsList","notificationReducer","form","formReducer","persistConfig","whitelist","persistedReducer","persistReducer","rootReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","configureStore","DevFrame","expand","href","Collapse","docExpansion","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.423e30ee.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\n/**\n * Generate proptypes for API responses using the passed-in proptypes function.\n * This is encapsulated so that `PropTypes` can be replaced (for example, with a proxy\n * used for documentation generation).\n *\n * @param {*} PropTypes - a PropTypes function (coming from the `\"prop-types\"` module or elsewhere)\n * @returns an object of PropTypes\n */\nfunction generatePropTypes(PropTypes) {\n    const id = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\n\n    return {\n        apiResponse: PropTypes.shape({\n            status: PropTypes.oneOf([\"success\", \"error\"]).isRequired,\n            message: PropTypes.string,\n            payload: PropTypes.any,\n        }),\n        apiResponseSuccess: PropTypes.shape({\n            status: PropTypes.oneOf([\"success\"]).isRequired,\n            message: PropTypes.string,\n            payload: PropTypes.any,\n        }),\n        apiResponseError: PropTypes.shape({\n            status: PropTypes.oneOf([\"error\"]).isRequired,\n            message: PropTypes.string.isRequired,\n            payload: PropTypes.any,\n        }),\n        idOnly: PropTypes.shape({\n            id,\n        }),\n        session: PropTypes.shape({\n            id,\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            name: PropTypes.string.isRequired,\n        }),\n        contractTemplateMinimal: PropTypes.shape({\n            template_file: PropTypes.string,\n        }),\n        contractTemplate: PropTypes.shape({\n            template_file: PropTypes.string,\n            template_name: PropTypes.string,\n        }),\n        position: PropTypes.shape({\n            position_code: PropTypes.string.isRequired,\n            position_title: PropTypes.string,\n            hours_per_assignment: PropTypes.number,\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            contract_template_id: id,\n            duties: PropTypes.string,\n            qualifications: PropTypes.string,\n            ad_hours_per_assignment: PropTypes.number,\n            ad_num_assignments: PropTypes.number,\n            ad_open_date: PropTypes.string,\n            ad_close_date: PropTypes.string,\n            desired_num_assignments: PropTypes.number,\n            current_enrollment: PropTypes.number,\n            current_waitlisted: PropTypes.number,\n            instructor_ids: PropTypes.arrayOf(id),\n            instructor_preference: PropTypes.arrayOf(\n                PropTypes.shape({\n                    preference_level: PropTypes.number,\n                    applicant_id: id,\n                    instructor_id: id,\n                })\n            ),\n        }),\n        instructor: PropTypes.shape({\n            first_name: PropTypes.string.isRequired,\n            last_name: PropTypes.string.isRequired,\n            email: PropTypes.string,\n            utorid: PropTypes.string.isRequired,\n        }),\n        assignment: PropTypes.shape({\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            note: PropTypes.string,\n            contract_override_pdf: PropTypes.string,\n            applicant_id: id.isRequired,\n            position_id: id.isRequired,\n            active_offer_status: PropTypes.oneOf([\n                \"accepted\",\n                \"rejected\",\n                \"withdrawn\",\n                \"provisional\",\n                \"pending\",\n                \"no_offer\",\n                null,\n            ]),\n        }),\n        applicant: PropTypes.shape({\n            utorid: PropTypes.string.isRequired,\n            student_number: PropTypes.string,\n            first_name: PropTypes.string.isRequired,\n            last_name: PropTypes.string.isRequired,\n            email: PropTypes.string,\n            phone: PropTypes.string,\n        }),\n        wageChunk: PropTypes.shape({\n            start_date: PropTypes.string,\n            end_date: PropTypes.string,\n            hours: PropTypes.number,\n            rate: PropTypes.number,\n        }),\n        reportingTag: PropTypes.shape({\n            name: PropTypes.string,\n        }),\n        offer: PropTypes.shape({\n            first_name: PropTypes.string,\n            last_name: PropTypes.string,\n            email: PropTypes.string,\n            position_code: PropTypes.string,\n            position_title: PropTypes.string,\n            position_start_date: PropTypes.string,\n            position_end_date: PropTypes.string,\n            first_time_ta: PropTypes.bool,\n            instructor_contact_desc: PropTypes.string,\n            pay_period_desc: PropTypes.string,\n            installments: PropTypes.number,\n            ta_coordinator_name: PropTypes.string,\n            ta_coordinator_email: PropTypes.string,\n            emailed_date: PropTypes.string,\n            status: PropTypes.string,\n            accepted_date: PropTypes.string,\n            rejected_date: PropTypes.string,\n            withdrawn_date: PropTypes.string,\n        }),\n        application: PropTypes.shape({\n            session_id: id,\n            comments: PropTypes.string,\n            program: PropTypes.string,\n            department: PropTypes.string,\n            previous_uoft_experience: PropTypes.string,\n            yip: PropTypes.number,\n            annotation: PropTypes.string,\n            applicant_id: id,\n            position_preference: PropTypes.arrayOf(\n                PropTypes.shape({\n                    preference_level: PropTypes.number,\n                    position_id: id,\n                })\n            ),\n        }),\n        user: PropTypes.shape({\n            utorid: PropTypes.string,\n            roles: PropTypes.arrayOf(PropTypes.string),\n        }),\n    };\n}\n\nconst apiPropTypes = generatePropTypes(PropTypes);\n\nexport { apiPropTypes, generatePropTypes };\n","export const mockData = {\n    sessions: [\n        {\n            id: 1,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            name: \"2019 Fall\",\n            rate1: 45.55,\n            rate2: 47.33,\n        },\n        {\n            id: 2,\n            start_date: \"2020-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-30T00:00:00.000Z\",\n            name: \"2021 Spring\",\n            rate1: 45.55,\n            rate2: null,\n        },\n    ],\n    available_contract_templates: [\n        {\n            template_file: \"/math/default.html\",\n        },\n        {\n            template_file: \"/math/default2018.html\",\n        },\n        {\n            template_file: \"/math/invigilate.html\",\n        },\n        {\n            template_file: \"/math/invigilate2014.html\",\n        },\n        {\n            template_file: \"/math/oto.html\",\n        },\n    ],\n    contract_templates: [\n        {\n            id: 1,\n            template_name: \"standard\",\n            template_file: \"/math/default.html\",\n        },\n        {\n            id: 2,\n            template_name: \"oto\",\n            template_file: \"/math/oto.html\",\n        },\n        {\n            id: 3,\n            template_name: \"standard\",\n            template_file: \"/math/default2018.html\",\n        },\n        {\n            id: 4,\n            template_name: \"invigilate\",\n            template_file: \"/math/invigilate.html\",\n        },\n    ],\n    contract_templates_by_session: {\n        \"1\": [1, 2],\n        \"2\": [3, 4],\n    },\n    instructors: [\n        {\n            id: 1000,\n            last_name: \"Smith\",\n            first_name: \"Henry\",\n            email: \"hery.smith@utoronto.ca\",\n            utorid: \"smithh\",\n        },\n        {\n            id: 1001,\n            last_name: \"Garcia\",\n            first_name: \"Emily\",\n            email: \"emily.garcia@utoronto.ca\",\n            utorid: \"garciae\",\n        },\n        {\n            id: 1002,\n            last_name: \"Miller\",\n            first_name: \"Megan\",\n            email: \"megan.miller@utoronto.ca\",\n            utorid: \"millerm\",\n        },\n        {\n            id: 1003,\n            last_name: \"Beera\",\n            first_name: \"Lizzy\",\n            email: \"lizzy.beera@utoronto.ca\",\n            utorid: \"beeral\",\n        },\n    ],\n    positions_by_session: {\n        \"1\": [10, 11, 14, 15, 16],\n        \"2\": [12, 13],\n    },\n    positions: [\n        {\n            id: 10,\n            position_code: \"MAT135H1F\",\n            position_title: \"Calculus I\",\n            hours_per_assignment: 70,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            contract_template_id: 1,\n            duties: \"Tutorials\",\n            qualifications: \"Teaching skill\",\n            ad_hours_per_assignment: 70,\n            ad_num_assignments: 15,\n            ad_open_date: \"2019-08-01T00:00:00.000Z\",\n            ad_close_date: \"2019-08-15T00:00:00.000Z\",\n            desired_num_assignments: 15,\n            current_enrollment: 1200,\n            current_waitlisted: 200,\n            instructor_ids: [1000, 1001],\n            instructor_preferences: [\n                {\n                    preference_level: 2,\n                    applicant_id: 2000,\n                    instructor_id: 1000,\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2002,\n                    instructor_id: 1000,\n                },\n                {\n                    preference_level: -1,\n                    applicant_id: 2005,\n                    instructor_id: 1001,\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2002,\n                    instructor_id: 1001,\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2006,\n                    instructor_id: 1001,\n                },\n            ],\n        },\n        {\n            id: 11,\n            position_code: \"MAT136H1F\",\n            position_title: \"Calculus II\",\n            hours_per_assignment: 70,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            contract_template_id: 2,\n            instructor_ids: [],\n        },\n        {\n            id: 12,\n            position_code: \"CSC135H1F\",\n            position_title: \"Computer Fun\",\n            hours_per_assignment: 70,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            duties: \"Tutorials\",\n            contract_template_id: 3,\n            instructor_ids: [1000],\n            instructor_preferences: [\n                {\n                    preference_level: -1,\n                    applicant_id: 2005,\n                    instructor_id: 1000,\n                },\n                {\n                    preference_level: 2,\n                    applicant_id: 2001,\n                    instructor_id: 1000,\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2006,\n                    instructor_id: 1000,\n                },\n            ],\n        },\n        {\n            id: 13,\n            position_code: \"MAT235H1F\",\n            position_title: \"Calculus III\",\n            hours_per_assignment: 70,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            contract_template_id: 3,\n            instructor_ids: [1002],\n            instructor_preferences: [\n                {\n                    preference_level: 2,\n                    applicant_id: 2000,\n                    instructor_id: 1002,\n                },\n                {\n                    preference_level: 1,\n                    applicant_id: 2002,\n                    instructor_id: 1002,\n                },\n            ],\n        },\n        {\n            instructor_ids: [1002],\n            position_code: \"CSC100H1S\",\n            position_title: \"Computers for Humans\",\n            hours_per_assignment: 100,\n            duties:\n                \"Some combination of marking, invigilating, tutorials, office hours, and the help centre.\",\n            contract_template_id: 1,\n            start_date: \"2021-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 14,\n        },\n        {\n            instructor_ids: [1000],\n            position_code: \"MAT137Y1Y\",\n            position_title: \"Calculus!\",\n            hours_per_assignment: 250,\n            duties:\n                \"Some combination of marking, invigilating, tutorials, office hours, and the help centre.\",\n            contract_template_id: 1,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            qualifications: \"Skilled Proofs Reader\",\n            current_enrollment: 1500,\n            current_waitlisted: 78,\n            desired_num_assignments: 22,\n            id: 15,\n        },\n        {\n            instructor_ids: [1001],\n            position_code: \"MAT135H1F Head TA\",\n            position_title: \"Calculus I\",\n            hours_per_assignment: 225,\n            duties: \"Top-notch Head TA Stuff\",\n            contract_template_id: 1,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            desired_num_assignments: 3,\n            id: 16,\n        },\n    ],\n    applicants: [\n        {\n            id: 2000,\n            utorid: \"weasleyr\",\n            student_number: \"89013443\",\n            first_name: \"Ron\",\n            last_name: \"Weasley\",\n            email: \"ron@potter.com\",\n            phone: \"543-223-9993\",\n        },\n        {\n            id: 2001,\n            utorid: \"potterh\",\n            student_number: \"999666999\",\n            first_name: \"Harry\",\n            last_name: \"Potter\",\n            email: \"harry@potter.com\",\n        },\n        {\n            id: 2002,\n            utorid: \"smithb\",\n            email: \"smithb@mail.utoronto.ca\",\n            first_name: \"Bethany\",\n            last_name: \"Smith\",\n            student_number: \"131382748\",\n        },\n        {\n            id: 2003,\n            utorid: \"wilsonh\",\n            email: \"wilsonh@mail.utoronto.ca\",\n            first_name: \"Hanna\",\n            last_name: \"Wilson\",\n            student_number: \"600366904\",\n        },\n        {\n            id: 2004,\n            utorid: \"molinat\",\n            email: \"molinat@mail.utoronto.ca\",\n            first_name: \"Troy\",\n            last_name: \"Molina\",\n            student_number: \"328333023\",\n        },\n        {\n            id: 2005,\n            utorid: \"howeyb\",\n            email: \"howeyb@mail.utoronto.ca\",\n            first_name: \"Brett\",\n            last_name: \"Howey\",\n            student_number: \"329613524\",\n        },\n        {\n            id: 2006,\n            utorid: \"brownd\",\n            email: \"brownd@mail.utoronto.ca\",\n            first_name: \"David\",\n            last_name: \"Brown\",\n            student_number: \"29151485\",\n        },\n    ],\n    assignments_by_session: {\n        \"1\": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109],\n        \"2\": [],\n    },\n    assignments: [\n        {\n            id: 100,\n            position_id: 10,\n            applicant_id: 2001,\n            hours: 90,\n        },\n        {\n            id: 101,\n            position_id: 10,\n            applicant_id: 2005,\n            hours: 95,\n        },\n        {\n            note: \"\",\n            position_id: 16,\n            applicant_id: 2000,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            id: 102,\n        },\n        {\n            note: \"\",\n            position_id: 16,\n            applicant_id: 2002,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            id: 103,\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2001,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 104,\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2002,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 105,\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2005,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 106,\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2000,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 107,\n        },\n        {\n            note: \"\",\n            position_id: 15,\n            applicant_id: 2006,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 108,\n        },\n        {\n            note: \"\",\n            position_id: 14,\n            applicant_id: 2002,\n            start_date: \"2021-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n            id: 109,\n        },\n    ],\n    wage_chunks: [\n        {\n            id: 3000,\n            assignment_id: 100,\n            hours: 20,\n            start_date: \"2019-09-08T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n            rate: 10.01,\n        },\n        {\n            id: 3001,\n            assignment_id: 100,\n            hours: 35,\n            start_date: \"2020-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-20T00:00:00.000Z\",\n            rate: 12.02,\n        },\n        {\n            id: 3002,\n            assignment_id: 101,\n            hours: 95,\n            start_date: \"2019-09-01T00:00:00.000Z\",\n            end_date: \"2020-04-20T00:00:00.000Z\",\n            rate: null,\n        },\n        {\n            id: 3003,\n            assignment_id: 102,\n            hours: 225,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n        },\n        {\n            id: 3004,\n            assignment_id: 103,\n            hours: 225,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T00:00:00.000Z\",\n        },\n        {\n            id: 3005,\n            assignment_id: 104,\n            hours: 125,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\",\n        },\n        {\n            id: 3006,\n            assignment_id: 104,\n            hours: 125,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n        {\n            id: 3007,\n            assignment_id: 105,\n            hours: 125,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\",\n        },\n        {\n            id: 3008,\n            assignment_id: 105,\n            hours: 125,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n        {\n            id: 3009,\n            assignment_id: 106,\n            hours: 125,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\",\n        },\n        {\n            id: 3010,\n            assignment_id: 106,\n            hours: 125,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n        {\n            id: 3011,\n            assignment_id: 107,\n            hours: 100,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\",\n        },\n        {\n            id: 3012,\n            assignment_id: 107,\n            hours: 100,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n        {\n            id: 3013,\n            assignment_id: 108,\n            hours: 100,\n            start_date: \"2019-09-02T00:00:00.000Z\",\n            end_date: \"2019-12-31T05:00:00.000Z\",\n        },\n        {\n            id: 3014,\n            assignment_id: 108,\n            hours: 100,\n            start_date: \"2020-01-01T05:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n        {\n            id: 3015,\n            assignment_id: 109,\n            hours: 100,\n            start_date: \"2021-01-01T00:00:00.000Z\",\n            end_date: \"2020-04-03T00:00:00.000Z\",\n        },\n    ],\n    offers: [\n        {\n            id: 10000,\n            assignment_id: 100,\n            status: \"withdrawn\",\n        },\n        {\n            id: 10001,\n            assignment_id: 100,\n            status: \"pending\",\n        },\n        {\n            id: 10002,\n            assignment_id: 101,\n            status: \"accepted\",\n        },\n        {\n            id: 10003,\n            assignment_id: 102,\n            status: \"withdrawn\",\n        },\n    ],\n    applications: [\n        {\n            comments: \"\",\n            program: \"Phd\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"Last year I TAed a bunch\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2000,\n            position_preferences: [\n                {\n                    preference_level: 2,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 15,\n                },\n            ],\n        },\n        {\n            comments: \"\",\n            program: \"UG\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2001,\n            position_preferences: [\n                {\n                    preference_level: 0,\n                    position_id: 12,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n            ],\n        },\n        {\n            comments: \"\",\n            program: \"Phd\",\n            department: \"Math\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2002,\n            position_preferences: [\n                {\n                    preference_level: 3,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n                {\n                    preference_level: 2,\n                    position_id: 12,\n                },\n                {\n                    preference_level: 0,\n                    position_id: 11,\n                },\n            ],\n        },\n        {\n            comments: \"\",\n            program: \"Phd\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2005,\n            position_preferences: [\n                {\n                    preference_level: 2,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n                {\n                    preference_level: 0,\n                    position_id: 12,\n                },\n                {\n                    preference_level: 1,\n                    position_id: 11,\n                },\n            ],\n        },\n        {\n            comments: \"\",\n            program: \"UG\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 1,\n            applicant_id: 2006,\n            position_preferences: [\n                {\n                    preference_level: 3,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 0,\n                    position_id: 13,\n                },\n                {\n                    preference_level: 2,\n                    position_id: 12,\n                },\n            ],\n        },\n        {\n            comments: \"\",\n            program: \"UG\",\n            department: \"Math\",\n            previous_uoft_ta_experience: \"\",\n            yip: 3,\n            annotation: \"\",\n            session_id: 2,\n            applicant_id: 2002,\n            position_preferences: [\n                {\n                    preference_level: 3,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n                {\n                    preference_level: 2,\n                    position_id: 12,\n                },\n                {\n                    preference_level: 0,\n                    position_id: 11,\n                },\n            ],\n        },\n        {\n            comments: \"\",\n            program: \"MSc\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 2,\n            annotation: \"\",\n            session_id: 2,\n            applicant_id: 2003,\n            position_preferences: [\n                {\n                    preference_level: 3,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n                {\n                    preference_level: 2,\n                    position_id: 12,\n                },\n                {\n                    preference_level: 0,\n                    position_id: 11,\n                },\n            ],\n        },\n        {\n            comments: \"\",\n            program: \"UG\",\n            department: \"Computer Science\",\n            previous_uoft_ta_experience: \"\",\n            yip: 4,\n            annotation: \"\",\n            session_id: 2,\n            applicant_id: 2004,\n            position_preferences: [\n                {\n                    preference_level: 1,\n                    position_id: 10,\n                },\n                {\n                    preference_level: 3,\n                    position_id: 13,\n                },\n            ],\n        },\n    ],\n    users: [\n        {\n            email: \"hery.smith@utoronto.ca\",\n            utorid: \"smithh\",\n            roles: [\"admin\", \"instructor\"],\n        },\n        {\n            email: \"emily.garcia@utoronto.ca\",\n            utorid: \"garciae\",\n            roles: [\"instructor\"],\n        },\n        {\n            email: \"megan.miller@utoronto.ca\",\n            utorid: \"millerm\",\n            roles: [\"instructor\"],\n        },\n        {\n            email: \"lizzy.beera@utoronto.ca\",\n            utorid: \"beeral\",\n            roles: [\"instructor\"],\n        },\n    ],\n    active_user: \"smithh\",\n};\n","/**\n * A collection of untility functions to help with the mock API\n */\n\n/**\n * Adds the arguments passed in.\n *\n * @export\n * @param {} numbers\n * @returns {number}\n */\nexport function sum(...numbers) {\n    let ret = 0;\n    for (const num of numbers) {\n        ret += +num;\n    }\n    return ret;\n}\n\n/**\n * Given a date range, returns an array of one or two ranges depending\n * on whether the date range includes a new-years.\n *\n * @export\n * @param {(string|Date)} start_date\n * @param {(string|Date)} end_date\n * @returns {{start_date: string, end_date:string}[]}\n */\nexport function splitDateRangeAtNewYear(start_date, end_date) {\n    start_date = new Date(start_date);\n    end_date = new Date(end_date);\n    // For `Date`, 11 is december\n    const december = new Date(start_date.getFullYear(), 11, 31);\n    // For `Date`, 12 will be the first month of the subsequent year\n    const january = new Date(start_date.getFullYear(), 12, 1);\n    if (start_date <= december && end_date > december) {\n        return [\n            {\n                start_date: start_date.toISOString(),\n                end_date: december.toISOString(),\n            },\n            {\n                start_date: january.toISOString(),\n                end_date: end_date.toISOString(),\n            },\n        ];\n    }\n    return [\n        {\n            start_date: start_date.toISOString(),\n            end_date: end_date.toISOString(),\n        },\n    ];\n}\n\n/**\n * Generates an unused Id based on the `prop` attribute.\n *\n * @export\n * @param {object[]} data - array of data with `prop` attributes\n * @param {string} [prop=\"id\"] - attribute to key on\n * @returns {number|string}\n */\nexport function getUnusedId(data, prop = \"id\") {\n    const ids = data.map((x) => +x[prop]).filter((x) => x != null);\n    const max = Math.max(0, ...ids);\n    if (isNaN(max)) {\n        // Somehow there was some other type mixed in with the ids. In this case,\n        // generate a random string\n        return \"id-\" + Math.round(Math.random() * 10000);\n    }\n    return max + 1;\n}\n\n/**\n * Find `obj` in `data` based on a matching attribute of `prop`.\n * Returns matching object or `undefined` if no match was found.\n *\n * @export\n * @param {*} obj\n * @param {*} [data=[]]\n * @param {string} [prop=\"id\"]\n * @returns {undefined|object}\n */\nexport function find(obj, data = [], prop = \"id\") {\n    // We really do want to use `==` and not `===` here.\n    // Sometimes ids are given as ints and sometimes as strings;\n    // we should work interchangibly with both.\n    // eslint-disable-next-line\n    return data.find((s) => s[prop] == obj[prop]);\n}\n\n/**\n * Filter `data` to be a list which only includes items\n * with ids listed in `ids`.\n *\n * @export\n * @param {string[]} [ids=[]]\n * @param {object[]} [data=[]]\n * @param {string} [prop=\"id\"]\n * @returns {object[]}\n */\nexport function findAllById(ids = [], data = [], prop = \"id\") {\n    // ids can be numbers or strings; make sure we get a match in either case.\n    ids = ids.map((x) => \"\" + x);\n    return data.filter((x) => ids.includes(\"\" + x[prop]));\n}\n\n/**\n * Delete the first occurance of `obj` in `data`\n *\n * @export\n * @param {*} obj\n * @param {*} [data=[]]\n */\nexport function deleteInArray(obj, data = []) {\n    data.splice(data.indexOf(obj), 1);\n}\n\n/**\n * Verify whether attributes are nonempty/unique. If they fail these\n * checks, return an appropriate error message. If they pass, return `false`.\n *\n * @export\n * @param {object} obj\n * @param {object[]} [data=[]]\n * @param {boolean} [props={ id: { required: true, unique: true } }]\n * @returns {string|boolean} - `false` if all checks succeed. Otherwise an appropriate error message.\n */\nexport function getAttributesCheckMessage(\n    obj,\n    data = [],\n    props = { id: { required: true, unique: true } }\n) {\n    for (const [prop, requirements] of Object.entries(props)) {\n        // Required attributes cannot be null or the empty string\n        // Note: `== null` check null and undefined\n        if (requirements.required && (obj[prop] == null || obj[prop] === \"\")) {\n            return `Property ${prop} cannot be empty`;\n        }\n        // Search the data for something with a matching prop. If we find\n        // anything, we are not unique\n        if (requirements.unique && find(obj, data, prop)) {\n            return `Duplicate entry exists for property ${prop} with value ${obj[prop]}`;\n        }\n    }\n    return false;\n}\n\n/**\n * Base class for mockAPI controllers. These handle\n * the mockAPI data and queries thereof.\n *\n * @export\n * @class MockAPIController\n */\nexport class MockAPIController {\n    constructor(data, ownData) {\n        this.data = data;\n        this.ownData = ownData;\n    }\n    /**\n     * Finds all instances of the given item; returns an array copy.\n     *\n     * @returns {object[]}\n     * @memberof MockAPIController\n     */\n    findAll() {\n        return [...this.ownData];\n    }\n    /**\n     * Finds a single instance of an item\n     *\n     * @param {({id: number}|number)} query\n     * @returns {object}\n     * @memberof MockAPIController\n     */\n    find(query) {\n        return this.rawFind(query);\n    }\n    /**\n     * Not to be overridden. The return value of this object\n     * must be an unmangled version of the actual data stored (so that it can be\n     * mutated, for example.)\n     *\n     * @param {*} query\n     * @returns\n     * @memberof MockAPIController\n     */\n    rawFind(query) {\n        if (query == null) {\n            return null;\n        }\n        if (query.id != null) {\n            return find(query, this.ownData);\n        }\n        return find({ id: query }, this.ownData);\n    }\n    /**\n     * Delete the given object (by id).\n     *\n     * @param {{id: number}} obj\n     * @memberof MockAPIController\n     */\n    delete(obj) {\n        obj = this.rawFind(obj);\n        if (!obj) {\n            throw new Error(`Cannot delete object ${JSON.stringify(obj)}`);\n        }\n        deleteInArray(obj, this.ownData);\n        return obj;\n    }\n    /**\n     * Get an unused ID\n     *\n     * @returns {number}\n     * @memberof MockAPIController\n     */\n    unusedId() {\n        if (!this.ownData) {\n            throw new Error(\n                \"Cannot get unused ID when `ownData` hasn't been set\"\n            );\n        }\n        return getUnusedId(this.ownData);\n    }\n    /**\n     * Creates a new item instance; no validation is performed.\n     *\n     * @param {object} obj - the new instance data\n     * @memberof MockAPIController\n     */\n    create(obj) {\n        const newId = getUnusedId(this.ownData);\n        const newItem = { ...obj, id: newId };\n        this.ownData.push(newItem);\n        return newItem;\n    }\n    /**\n     * Validates the properties of a new item instance. Throws an error\n     * if the properties are invalid/incompatable.\n     *\n     * @param {object} obj\n     * @memberof MockAPIController\n     */\n    validateNew() {\n        throw new Error(\"Subclasses must impliment `validateNew()`\");\n    }\n\n    /**\n     * Validates a property of an item instance. Throws an error\n     * if this property are invalid/incompatable.\n     *\n     * @param {object} obj\n     * @param {string} prop\n     * @memberof MockAPIController\n     */\n    // eslint-disable-next-line no-unused-vars\n    validateProp(prop, value, id) {\n        return true;\n    }\n    /**\n     * Update an item if it can be found. Otherwise, return null.\n     *\n     * @param {*} obj\n     * @returns {(object|null)}\n     * @memberof MockAPIController\n     */\n    updateIfFound(obj) {\n        const item = this.rawFind(obj);\n        if (!item) {\n            return null;\n        }\n        // We've found a matching item. Update all non-null\n        // properties\n        for (const prop in obj) {\n            if (prop != null) {\n                this.validateProp(prop, obj[prop], obj.id);\n                item[prop] = obj[prop];\n            }\n        }\n        return item;\n    }\n    /**\n     * Upsert an item. `validateNew` will be run on the item before it is created.\n     * Null/undefined parameters will not be updated.\n     *\n     * @param {object} obj\n     * @returns {object}\n     * @memberof MockAPIController\n     */\n    upsert(obj) {\n        if (this.rawFind(obj)) {\n            return this.updateIfFound(obj);\n        }\n        this.validateNew(obj);\n        return this.create(obj);\n    }\n}\n\n/**\n * Extract the earliest start date and latest end date from\n * an array of wage chunks.\n *\n * @export\n * @param {[object]} wageChunks\n * @returns {{start_date: date, end_date: date}}\n */\nexport function wageChunkArrayToStartAndEndDates(wageChunks) {\n    const startDates = wageChunks.map((x) => x.start_date);\n    const endDates = wageChunks.map((x) => x.end_date);\n    startDates.sort();\n    endDates.sort();\n    return {\n        start_date: startDates[0],\n        end_date: endDates[endDates.length - 1],\n    };\n}\n\n/**\n * Join an array of strings with the conjunction \"and\", if suitable.\n *\n * @param {[string]} items\n * @returns {string}\n */\nfunction joinWithConjunction(items) {\n    if (items == null || items.length === 0) {\n        return \"\";\n    }\n    if (items.length === 1) {\n        return items[0];\n    }\n    if (items.length === 2) {\n        return `${items[0]} and ${items[1]}`;\n    }\n    items = [...items];\n    items[items.length - 1] = \"and \" + items[items.length - 1];\n    return items.join(\", \");\n}\n\n/**\n * Format a list of instructors to appear in a contract.\n *\n * @export\n * @param {[object]} instructors\n * @returns {string}\n */\nexport function formatInstructorsContact(instructors) {\n    if (!instructors) {\n        return [];\n    }\n    const contacts = instructors.map(\n        (x) => `${x.first_name} ${x.last_name} <${x.email}>`\n    );\n    return joinWithConjunction(contacts);\n}\n\n/**\n * Take an array of wage chunks and create a formatted string describing every separate\n * pay period. If there are multiple wage chunks with the same rate, their hours are combined\n * and the pay window is made large enough to contain those chunks.\n *\n * @export\n * @param {[object]} wageChunks\n * @returns {string}\n */\nexport function wageChunkArrayToPayPeriodDescription(wageChunks) {\n    // Every different pay rate needs to be explained separately\n    // So first make a hash based on pay rates\n    const rateData = {};\n    for (const wageChunk of wageChunks) {\n        let { rate, start_date, end_date, hours } = wageChunk;\n        start_date = new Date(start_date);\n        end_date = new Date(end_date);\n        rateData[rate] = rateData[rate] || { hours: 0, rate };\n        const data = rateData[rate];\n        data.hours += hours;\n        data.start_date = data.start_date || start_date;\n        data.start_date = Math.min(data.start_date, start_date);\n        data.end_date = data.end_date || end_date;\n        data.end_date = Math.max(data.end_date, end_date);\n    }\n    const descriptions = Object.values(rateData).map(\n        ({ hours, rate, start_date, end_date }) => {\n            start_date = new Date(start_date);\n            end_date = new Date(end_date);\n\n            return `${hours} hours at $${rate}/hour from ${start_date.toLocaleDateString(\n                \"EN-ca\",\n                { month: \"long\", day: \"numeric\", year: \"numeric\" }\n            )} to ${end_date.toLocaleDateString(\"EN-ca\", {\n                month: \"long\",\n                day: \"numeric\",\n                year: \"numeric\",\n            })}`;\n        }\n    );\n\n    return joinWithConjunction(descriptions);\n}\n","import { getAttributesCheckMessage, MockAPIController } from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\n\nexport class Session extends MockAPIController {\n    constructor(data) {\n        super(data, data.sessions);\n    }\n    create(session) {\n        const newSession = super.create(session);\n        // If we insert a new session, we need to make sure we create\n        // a corresponding assignments_by_session array\n        this.data.assignments_by_session[newSession.id] = [];\n        return newSession;\n    }\n    validateNew(session) {\n        // if we're here, we need to create a new session\n        // but check if the session name is empty or duplicate\n        const message = getAttributesCheckMessage(session, this.ownData, {\n            name: { required: true, unique: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n\n    validateProp(prop, value, id) {\n        if (prop === \"name\") {\n            // check if `name` is empty\n            if (value === undefined || value.length === 0) {\n                throw new Error(\n                    `Property ${prop} cannot be empty or undefined.`\n                );\n            }\n            // if `name` is not empty, make sure it is unique after the update\n            // by filtering out the request session\n            const filteredData = this.findAll().filter(\n                (item) => item.id !== id\n            );\n            // and make sure `name` is unique to the rest\n            const message = getAttributesCheckMessage(\n                { name: value },\n                filteredData,\n                {\n                    name: { unique: true },\n                }\n            );\n            if (message) {\n                throw new Error(message);\n            }\n        }\n\n        return true;\n    }\n}\n\nexport const sessionsRoutes = {\n    get: {\n        \"/sessions\": documentCallback({\n            func: (data) => new Session(data).findAll(),\n            summary: \"Get all available sessions\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.session),\n        }),\n    },\n    post: {\n        \"/sessions\": documentCallback({\n            func: (data, params, body) => {\n                // body should be a session object. If it contains an id,\n                // update an existing session. Otherwise, create a new one.\n                return new Session(data).upsert(body);\n            },\n            summary: \"Upsert a session\",\n            returns: docApiPropTypes.session,\n            posts: docApiPropTypes.session,\n        }),\n        \"/sessions/delete\": documentCallback({\n            func: (data, params, body) => {\n                return new Session(data).delete(body);\n            },\n            summary: \"Delete a session\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.session,\n        }),\n    },\n};\n","import {\n    getAttributesCheckMessage,\n    findAllById,\n    MockAPIController,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { Session } from \"./sessions\";\n\nexport class ContractTemplate extends MockAPIController {\n    constructor(data) {\n        super(data);\n        this.ownData = this.data.contract_templates;\n    }\n    validateNew(template, session = null) {\n        // The name and file are required\n        const message = getAttributesCheckMessage(template, this.ownData, {\n            template_name: { required: true },\n            template_file: { required: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n        // If we're inserting to a session, the name must be unique\n        if (session) {\n            const message = getAttributesCheckMessage(\n                template,\n                this.findAllBySession(session),\n                {\n                    template_name: { required: true, unique: true },\n                }\n            );\n            if (message) {\n                throw new Error(message);\n            }\n        }\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).find(session);\n        return findAllById(\n            this.data.contract_templates_by_session[matchingSession.id] || [],\n            this.ownData\n        );\n    }\n    upsertBySession(obj, session) {\n        const matchingSession = new Session(this.data).find(session);\n        // If this is not an upsert, validate the paramters. Otherwise, don't validate.\n        if (!this.find(obj)) {\n            this.validateNew(obj, matchingSession);\n        }\n        const newTemplate = this.upsert(obj);\n        // Make sure there is an array for to store the contract_templates by session,\n        // and the push to this array before returning the new object\n        this.data.contract_templates_by_session[matchingSession.id] =\n            this.data.contract_templates_by_session[matchingSession.id] || [];\n        this.data.contract_templates_by_session[matchingSession.id].push(\n            newTemplate.id\n        );\n        return newTemplate;\n    }\n}\n\nexport const templatesRoutes = {\n    get: {\n        \"/available_contract_templates\": documentCallback({\n            func: (data) => [...data.available_contract_templates],\n            summary:\n                \"Get all available contract templates (these are literal files on the server).\",\n            returns: wrappedPropTypes.arrayOf(\n                docApiPropTypes.contractTemplateMinimal\n            ),\n        }),\n        \"/sessions/:session_id/contract_templates\": documentCallback({\n            func: (data, params) =>\n                new ContractTemplate(data).findAllBySession(params.session_id),\n            summary: \"Get contract templates associated with this session.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.contractTemplate),\n        }),\n    },\n    post: {\n        \"/sessions/:session_id/contract_templates\": documentCallback({\n            func: (data, params, body) => {\n                return new ContractTemplate(data).upsertBySession(\n                    body,\n                    params.session_id\n                );\n            },\n            summary:\n                \"Associate a position template with a session; this method upserts\",\n            posts: docApiPropTypes.contractTemplate,\n            returns: docApiPropTypes.contractTemplate,\n        }),\n    },\n};\n","import {\n    getAttributesCheckMessage,\n    deleteInArray,\n    MockAPIController,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\n\nexport class Instructor extends MockAPIController {\n    constructor(data) {\n        super(data, data.instructors);\n    }\n    validateNew(instructor) {\n        const message = getAttributesCheckMessage(instructor, this.ownData, {\n            utorid: { required: true, unique: true },\n            first_name: { required: true },\n            last_name: { required: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    delete(instructor) {\n        const matchingInstructor = this.find(instructor);\n        if (!matchingInstructor) {\n            throw new Error(\n                `Cannot find instructor matching ${JSON.stringify(instructor)}`\n            );\n        }\n        super.delete(matchingInstructor);\n        // After an instructor is deleted, they should be removed from all courses\n\n        // remove this instructor from any positions\n        for (const position of this.data.positions) {\n            if (\n                (position.instructor_ids || []).includes(matchingInstructor.id)\n            ) {\n                deleteInArray(matchingInstructor.id, position.instructor_ids);\n            }\n        }\n        return matchingInstructor;\n    }\n}\n\nexport const instructorsRoutes = {\n    get: {\n        \"/instructors\": documentCallback({\n            func: (data) => new Instructor(data).findAll(),\n            summary: \"Get a list of all instructors\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.instructor),\n        }),\n    },\n    post: {\n        \"/instructors\": documentCallback({\n            func: (data, params, body) => {\n                return new Instructor(data).upsert(body);\n            },\n            summary: \"Upsert an instructor\",\n            posts: docApiPropTypes.instructor,\n            returns: docApiPropTypes.instructor,\n        }),\n        \"/instructors/delete\": documentCallback({\n            func: (data, params, body) => {\n                return new Instructor(data).delete(body);\n            },\n            summary: \"Delete an instructor (removes from all positions)\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.instructor,\n        }),\n    },\n};\n","import {\n    find,\n    getAttributesCheckMessage,\n    deleteInArray,\n    findAllById,\n    MockAPIController,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { Session } from \"./sessions\";\nimport { ContractTemplate } from \"./contract_templates\";\nimport { Instructor } from \"./instructors\";\n\nexport class Position extends MockAPIController {\n    constructor(data) {\n        super(data, data.positions);\n    }\n    validateNew(position, session = null) {\n        // If we're inserting to a session, the position_code must be unique\n        if (session) {\n            const message = getAttributesCheckMessage(\n                position,\n                this.findAllBySession(session),\n                {\n                    position_code: { required: true, unique: true },\n                }\n            );\n            if (message) {\n                throw new Error(message);\n            }\n        }\n    }\n    find(query) {\n        const rawPosition = this.rawFind(query);\n        // Find which session we're part of\n\n        let session_id = null;\n        for (const [_session_id, assignment_ids] of Object.entries(\n            this.data.positions_by_session\n        )) {\n            if (assignment_ids.includes(rawPosition.id)) {\n                session_id = _session_id;\n                break;\n            }\n        }\n        return { ...rawPosition, session_id };\n    }\n    getSession(position) {\n        return new Session(this.data).find({\n            id: position.session_id,\n        });\n    }\n    getContractTemplate(position) {\n        return new ContractTemplate(this.data).find({\n            id: position.contract_template_id,\n        });\n    }\n    getInstructors(position) {\n        if (!position.instructor_ids) {\n            return [];\n        }\n        return position.instructor_ids.map((id) =>\n            new Instructor(this.data).find({ id })\n        );\n    }\n    delete(position) {\n        const matchingPosition = this.rawFind(position);\n        if (!matchingPosition) {\n            throw new Error(\n                `Cannot find position matching ${JSON.stringify(position)}`\n            );\n        }\n        super.delete(matchingPosition);\n        // After an instructor is deleted, they should be removed from all courses\n\n        // remove this instructor from any positions\n        for (const bySessionsList of Object.values(\n            this.data.positions_by_session\n        )) {\n            if (bySessionsList.includes(matchingPosition.id)) {\n                deleteInArray(matchingPosition.id, bySessionsList);\n            }\n        }\n        return matchingPosition;\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).find(session);\n        return findAllById(\n            this.data.positions_by_session[matchingSession.id] || [],\n            this.ownData\n        );\n    }\n    upsertBySession(obj, session) {\n        const matchingSession = new Session(this.data).rawFind(session);\n        // If this is not an upsert, validate the paramters. Otherwise, don't validate.\n        if (!this.rawFind(obj)) {\n            this.validateNew(obj, matchingSession);\n\n            // if the start/end date is not set,\n            // use the session dates\n            obj.start_date =\n                obj.start_date === undefined\n                    ? matchingSession.start_date\n                    : obj.start_date;\n            obj.end_date =\n                obj.end_date === undefined\n                    ? matchingSession.end_date\n                    : obj.end_date;\n        }\n        const newPosition = this.upsert(obj);\n        // Make sure there is an array for to store the contract_templates by session,\n        // and the push to this array before returning the new object\n        this.data.positions_by_session[matchingSession.id] =\n            this.data.positions_by_session[matchingSession.id] || [];\n        this.data.positions_by_session[matchingSession.id].push(newPosition.id);\n        return newPosition;\n    }\n    findAssociatedSession(position) {\n        const matchingPosition = this.find(position);\n        if (!matchingPosition) {\n            throw new Error(\n                `Could not associated session because there is no position matching ${JSON.stringify(\n                    position\n                )}`\n            );\n        }\n        const ret = Object.keys(this.data.positions_by_session).find((x) =>\n            this.data.positions_by_session[x].includes(matchingPosition.id)\n        );\n        // Make sure we recast the id as an int\n        return ret != null ? +ret : ret;\n    }\n}\n\nexport const positionsRoutes = {\n    get: {\n        \"/sessions/:session_id/positions\": documentCallback({\n            func: (data, params) =>\n                new Position(data).findAllBySession(params.session_id),\n            summary: \"Get positions associated with this session.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.position),\n        }),\n    },\n    post: {\n        \"/sessions/:session_id/positions\": documentCallback({\n            func: (data, params, body) => {\n                return new Position(data).upsertBySession(\n                    body,\n                    params.session_id\n                );\n            },\n            summary:\n                \"Upsert a position associated with a session. If a new position is created, it will be automatically associated with the given session\",\n            posts: docApiPropTypes.position,\n            returns: docApiPropTypes.position,\n        }),\n        \"/positions\": documentCallback({\n            func: (data, params, body) => {\n                const positions = data.positions;\n                // body should be a session object. If it contains an id,\n                // update an existing session. Otherwise, create a new one.\n                const matchingPosition = find(body, positions);\n                if (matchingPosition) {\n                    return Object.assign(matchingPosition, body);\n                }\n                throw new Error(`Cannot find position with id=${body.id}`);\n            },\n            summary: \"Update a position\",\n            posts: docApiPropTypes.position,\n            returns: docApiPropTypes.position,\n        }),\n        \"/positions/delete\": documentCallback({\n            func: (data, params, body) => {\n                return new Position(data).delete(body);\n            },\n            summary: \"Delete a position\",\n            posts: docApiPropTypes.idOnly,\n            returns: docApiPropTypes.session,\n        }),\n    },\n};\n","import { documentCallback, docApiPropTypes } from \"../defs/doc-generation\";\nimport { find, MockAPIController, findAllById } from \"./utils\";\nimport { Assignment } from \"./assignments\";\nimport { Position } from \"./positions\";\n\nexport class WageChunk extends MockAPIController {\n    constructor(data) {\n        super(data, data.wage_chunks);\n    }\n    validateNew() {\n        // There is nothing to validate for a wage chunk\n    }\n    findAllByAssignment(assignment) {\n        const matchingAssignment = new Assignment(this.data).rawFind(\n            assignment\n        );\n        if (!matchingAssignment) {\n            throw new Error(\n                `Could not find assignment matching ${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n        // Make sure we apply `this.find` so that the rates are computed.\n        return findAllById(\n            [matchingAssignment.id],\n            this.ownData,\n            \"assignment_id\"\n        ).map((x) => this.find(x));\n    }\n    find(wageChunk) {\n        const rawWageChunk = this.rawFind(wageChunk);\n        const ret = { ...rawWageChunk };\n        if (ret.rate == null) {\n            // If the rate is not set, look it up from the session\n            const session = this.getSession(wageChunk);\n            if (session.rate2 == null) {\n                ret.rate = session.rate1;\n            } else {\n                // Rates switch from session.rate1 to session.rate2 on January 1 of\n                // the year following the session start date.\n                const start_date = new Date(wageChunk.start_date);\n                const end_date = new Date(wageChunk.end_date);\n                const session_start_date = new Date(session.start_date);\n                // For `Date`, 11 is december\n                const december = new Date(\n                    session_start_date.getFullYear(),\n                    11,\n                    31\n                );\n                if (start_date <= december && end_date <= december) {\n                    ret.rate = session.rate1;\n                } else {\n                    ret.rate = session.rate2;\n                }\n            }\n        }\n        return ret;\n    }\n    getSession(wageChunk) {\n        const rawWageChunk = this.rawFind(wageChunk);\n        const assignment = new Assignment(this.data).rawFind({\n            id: rawWageChunk.assignment_id,\n        });\n        const position = new Assignment(this.data).getPosition(assignment);\n        return new Position(this.data).getSession(position);\n    }\n    upsertByAssignment(wageChunk, assignment) {\n        const matchingAssignment = new Assignment(this.data).rawFind(\n            assignment\n        );\n        if (!matchingAssignment) {\n            throw new Error(\n                `Could not find assignment matching ${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n        return this.upsert({\n            ...wageChunk,\n            assignment_id: matchingAssignment.id,\n        });\n    }\n    /**\n     * Sets the list of wage chunks associated with a given assignment to `wageChunks`.\n     * Any wage chunks omitted from the list are deleted.\n     *\n     * @param {*} wageChunks\n     * @param {*} assignment\n     * @returns\n     * @memberof WageChunk\n     */\n    setAllByAssignment(wageChunks, assignment) {\n        const matchingAssignment = this.rawFind(assignment);\n        if (!matchingAssignment) {\n            throw new Error(\n                `Could not find assignment matching ${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n        const existingWageChunks = this.findAllByAssignment(assignment);\n        // every wage chunk that is not in the `wageChunks` list gets deleted\n        for (const wageChunk of existingWageChunks) {\n            if (!find(wageChunk, wageChunks)) {\n                this.delete(wageChunk);\n            }\n        }\n        // Now we can upsert all the wageChunks\n        wageChunks.forEach((chunk) =>\n            this.upsertByAssignment(chunk, matchingAssignment)\n        );\n        // Recompute the wage chunks list. This is \"needless\"\n        // logically, but it might catch some bugs at some point.\n        return this.findAllByAssignment(matchingAssignment);\n    }\n}\n\nexport const wageChunkRoutes = {\n    get: {},\n    post: {\n        \"/wage_chunks\": documentCallback({\n            func: (data, params, body) => new WageChunk(data).upsert(body),\n            posts: docApiPropTypes.wageChunk,\n            summary: \"Upsert a wage_chunk\",\n            returns: docApiPropTypes.wageChunk,\n        }),\n        \"/wage_chunks/delete\": documentCallback({\n            func: (data, params, body) => new WageChunk(data).delete(body),\n            posts: docApiPropTypes.wageChunk,\n            summary: \"Delete a wage_chunk. Must have a valid id specified.\",\n            returns: docApiPropTypes.wageChunk,\n        }),\n    },\n};\n","import {\n    getAttributesCheckMessage,\n    MockAPIController,\n    findAllById,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { Session } from \"./sessions\";\n\nexport class Application extends MockAPIController {\n    constructor(data) {\n        super(data, data.applications);\n    }\n    validateNew(applicant) {\n        const message = getAttributesCheckMessage(applicant, this.ownData, {\n            session_id: { required: true },\n            applicant_id: { required: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).find(session);\n        if (!matchingSession) {\n            throw new Error(\n                `Cannot find applicant by session because session ${JSON.stringify(\n                    session\n                )} cannot be found`\n            );\n        }\n        // The applicants for this session are those who have submitted an application for this session\n        return findAllById([matchingSession.id], this.ownData, \"session_id\");\n    }\n}\n\nexport const applicationsRoutes = {\n    get: {\n        \"/sessions/:session_id/applications\": documentCallback({\n            func: (data, params) =>\n                new Application(data).findAllBySession(params.session_id),\n            summary: \"Get all applications associated with the given session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.application),\n        }),\n    },\n    post: {\n        \"/applications\": documentCallback({\n            func: (data, params, body) => new Application(data).upsert(body),\n            summary: \"Upsert an application\",\n            posts: docApiPropTypes.application,\n            returns: docApiPropTypes.application,\n        }),\n    },\n};\n","import {\n    getAttributesCheckMessage,\n    findAllById,\n    MockAPIController,\n} from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { Session } from \"./sessions\";\nimport { Application } from \"./applications\";\nimport { Assignment } from \"./assignments\";\n\nexport class Applicant extends MockAPIController {\n    constructor(data) {\n        super(data, data.applicants);\n    }\n    validateNew(applicant) {\n        const message = getAttributesCheckMessage(applicant, this.ownData, {\n            utorid: { required: true, unique: true },\n            first_name: { required: true },\n            last_name: { required: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).find(session);\n        if (!matchingSession) {\n            throw new Error(\n                `Cannot find applicant by session because session ${JSON.stringify(\n                    session\n                )} cannot be found`\n            );\n        }\n        // The applicants for this session are those who have submitted an\n        // application for this session or those who have an assignment in this\n        // session.\n        const applications = new Application(this.data).findAllBySession(\n            matchingSession\n        );\n        const assignments = new Assignment(this.data).findAllBySession(\n            matchingSession\n        );\n        // Get a unique list of applicant ids\n        const applicantIds = Array.from(\n            new Set(\n                applications\n                    .map((x) => x.applicant_id)\n                    .concat(assignments.map((x) => x.applicant_id))\n            )\n        );\n        return findAllById(applicantIds, this.ownData);\n    }\n}\n\nexport const applicantsRoutes = {\n    get: {\n        \"/sessions/:session_id/applicants\": documentCallback({\n            func: (data, params) =>\n                new Applicant(data).findAllBySession(params.session_id),\n            summary: \"Get all applicants associated with the given session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.applicant),\n        }),\n        \"/applicants\": documentCallback({\n            func: (data) => new Applicant(data).findAll(),\n            summary: \"Get all applicants\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.applicant),\n        }),\n        \"/applicants/:applicant_id\": documentCallback({\n            func: (data, params) =>\n                new Applicant(data).find(params.applicant_id),\n            summary: \"Get an applicant\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.applicant),\n        }),\n    },\n    post: {\n        \"/applicants\": documentCallback({\n            func: (data, params, body) => new Applicant(data).upsert(body),\n            summary: \"Upsert an applicant\",\n            posts: docApiPropTypes.applicant,\n            returns: docApiPropTypes.applicant,\n        }),\n    },\n};\n","import {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport {\n    getAttributesCheckMessage,\n    findAllById,\n    sum,\n    splitDateRangeAtNewYear,\n    MockAPIController,\n    wageChunkArrayToStartAndEndDates,\n    formatInstructorsContact,\n    wageChunkArrayToPayPeriodDescription,\n} from \"./utils\";\nimport { Session } from \"./sessions\";\nimport { Position } from \"./positions\";\nimport { WageChunk } from \"./wage_chunks\";\nimport { Applicant } from \"./applicants\";\n\nexport class Assignment extends MockAPIController {\n    constructor(data) {\n        super(data, data.assignments);\n    }\n    validateNew(assignment) {\n        // No uniqueness required, so pass in an empty array ([]) to the verifier\n        const message = getAttributesCheckMessage(assignment, [], {\n            position_id: { required: true },\n            applicant_id: { required: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    findAllBySession(session) {\n        const matchingSession = new Session(this.data).rawFind(session);\n        return findAllById(\n            this.data.assignments_by_session[matchingSession.id] || [],\n            this.ownData\n            // Call \"find\" again to make sure every item gets packaged appropriately\n        ).map((x) => new Assignment(this.data).find(x));\n    }\n    getPosition(assignment) {\n        return new Position(this.data).find({\n            id: assignment.position_id,\n        });\n    }\n    getApplicant(assignment) {\n        return new Applicant(this.data).find({\n            id: assignment.applicant_id,\n        });\n    }\n    /**\n     * Grabs a bunch of data from the wage chunks related to an assignment\n     *\n     * @param {string} assignment\n     * @returnType {{hours: number, wage_chunks: object[]}}\n     */\n    getWageChunkInfo(assignment) {\n        const wageChunks = new WageChunk(this.data).findAllByAssignment(\n            assignment\n        );\n        const hours = sum(...wageChunks.map((x) => x.hours));\n        return { hours, wageChunks };\n    }\n    /**\n     * Grab the active offer for an assignment\n     *\n     * @param {number} matchingAssignment.id\n     * @param {object} this.data\n     * @returns {({}|null)} - an offer object or `undefined`\n     */\n    getActiveOffer(assignment) {\n        return new ActiveOffer(this.data).findByAssignment(assignment);\n    }\n    /**\n     * Pieces together all the details of an assignment from the mockAPI data\n     *\n     * @param {object} matchingAssignment - an assignment\n     * @returns\n     */\n    find(assignment) {\n        const matchingAssignment = this.rawFind(assignment);\n        if (!matchingAssignment) {\n            return matchingAssignment;\n        }\n        const ret = { ...matchingAssignment };\n        // compute the hours from wage chunks\n        const { hours } = this.getWageChunkInfo(matchingAssignment);\n        Object.assign(ret, { hours });\n        // compute offer_status\n        const activeOffer = this.getActiveOffer(matchingAssignment);\n        if (activeOffer) {\n            Object.assign(ret, { active_offer_status: activeOffer.status });\n        }\n        return ret;\n    }\n    upsert(assignment) {\n        // Call `find` to make sure the `hours` field is computed\n        const upsertedAssignment = this.find(super.upsert(assignment));\n\n        // Make sure the assignment is in the assignments_by_session list\n        const session_id = new Position(this.data).findAssociatedSession(\n            upsertedAssignment.position_id\n        );\n        if (session_id) {\n            this.data.assignments_by_session[session_id].push(\n                upsertedAssignment.id\n            );\n        }\n\n        // If `hours` is passed into the assignment, we need to modify the wage chunks\n        // associated with the assignment (but only if the hours differ).\n        if (\n            assignment.hours == null ||\n            +upsertedAssignment.hours === +assignment.hours\n        ) {\n            return upsertedAssignment;\n        }\n\n        let wageChunks = new WageChunk(this.data).findAllByAssignment(\n            upsertedAssignment\n        );\n        // If there are no wage chunks, we need to create some\n        if (wageChunks.length === 0) {\n            const dateRanges = splitDateRangeAtNewYear(\n                upsertedAssignment.start_date,\n                upsertedAssignment.end_date\n            );\n            // create the wage chunks with zero hours, because it will be updated soon\n            for (const range of dateRanges) {\n                new WageChunk(this.data).upsertByAssignment(\n                    {\n                        hours: 0,\n                        start_date: range.start_date,\n                        end_date: range.end_date,\n                    },\n                    upsertedAssignment\n                );\n            }\n        }\n\n        // Now we are gauranteed to have wage chunks, so set them to the correct number\n        // of hours\n        wageChunks = new WageChunk(this.data).findAllByAssignment(\n            upsertedAssignment\n        );\n        const delta =\n            +assignment.hours - +(this.find(upsertedAssignment).hours || 0);\n        const perChunkDelta = delta / wageChunks.length;\n        for (const chunk of wageChunks) {\n            new WageChunk(this.data).upsert({\n                ...chunk,\n                hours: (chunk.hours || 0) + perChunkDelta,\n            });\n        }\n\n        // Find the assignment again, to make sure all computed fields are properly computed\n        return this.find(upsertedAssignment);\n    }\n}\n\nclass ActiveOffer extends MockAPIController {\n    constructor(data) {\n        super(data, data.offers);\n    }\n    findByAssignment(assignment) {\n        const matchingAssignment = this._ensureAssignment(assignment);\n\n        // offers are never deleted, only added to the table, so\n        // picking the last one is the same as picking the \"newest\"\n        const offers = findAllById(\n            [matchingAssignment.id],\n            this.data.offers,\n            \"assignment_id\"\n        );\n        const activeOffer = offers[offers.length - 1];\n        if (!activeOffer) {\n            return null;\n        }\n        // an offer is only active if it has been accepted, rejected, or is pending\n        if (\n            activeOffer.status === \"accepted\" ||\n            activeOffer.status === \"rejected\" ||\n            activeOffer.status === \"pending\" ||\n            activeOffer.status === \"provisional\"\n        ) {\n            return activeOffer;\n        }\n        return null;\n    }\n    _ensureAssignment(assignment) {\n        const matchingAssignment = new Assignment(this.data).rawFind(\n            assignment\n        );\n        if (!matchingAssignment) {\n            throw new Error(\n                `Could not find assignment matching ${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n        return matchingAssignment;\n    }\n    getAssignment(offer) {\n        return new Assignment(this.data).find({\n            id: offer.assignment_id,\n        });\n    }\n    find(query) {\n        // This is where the magic happens. We create all the data needed for the offer here.\n        const baseOffer = this.rawFind(query);\n        const assignment = this.getAssignment(baseOffer);\n        const { hours, wageChunks } = new Assignment(\n            this.data\n        ).getWageChunkInfo(assignment);\n        const position = new Assignment(this.data).getPosition(assignment);\n        const applicant = new Assignment(this.data).getApplicant(assignment);\n        const instructors = new Position(this.data).getInstructors(position);\n        const contractTemplate = new Position(this.data).getContractTemplate(\n            position\n        );\n\n        const { start_date, end_date } = wageChunkArrayToStartAndEndDates(\n            wageChunks\n        );\n\n        const offer = {\n            accepted_date: null,\n            rejected_date: null,\n            withdrawn_date: null,\n            signature: \"\",\n            nag_count: 0,\n            // All mutable fields should come before `baseOffer` is destructured.\n            // Fields that come after are computed and cannot be directly set.\n            ...baseOffer,\n            contract_template: contractTemplate.template_file,\n            contract_override_pdf: assignment.contract_override_pdf,\n            first_name: applicant.first_name,\n            last_name: applicant.last_name,\n            email: applicant.email,\n            position_code: position.position_code,\n            position_title: position.position_title,\n            position_start_date: start_date,\n            position_end_date: end_date,\n            first_time_ta: null,\n            instructor_contact_desc: formatInstructorsContact(instructors),\n            pay_period_desc: wageChunkArrayToPayPeriodDescription(wageChunks),\n            hours,\n            ta_coordinator_name: \"Dr. Coordinator\",\n            ta_coordinator_email: \"coordinator@utoronto.ca\",\n        };\n\n        return offer;\n    }\n    withdrawByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        return this.find(\n            this.upsert({\n                ...offer,\n                status: \"withdrawn\",\n                withdrawn_date: new Date().toISOString(),\n            })\n        );\n    }\n    rejectByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        return this.find(\n            this.upsert({\n                ...offer,\n                status: \"rejected\",\n                rejected_date: new Date().toISOString(),\n            })\n        );\n    }\n    acceptByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        return this.find(\n            this.upsert({\n                ...offer,\n                status: \"accepted\",\n                accepted_date: new Date().toISOString(),\n            })\n        );\n    }\n    emailByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        return this.find(\n            this.upsert({\n                ...offer,\n                status: \"pending\",\n                emailed_date: new Date().toISOString(),\n            })\n        );\n    }\n    nagByAssignment(assignment) {\n        const offer = this.findByAssignment(this._ensureAssignment(assignment));\n        if (!offer.emailed_date) {\n            throw new Error(\n                `The active offer for assignment with id=${assignment.id} has not been emailed yet, so a nag email cannot be sent`\n            );\n        }\n        return this.find(\n            this.upsert({\n                ...offer,\n                nag_count: (offer.nag_count || 0) + 1,\n            })\n        );\n    }\n    createByAssignment(assignment) {\n        const matchingAssignment = this._ensureAssignment(assignment);\n        const offer = this.findByAssignment(matchingAssignment);\n        if (offer) {\n            throw new Error(\n                `An offer already exists for assignment=${JSON.stringify(\n                    assignment\n                )}`\n            );\n        }\n\n        return this.upsert(\n            this.find(\n                this.create({\n                    assignment_id: matchingAssignment.id,\n                    status: \"provisional\",\n                })\n            )\n        );\n    }\n}\n\nexport const assignmentsRoutes = {\n    get: {\n        \"/sessions/:session_id/assignments\": documentCallback({\n            func: (data, params) =>\n                new Assignment(data).findAllBySession(params.session_id),\n            summary: \"Get assignments associated with a session\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.assignment),\n        }),\n        \"/assignments/:assignment_id\": documentCallback({\n            func: (data, params) =>\n                new Assignment(data).find(params.assignment_id),\n            summary: \"Get an assignment\",\n            returns: docApiPropTypes.assignment,\n        }),\n        \"/assignments/:assignment_id/active_offer\": documentCallback({\n            func: (data, params) =>\n                new Assignment(data).getActiveOffer(params.assignment_id),\n            summary: \"Get the active offer associated with an assignment\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/wage_chunks\": documentCallback({\n            func: (data, params) =>\n                new Assignment(data).getWageChunkInfo(params.assignment_id)\n                    .wageChunks,\n            summary: \"Get the wage_chunks associated with an assignment\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.wageChunk),\n        }),\n    },\n    post: {\n        \"/assignments\": documentCallback({\n            func: (data, params, body) => new Assignment(data).upsert(body),\n            posts: docApiPropTypes.assignment,\n            summary: \"Upsert an assignment\",\n            returns: docApiPropTypes.assignment,\n        }),\n        \"/assignments/:assignment_id/wage_chunks\": documentCallback({\n            func: (data, params, body) => {\n                return new WageChunk(data).setAllByAssignment(\n                    body,\n                    params.assignment_id\n                );\n            },\n            summary:\n                \"Sets the wage chunks of an assignment to the specified list. The contents of the list are upserted. Omitted wage chunks are deleted.\",\n            posts: wrappedPropTypes.arrayOf(docApiPropTypes.wageChunk),\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.wageChunk),\n        }),\n        \"/assignments/:assignment_id/active_offer/withdraw\": documentCallback({\n            func: (data, params) =>\n                new ActiveOffer(data).withdrawByAssignment(\n                    params.assignment_id\n                ),\n            summary: \"Withdraws the active offer for the specified assignment\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/active_offer/reject\": documentCallback({\n            func: (data, params) =>\n                new ActiveOffer(data).rejectByAssignment(params.assignment_id),\n            summary: \"Rejects the active offer for the specified assignment\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/active_offer/accept\": documentCallback({\n            func: (data, params) =>\n                new ActiveOffer(data).acceptByAssignment(params.assignment_id),\n            summary: \"Accepts the active offer for the specified assignment\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/active_offer/create\": documentCallback({\n            func: (data, params) =>\n                new ActiveOffer(data).createByAssignment(params.assignment_id),\n            summary:\n                \"Creates an offer for the specified assignment, provided there are no active offers for this assignment.\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/active_offer/email\": documentCallback({\n            func: (data, params) =>\n                new ActiveOffer(data).emailByAssignment(params.assignment_id),\n            summary: \"Emails the active offer for the specified assignment\",\n            returns: docApiPropTypes.offer,\n        }),\n        \"/assignments/:assignment_id/active_offer/nag\": documentCallback({\n            func: (data, params) =>\n                new ActiveOffer(data).nagByAssignment(params.assignment_id),\n            summary:\n                \"Sends a nag email for the active offer for the specified assignment which has already been emailed once\",\n            returns: docApiPropTypes.offer,\n        }),\n    },\n};\n","import { MockAPIController, find, getAttributesCheckMessage } from \"./utils\";\nimport {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\n\nexport class User extends MockAPIController {\n    constructor(data) {\n        super(data, data.users);\n    }\n    validateNew(user) {\n        const message = getAttributesCheckMessage(user, this.ownData, {\n            utorid: { required: true, unique: true },\n        });\n        if (message) {\n            throw new Error(message);\n        }\n    }\n    rawFind(query) {\n        if (query == null) {\n            return null;\n        }\n        // If we pass an `id`, rely on that, otherwise,\n        // use the `utorid`.\n        if (query.id != null) {\n            return find(query, this.ownData);\n        }\n        if (query.utorid != null) {\n            return find(query, this.ownData, \"utorid\");\n        }\n        return find({ utorid: query }, this.ownData, \"utorid\");\n    }\n    setActiveUser(user) {\n        const matchingUser = this.find(user);\n        if (!matchingUser) {\n            throw new Error(\n                `Cannot find user ${JSON.stringify(user)} to set as active`\n            );\n        }\n        this.data.active_user = matchingUser.utorid;\n    }\n    getActiveUser() {\n        return this.find(this.data.active_user);\n    }\n}\n\nexport const activeUserRoutes = {\n    get: {\n        \"/users\": documentCallback({\n            func: (data) => new User(data).findAll(),\n            summary: \"Get all available users.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n        }),\n        \"/active_user\": documentCallback({\n            func: (data) => new User(data).getActiveUser(),\n            summary: \"Gets the currently active user.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n            roles: [\"instructor\", \"ta\"],\n        }),\n    },\n    post: {\n        \"/users\": documentCallback({\n            func: (data, params, body) => new User(data).upsert(body),\n            summary: \"Upserts user info\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n            posts: docApiPropTypes.user,\n        }),\n    },\n};\n","import {\n    documentCallback,\n    wrappedPropTypes,\n    docApiPropTypes,\n} from \"../defs/doc-generation\";\nimport { User } from \"./active_user\";\n\n// persistent storage for the Debug class\nconst storage = {};\n\nexport class Debug {\n    constructor(data) {\n        this.data = data;\n    }\n    getAllData() {\n        return this.data;\n    }\n    makeSnapshot(name = \"snapshot\") {\n        storage[name] = JSON.stringify(this.getAllData());\n        return this.getAllData();\n    }\n    clearData() {\n        this.makeSnapshot(\"beforeclear\");\n        Object.keys(this.data).forEach(\n            (key) => (this.data[key] = createBlankCopy(this.data[key]))\n        );\n        return this.getAllData();\n    }\n    restoreSnapshot(name = \"snapshot\") {\n        const snapshot = JSON.parse(storage[name] || \"{}\");\n        this.clearData();\n        Object.assign(this.data, snapshot);\n        return this.getAllData();\n    }\n}\n\nexport const debugRoutes = {\n    get: {\n        \"/debug/active_user\": documentCallback({\n            func: (data) => new User(data).getActiveUser(),\n            summary:\n                \"Gets the active user; in debug mode this is specified by posting to `active_user`.\",\n            returns: docApiPropTypes.user,\n        }),\n        \"/debug/users\": documentCallback({\n            func: (data) => new User(data).findAll(),\n            summary: \"Get a list of all users\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n        }),\n    },\n    post: {\n        \"/debug/active_user\": documentCallback({\n            func: (data, params, body) => {\n                const user = new User(data);\n                const found_user = user.find(body);\n                if (!found_user) {\n                    throw new Error(\n                        `Could not find user matching ${JSON.stringify(body)}`\n                    );\n                }\n                user.setActiveUser(found_user);\n                return user.getActiveUser();\n            },\n            summary:\n                \"Sets the active user; this will override whatever credentials are passed to the server.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n            posts: docApiPropTypes.user,\n        }),\n        \"/debug/users\": documentCallback({\n            func: (data, params, body) => new User(data).upsert(body),\n            summary:\n                \"Adds a user; this is done without any permission checks, so it can be used to bootstrap permissions during debug.\",\n            returns: wrappedPropTypes.arrayOf(docApiPropTypes.user),\n            posts: docApiPropTypes.user,\n        }),\n        \"/debug/clear_data\": documentCallback({\n            func: (data) => {\n                return new Debug(data).clearData();\n            },\n            summary: \"Deletes all data in the database\",\n        }),\n        \"/debug/snapshot\": documentCallback({\n            func: (data) => {\n                return new Debug(data).makeSnapshot();\n            },\n            summary: \"Makes a snapshot of the current state of the database\",\n        }),\n        \"/debug/restore_snapshot\": documentCallback({\n            func: (data) => {\n                return new Debug(data).restoreSnapshot();\n            },\n            summary: \"Restores the last snapshot of the database\",\n        }),\n    },\n};\n\n/**\n * Returns the blank value of the same type\n * as the passed-in data\n *\n * @param {*} data\n * @returns\n */\nfunction createBlankCopy(data) {\n    if (typeof data === \"object\") {\n        if (data instanceof Array) {\n            return [];\n        } else {\n            return {};\n        }\n    } else if (typeof data === \"string\") {\n        return \"\";\n    } else {\n        // If `data` is not of type string, array or object\n        // use the constructor, which will return blank value\n        // of that particular type.\n        return data.constructor();\n    }\n}\n","import Route from \"route-parser\";\nimport { mockData } from \"./data\";\nimport { sessionsRoutes } from \"./sessions\";\nimport { templatesRoutes } from \"./contract_templates\";\nimport { positionsRoutes } from \"./positions\";\nimport { instructorsRoutes } from \"./instructors\";\nimport { documentCallback } from \"../defs/doc-generation\";\nimport { assignmentsRoutes } from \"./assignments\";\nimport { applicantsRoutes } from \"./applicants\";\nimport { applicationsRoutes } from \"./applications\";\nimport { wageChunkRoutes } from \"./wage_chunks\";\nimport { debugRoutes } from \"./debug\";\nimport { activeUserRoutes, User } from \"./active_user\";\n\n/**\n * Mock API server that runs locally; useuful for demo purposes.\n *\n * @module\n */\n\nexport class MockAPI {\n    routePrefix = \"/api/v1\";\n    // a list of selectors for each route\n    getRoutes = Object.assign(\n        {},\n        sessionsRoutes.get,\n        templatesRoutes.get,\n        positionsRoutes.get,\n        instructorsRoutes.get,\n        assignmentsRoutes.get,\n        applicantsRoutes.get,\n        applicationsRoutes.get,\n        wageChunkRoutes.get,\n        debugRoutes.get,\n        activeUserRoutes.get,\n        {\n            \"/all_data\": documentCallback({\n                func: (data) => data,\n                exclude: true,\n            }),\n        }\n    );\n    postRoutes = Object.assign(\n        {},\n        sessionsRoutes.post,\n        templatesRoutes.post,\n        positionsRoutes.post,\n        instructorsRoutes.post,\n        assignmentsRoutes.post,\n        applicantsRoutes.post,\n        applicationsRoutes.post,\n        wageChunkRoutes.post,\n        debugRoutes.post,\n        activeUserRoutes.post\n    );\n\n    constructor(seedData) {\n        this.active = false;\n        this.data = seedData;\n        this._getRoutesParsers = Object.keys(this.getRoutes).map((routeStr) => {\n            // We want to peel of the role from the start of the route, but we don't want\n            // to consider it part of the route for documentation purposes. Since `routeStr`\n            // is used to find the callback of the route, we hack `Route` so that `spec`\n            // is the same as `routeStr`.\n            const r = new Route(\"(/:role)\" + routeStr);\n            r.spec = routeStr;\n            return r;\n        });\n        this._postRoutesParsers = Object.keys(this.postRoutes).map(\n            (routeStr) => {\n                // We want to peel of the role from the start of the route, but we don't want\n                // to consider it part of the route for documentation purposes. Since `routeStr`\n                // is used to find the callback of the route, we hack `Route` so that `spec`\n                // is the same as `routeStr`.\n                const r = new Route(\"(/:role)\" + routeStr);\n                r.spec = routeStr;\n                return r;\n            }\n        );\n    }\n\n    /**\n     * Make a mock `apiGET` call. Always returns an object of\n     * the form\n     * `{status: ..., message: ..., payload: ...}`\n     * This method is bound, so it is safe to pass this function around.\n     *\n     * @memberof MockAPI\n     * @param {string} url An API route without `/api/v1` (e.g., `/sessions`)\n     */\n    apiGET = (url) => {\n        for (const route of this._getRoutesParsers) {\n            const match = route.match(url);\n            // if we have a match, run the selector with the parsed data\n            if (match) {\n                try {\n                    this.authenticateActiveUserBasedOnRole(match.role);\n                    const payload = this.getRoutes[route.spec](\n                        this.data,\n                        match\n                    );\n\n                    return {\n                        status: \"success\",\n                        message: \"\",\n                        payload,\n                    };\n                } catch (e) {\n                    return { status: \"error\", message: e.toString() };\n                }\n            }\n        }\n        return {\n            status: \"error\",\n            message: `could not find route matching ${url}`,\n        };\n    };\n\n    /**\n     * Make a mock `apiPOST` call. Always returns an object of\n     * the form\n     * `{status: ..., message: ..., payload: ...}`\n     * This method is bound, so it is safe to pass this function around.\n     *\n     * @memberof MockAPI\n     * @param {string} url An API route without `/api/v1` (e.g., `/sessions`)\n     * @param {object} body The body of a post request. This should be an object, *not* a JSON string.\n     */\n    apiPOST = (url, body) => {\n        for (const route of this._postRoutesParsers) {\n            const match = route.match(url);\n            // if we have a match, run the selector with the parsed data\n            if (match) {\n                try {\n                    this.authenticateActiveUserBasedOnRole(match.role);\n                    const payload = this.postRoutes[route.spec](\n                        this.data,\n                        match,\n                        body\n                    );\n                    return {\n                        status: \"success\",\n                        message: \"\",\n                        payload,\n                    };\n                } catch (e) {\n                    return { status: \"error\", message: e.toString() };\n                }\n            }\n        }\n        return {\n            status: \"error\",\n            message: `could not find route matching ${url}`,\n        };\n    };\n\n    /**\n     * Authenticates the `active_user` as having the role `role`.\n     * If the user is not authenticated, an error is thrown.\n     *\n     * @param {string} role\n     * @returns\n     * @memberof MockAPI\n     */\n    authenticateActiveUserBasedOnRole(role) {\n        if (role == null) {\n            return;\n        }\n        const active_user = new User(this.data).getActiveUser();\n        if (active_user == null) {\n            return;\n        }\n        if (!active_user.roles.includes(role)) {\n            throw new Error(\n                `Not authenticated for accessing routes with prefix /${role}`\n            );\n        }\n    }\n\n    /**\n     * Replaces the global `window.fetch` object with calls to `apiGET` and\n     * `apiPOST`. This means that true network requests will no longer\n     * work.\n     *\n     * @param {number} [delay=1000]\n     * @memberof MockAPI\n     */\n    replaceGlobalFetch(delay = 1000) {\n        if (this.active) {\n            return;\n        }\n        this.active = true;\n        this._origFetch = fetch;\n        window.fetch = async (url, init = {}) => {\n            // Parse the URL first. We only want the pathname\n            const parsedURL = new URL(url, \"http://dummy.com\");\n            url = parsedURL.pathname;\n            // Make sure the url doesn't start with \"/api/v1\"\n            url = url.startsWith(this.routePrefix)\n                ? url.replace(this.routePrefix, \"\")\n                : url;\n            let mockResponse;\n            if (init.method === \"GET\") {\n                mockResponse = this.apiGET(url);\n            } else {\n                let body = init.body;\n                if (typeof body === \"string\") {\n                    body = JSON.parse(body);\n                }\n                mockResponse = this.apiPOST(url, body);\n            }\n            // eslint-disable-next-line\n            console.log(\n                `MockAPI ${init.method} Request.`,\n                url,\n                init,\n                \"Reponding with\",\n                mockResponse\n            );\n            // Create a `Response` object to return so that we fully immitate\n            // the `fetch` api.\n            const responseObj = new Response(\n                new Blob([JSON.stringify(mockResponse)], {\n                    type: \"application/json\",\n                }),\n                { status: 200, statusText: \"OK\" }\n            );\n            return new Promise((resolve) => {\n                window.setTimeout(() => resolve(responseObj), delay);\n            });\n        };\n    }\n\n    /**\n     * Restore the global `window.fetch` to what the browser provides.\n     * If `window.fetch` has not been overridden, this function does nothing.\n     *\n     * @memberof MockAPI\n     */\n    restoreGlobalFetch() {\n        this.active = false;\n        window.fetch = this._origFetch || fetch;\n    }\n}\n\nconst mockAPI = new MockAPI(mockData);\nexport { mockAPI, mockData };\n","/**\n * Tools for generating documentation\n */\n\nimport PropTypes from \"prop-types\";\nimport RouteParser from \"route-parser\";\nimport { generatePropTypes } from \"./prop-types\";\n\nclass CallAtom {\n    constructor(prop, args) {\n        this.name = prop;\n        this.args = args;\n    }\n    toString() {\n        if (this.args == null) {\n            return \"\" + this.name;\n        }\n        return \"\" + this.name + \"(\" + this.args.join(\", \") + \")\";\n    }\n}\nfunction createCallChain(chain = [], prop, args) {\n    return chain.concat([new CallAtom(prop, args)]);\n}\n/**\n * A proxy to wrap `PropTypes` so that the call chain can be recorded.\n * For example, `PropTypes.bool.isRequired` would have the added method `.callChain`\n * which would return an array of `CallAtom` objects consisting of `bool` and `isRequired`.\n * This can be used to generate documentation from existing proptype definitions.\n *\n * @param {*} obj\n * @param {*} [callChain=[]]\n * @returns\n */\nfunction propTypesProxy(obj, callChain = []) {\n    const handler = {\n        get(obj, prop, receiver) {\n            if (prop === \"callChain\") {\n                return callChain;\n            } else if (prop === \"toJSON\") {\n                return () => callChain;\n            }\n            const ret = Reflect.get(obj, prop, receiver);\n            if (ret instanceof Object) {\n                return propTypesProxy(ret, createCallChain(callChain, prop));\n            }\n            return ret;\n        },\n        apply(obj, thisArg, args) {\n            const lastProp = callChain.pop() || { name: \"<root>\" };\n            const ret = Reflect.apply(obj, thisArg, args);\n            if (ret instanceof Object) {\n                return propTypesProxy(\n                    ret,\n                    createCallChain(callChain, lastProp.name, args)\n                );\n            }\n            return ret;\n        },\n        ownKeys(obj) {\n            return [...Reflect.ownKeys(obj), \"callChain\", \"toJSON\"];\n        },\n    };\n\n    return new Proxy(obj, handler);\n}\nconst wrappedPropTypes = propTypesProxy(PropTypes);\n/**\n * PropType defintions for the API that have been wrapped in\n * a proxy so they can be convereted into documentation.\n */\nconst docApiPropTypes = generatePropTypes(wrappedPropTypes);\n\nconst PROPTYPES_TO_SWAGGER_TYPES = {\n    string: \"string\",\n    number: \"number\",\n    bool: \"boolean\",\n    object: \"object\",\n    array: \"array\",\n    any: {},\n};\n\nfunction wrappedPropTypesToSwagger(pt) {\n    const ret = {};\n    if (!pt.callChain) {\n        // eslint-disable-next-line\n        console.warn(\n            \"Attempting to compute swagger values for non-wrapped object\",\n            pt\n        );\n    } else {\n        // We are a proxied PropTypes object\n        //\n        // PropTypes calls can be at most two long with the second argument\n        // being `.isRequired`\n        const [type, isRequired] = pt.callChain;\n        const requiredList = [];\n        if (isRequired) {\n            ret[\"required\"] = true;\n        }\n        if (type.args) {\n            // in this case, we were a PropTypes function called with some arguments\n            switch (type.name) {\n                case \"shape\":\n                    // in this case we're passing in an object with properties to be validated\n                    ret[\"type\"] = \"object\";\n                    ret[\"properties\"] = {};\n                    for (const [key, val] of Object.entries(type.args[0])) {\n                        const swaggerVal = wrappedPropTypesToSwagger(val);\n                        if (swaggerVal[\"required\"]) {\n                            // Required properties in swagger must be listed up-front (i.e., as a list\n                            // of property names, not as an attribute of an individual property),\n                            // so hoist them.\n                            requiredList.push(key);\n                            delete swaggerVal[\"required\"];\n                        }\n                        ret[\"properties\"][key] = swaggerVal;\n                    }\n                    if (requiredList.length > 0) {\n                        ret[\"required\"] = requiredList;\n                    }\n                    break;\n                case \"arrayOf\":\n                    ret[\"type\"] = \"array\";\n                    ret[\"items\"] = wrappedPropTypesToSwagger(type.args[0]);\n                    break;\n                case \"oneOf\":\n                    // XXX assuming `oneOf` is only used for strings\n                    ret[\"type\"] = \"string\";\n                    ret[\"enum\"] = type.args[0];\n                    break;\n                case \"oneOfType\":\n                    ret[\"oneOf\"] = type.args[0].map(wrappedPropTypesToSwagger);\n                    break;\n                default:\n                    break;\n            }\n        } else {\n            if (PROPTYPES_TO_SWAGGER_TYPES[type.name]) {\n                // in this case, we're a basic swagger type\n                ret[\"type\"] = PROPTYPES_TO_SWAGGER_TYPES[type.name];\n            }\n        }\n    }\n\n    return ret;\n}\n\n/**\n * Wrap `payload` in a standard API response formatted\n * for openapi\n *\n * @param {object} payload\n * @returns {object}\n */\nfunction wrapInStandardApiResponseForSwagger(payload = { type: \"object\" }) {\n    return {\n        type: \"object\",\n        properties: {\n            status: {\n                type: \"string\",\n                enum: [\"success\", \"error\"],\n            },\n            message: { type: \"string\" },\n            payload,\n        },\n        required: [\"status\"],\n    };\n}\n\n/**\n * Take a path template in `\"route-parser\"`\n * form, e.g. `/sessions/:session_id`, and encode it for\n * consumption by swagger, e.g., `/sessions/{session_id}`.\n *\n * @param {string} url\n * @returns {string}\n */\nfunction urlTemplateToSwagger(url) {\n    // get the template variables\n    // using a trick: have the RoutePasers\n    // parse it's own template, giving us\n    // a list of variables in the process\n    const parsed = RouteParser(url);\n    const templateVars = Object.keys(parsed.match(parsed.spec));\n    const subs = {};\n    for (const templateVar of templateVars) {\n        subs[templateVar] = \"{\" + templateVar + \"}\";\n    }\n    return { url: decodeURI(parsed.reverse(subs)), templateVars };\n}\n\n/**\n * Convert the `docs` attribute from a callback that\n * has been documented with `documentCallback` into an openapi\n * object.\n *\n * @param {object} docs\n * @param {string[]} [templateVars=[]] - list of template variables in the route\n * @returns {object} - openapi object\n */\nfunction documentedCallbackToSwagger(docs, templateVars = []) {\n    const ret = { responses: { default: {} } };\n    if (!docs) {\n        return ret;\n    }\n    // Routes are all prefixed. `admin` can access all routes.\n    // other routes are restricted depending on the list specified in `roles`.\n    const prefixRoles = [\"admin\", ...(docs.roles || [])];\n    ret.summary =\n        `(prefixes: ${prefixRoles.map((x) => \"/\" + x).join(\", \")}) ` +\n        docs.summary;\n    // If there are templateVars, they should become `paramters`\n    if (templateVars.length > 0) {\n        ret.parameters = templateVars.map((x) => ({\n            name: x,\n            in: \"path\",\n            description: x,\n            required: true,\n        }));\n    }\n    // `docs.returns` holds information about what the route will return\n    if (docs.returns) {\n        ret.responses.default = {\n            content: {\n                \"application/json\": {\n                    schema: wrapInStandardApiResponseForSwagger(\n                        wrappedPropTypesToSwagger(docs.returns)\n                    ),\n                },\n            },\n        };\n    }\n    // `docs.posts` holds information about what you can put in the\n    // requestBody\n    if (docs.posts) {\n        ret.requestBody = {\n            content: {\n                \"application/json\": {\n                    schema: wrappedPropTypesToSwagger(docs.posts),\n                },\n            },\n        };\n    }\n\n    return ret;\n}\n\n/**\n * Turn mockAPI routes into swagger-ui JSON object\n *\n * @param {{getRoutes: object, postRoutes: object}} [mockAPI={}]\n * @returns {object} - openapi configuration\n */\nfunction mockApiRoutesAsSwaggerPaths(mockAPI = {}) {\n    const { getRoutes = {}, postRoutes = {} } = mockAPI;\n    const ret = {};\n    for (const [path, val] of Object.entries(getRoutes)) {\n        const { url: templatePath, templateVars } = urlTemplateToSwagger(path);\n        if (val.docs && val.docs.exclude) {\n            continue;\n        }\n        ret[templatePath] = Object.assign(ret[templatePath] || {}, {\n            get: documentedCallbackToSwagger(val.docs, templateVars),\n        });\n    }\n    for (const [path, val] of Object.entries(postRoutes)) {\n        const { url: templatePath, templateVars } = urlTemplateToSwagger(path);\n        if (val.docs && val.docs.exclude) {\n            continue;\n        }\n        ret[templatePath] = Object.assign(ret[templatePath] || {}, {\n            post: documentedCallbackToSwagger(val.docs, templateVars),\n        });\n    }\n\n    // The initial segment of each route is a \"tag\"; get a unique\n    // list of each of these tags and then for annotating the routes\n    const tags = Array.from(\n        new Set(\n            Object.keys(ret)\n                .map((x) => x.split(\"/\")[1])\n                .filter((x) => x)\n        )\n    );\n    // If a route contains one of the \"tags\", then it should be annotated\n    // accordingly (with each relavent tag)\n    for (const [path, info] of Object.entries(ret)) {\n        const applicableTags = tags.filter((x) => path.includes(x));\n        if (info.get && applicableTags.length > 0) {\n            info.get.tags = applicableTags;\n        }\n        if (info.post && applicableTags.length > 0) {\n            info.post.tags = applicableTags;\n        }\n    }\n\n    // Alphabetize the routes so they display in a sensible order.\n    const sortedRet = {};\n    for (const path of Object.keys(ret).sort()) {\n        sortedRet[path] = ret[path];\n    }\n\n    return sortedRet;\n}\n\n/**\n * Document a function with attributes for autogenerating openapi\n * specifications from.\n *\n * @param {*} { func, exclude = false, ...attrs }\n * @returns\n */\nfunction documentCallback({ func, exclude = false, ...attrs }) {\n    // create a wrapped function that we can stuff attributes onto\n    const ret = (...args) => func(...args);\n    ret.docs = {\n        exclude,\n        ...attrs,\n    };\n    return ret;\n}\n\nexport {\n    wrappedPropTypes,\n    wrappedPropTypesToSwagger,\n    urlTemplateToSwagger,\n    mockApiRoutesAsSwaggerPaths,\n    documentCallback,\n    docApiPropTypes,\n};\n","import { error } from \"react-notification-system-redux\";\n\n// these properties are for `react-notification-system-redux`\nconst defaultNotifProps = {\n    position: \"tr\",\n    autoDismiss: 10,\n    title: \"Error\",\n};\n\nexport const fetchError = (payload) =>\n    error({\n        ...defaultNotifProps,\n        title: \"Error fetching data\",\n        message: payload,\n    });\n\nexport const upsertError = (payload) =>\n    error({\n        ...defaultNotifProps,\n        title: \"Error updating/inserting data\",\n        message: payload,\n    });\n\nexport const deleteError = (payload) =>\n    error({\n        ...defaultNotifProps,\n        title: \"Error deleting data\",\n        message: payload,\n    });\n\n// General error for when a more specific error\n// type is not known\nexport const apiError = (payload) =>\n    error({\n        ...defaultNotifProps,\n        title: \"API Error\",\n        message: payload,\n    });\n","import { API_INTERACTION_START, API_INTERACTION_END } from \"../constants\";\n\n// actions\nexport const apiInteractionStart = (id, message) => ({\n    type: API_INTERACTION_START,\n    payload: { id, message },\n});\nexport const apiInteractionEnd = (id) => ({\n    type: API_INTERACTION_END,\n    payload: { id },\n});\n","export const API_INTERACTION_START = \"API_INTERACTION_START\";\nexport const API_INTERACTION_END = \"API_INTERACTION_END\";\n\n/* Constants were batch-created with the following code:\n\n    let wrap = x => x.map(y => `export const ${y} = \"${y}\";`);\n    console.log(\n        [\n            \"session\",\n            \"instructor\",\n            \"position\",\n            \"assignment\",\n            \"offer\",\n            \"contract_template\",\n            \"application\",\n            \"wage_chunk\"\n        ]\n            .map(x => {\n                x = x.toUpperCase();\n                return [`// \\`${x.toLowerCase()}\\`-related constants`]\n                    .concat(\n                        wrap([\n                            `FETCH_${x}S_SUCCESS`,\n                            `FETCH_ONE_${x}_SUCCESS`,\n                            `UPSERT_ONE_${x}_SUCCESS`,\n                            `DELETE_ONE_${x}_SUCCESS`\n                        ])\n                    )\n                    .join(\"\\n\");\n            })\n            .join(\"\\n\\n\")\n    );\n*/\n\n// `session`-related constants\nexport const FETCH_SESSIONS_SUCCESS = \"FETCH_SESSIONS_SUCCESS\";\nexport const FETCH_ONE_SESSION_SUCCESS = \"FETCH_ONE_SESSION_SUCCESS\";\nexport const UPSERT_ONE_SESSION_SUCCESS = \"UPSERT_ONE_SESSION_SUCCESS\";\nexport const DELETE_ONE_SESSION_SUCCESS = \"DELETE_ONE_SESSION_SUCCESS\";\nexport const SET_ACTIVE_SESSION = \"SET_ACTIVE_SESSION\";\n\n// `instructor`-related constants\nexport const FETCH_INSTRUCTORS_SUCCESS = \"FETCH_INSTRUCTORS_SUCCESS\";\nexport const FETCH_ONE_INSTRUCTOR_SUCCESS = \"FETCH_ONE_INSTRUCTOR_SUCCESS\";\nexport const UPSERT_ONE_INSTRUCTOR_SUCCESS = \"UPSERT_ONE_INSTRUCTOR_SUCCESS\";\nexport const DELETE_ONE_INSTRUCTOR_SUCCESS = \"DELETE_ONE_INSTRUCTOR_SUCCESS\";\nexport const ADD_INSTRUCTOR_TO_POSITION_SUCCESS =\n    \"ADD_INSTRUCTOR_TO_POSITION_SUCCESS\";\n\n// `position`-related constants\nexport const FETCH_POSITIONS_SUCCESS = \"FETCH_POSITIONS_SUCCESS\";\nexport const FETCH_ONE_POSITION_SUCCESS = \"FETCH_ONE_POSITION_SUCCESS\";\nexport const UPSERT_POSITIONS_SUCCESS = \"UPSERT_POSITIONS_SUCCESS\";\nexport const UPSERT_ONE_POSITION_SUCCESS = \"UPSERT_ONE_POSITION_SUCCESS\";\nexport const DELETE_ONE_POSITION_SUCCESS = \"DELETE_ONE_POSITION_SUCCESS\";\n\n// `assignment`-related constants\nexport const FETCH_ASSIGNMENTS_SUCCESS = \"FETCH_ASSIGNMENTS_SUCCESS\";\nexport const FETCH_ONE_ASSIGNMENT_SUCCESS = \"FETCH_ONE_ASSIGNMENT_SUCCESS\";\nexport const UPSERT_ONE_ASSIGNMENT_SUCCESS = \"UPSERT_ONE_ASSIGNMENT_SUCCESS\";\nexport const DELETE_ONE_ASSIGNMENT_SUCCESS = \"DELETE_ONE_ASSIGNMENT_SUCCESS\";\n\n// `offer`-related constants\nexport const FETCH_OFFERS_SUCCESS = \"FETCH_OFFERS_SUCCESS\";\nexport const FETCH_ONE_OFFER_SUCCESS = \"FETCH_ONE_OFFER_SUCCESS\";\nexport const UPSERT_ONE_OFFER_SUCCESS = \"UPSERT_ONE_OFFER_SUCCESS\";\nexport const DELETE_ONE_OFFER_SUCCESS = \"DELETE_ONE_OFFER_SUCCESS\";\nexport const SET_OFFER_ACCEPTED_SUCCESS = \"SET_OFFER_ACCEPTED_SUCCESS\";\nexport const SET_OFFER_REJECTED_SUCCESS = \"SET_OFFER_REJECTED_SUCCESS\";\nexport const OFFER_CREATE_SUCCESS = \"OFFER_CREATE_SUCCESS\";\nexport const OFFER_EMAIL_SUCCESS = \"OFFER_EMAIL_SUCCESS\";\nexport const OFFER_NAG_SUCCESS = \"OFFER_NAG_SUCCESS\";\nexport const OFFER_WITHDRAW_SUCCESS = \"OFFER_WITHDRAW_SUCCESS\";\n\n// `contract_template`-related constants\nexport const FETCH_CONTRACT_TEMPLATES_SUCCESS =\n    \"FETCH_CONTRACT_TEMPLATES_SUCCESS\";\nexport const FETCH_ONE_CONTRACT_TEMPLATE_SUCCESS =\n    \"FETCH_ONE_CONTRACT_TEMPLATE_SUCCESS\";\nexport const UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS =\n    \"UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS\";\nexport const DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS =\n    \"DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS\";\nexport const FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS =\n    \"FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS\";\n\n// `application`-related constants\nexport const FETCH_APPLICATIONS_SUCCESS = \"FETCH_APPLICATIONS_SUCCESS\";\nexport const FETCH_ONE_APPLICATION_SUCCESS = \"FETCH_ONE_APPLICATION_SUCCESS\";\nexport const UPSERT_ONE_APPLICATION_SUCCESS = \"UPSERT_ONE_APPLICATION_SUCCESS\";\nexport const DELETE_ONE_APPLICATION_SUCCESS = \"DELETE_ONE_APPLICATION_SUCCESS\";\n\n// `wage_chunk`-related constants\nexport const FETCH_WAGE_CHUNKS_SUCCESS = \"FETCH_WAGE_CHUNKS_SUCCESS\";\nexport const FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS =\n    \"FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS\";\nexport const UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS =\n    \"UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS\";\nexport const FETCH_ONE_WAGE_CHUNK_SUCCESS = \"FETCH_ONE_WAGE_CHUNK_SUCCESS\";\nexport const UPSERT_ONE_WAGE_CHUNK_SUCCESS = \"UPSERT_ONE_WAGE_CHUNK_SUCCESS\";\nexport const DELETE_ONE_WAGE_CHUNK_SUCCESS = \"DELETE_ONE_WAGE_CHUNK_SUCCESS\";\n\n// `applicant`-related constants\nexport const FETCH_APPLICANTS_SUCCESS = \"FETCH_APPLICANTS_SUCCESS\";\nexport const FETCH_ONE_APPLICANT_SUCCESS = \"FETCH_ONE_APPLICANT_SUCCESS\";\nexport const UPSERT_ONE_APPLICANT_SUCCESS = \"UPSERT_ONE_APPLICANT_SUCCESS\";\nexport const DELETE_ONE_APPLICANT_SUCCESS = \"DELETE_ONE_APPLICANT_SUCCESS\";\nexport const ADD_APPLICANT_TO_SESSION_SUCCESS =\n    \"ADD_APPLICANT_TO_SESSION_SUCCESS\";\n\n// `user`/`active_user` constants\nexport const FETCH_ACTIVE_USER_SUCCESS = \"FETCH_ACTIVE_USER_SUCCESS\";\nexport const SET_ACTIVE_USER_ROLE_SUCCESS = \"SET_ACTIVE_USER_ROLE_SUCCESS\";\nexport const FETCH_USERS_SUCCESS = \"FETCH_USERS_SUCCESS\";\nexport const UPSERT_USERS_SUCCESS = \"UPSERT_USERS_SUCCESS\";\n\n// `debug` constants\nexport const DEBUG_SET_ACTIVE_USER_SUCCESS = \"DEBUG_SET_ACTIVE_USER_SUCCESS\";\n\n// global constants\nexport const SET_GLOBALS = \"SET_GLOBALS\";\n","import uuid from \"uuid-random\";\nimport PropTypes from \"prop-types\";\nimport { apiError } from \"./errors\";\nimport { apiInteractionStart, apiInteractionEnd } from \"./status\";\n\n/**\n * Turn an array of items into a hash of items indexed\n * by the value of `indexBy`\n *\n * @export\n * @param {array} l\n * @param {string} [indexBy=\"id\"]\n * @returns {object[]}\n */\nexport function arrayToHash(l, indexBy = \"id\") {\n    if (!Array.isArray(l)) {\n        return l;\n    }\n    const ret = {};\n    for (const d of l) {\n        ret[d[indexBy]] = d;\n    }\n    return ret;\n}\n\n/**\n * Creates an action function that returns an object of the form\n * ```\n *    {\n *        type: TYPE,\n *        payload: payload\n *    }\n * ```\n * This factory function can be used if your action is of this standard form.\n *\n * @export\n * @param {string} type\n * @returns {function(object): {type: string, payload: object}}\n */\nexport function actionFactory(type) {\n    return (payload) => ({\n        type,\n        payload,\n    });\n}\n\n/**\n * Split an object into two objects. One with only properties listed in\n * `props` and the other with all remaining properties.\n *\n * @param {*} obj - object to be split\n * @param {*} [props=[]] - list of properties to split out\n * @returns {[object, object]} list of two objects. The first contains all properties not listed in `props`. The second contains all properties listed in `props`\n */\nexport function splitObjByProps(obj, props = []) {\n    const ret = {},\n        filtered = {};\n    for (const prop of props) {\n        if (Object.hasOwnProperty.call(obj, prop)) {\n            filtered[prop] = obj[prop];\n        }\n    }\n    for (const prop in obj) {\n        if (!Object.hasOwnProperty.call(filtered, prop)) {\n            ret[prop] = obj[prop];\n        }\n    }\n    return [ret, filtered];\n}\n\n/**\n * Create a function that takes an `obj` object. It effectively does\n * `obj[outPropName] = obj[inPropName].id; delete obj[inPropName]` but\n * is non-destructive.\n *\n * @export\n * @param {string} inPropName\n * @param {string} outPropName\n * @param {boolean} [isArrayOfIds=false]\n * @returns\n */\nexport function flattenIdFactory(\n    inPropName,\n    outPropName,\n    isArrayOfIds = false\n) {\n    return function (obj) {\n        // if the `inPropName` field doesn't exist, don't change anything\n        // and don't error!\n        if (obj[inPropName] == null) {\n            return obj;\n        }\n        const [ret, filtered] = splitObjByProps(obj, [inPropName]);\n        if (isArrayOfIds) {\n            ret[outPropName] = filtered[inPropName].map((x) => x.id);\n        } else {\n            ret[outPropName] = filtered[inPropName].id;\n        }\n        return ret;\n    };\n}\n/**\n * Create a dispatcher that validates `payload` accoring to the specified\n * `propTypes`. If validation fails, a warning will be printed to the console\n * and exectution of the dispatcher will stop. This function also wraps the\n * dispatch in `apiInteractionStart` and `apiInteractionEnd` actions.\n *\n * If the action only accepts one argument, then `propTypes` should be a single\n * `PropTypes` object (e.g., `{id: PropTypes.any.isRequired}`). If the action\n * accepts multiple arguments, `propTypes` should be an array (of length the number\n * of accepted arguments) of `PropTypes` objects.\n *\n * @export\n * @param {object} obj An object with information to create an action\n * @param {function} obj.dispatcher The action that will be dispatched after validation passes\n * @param {string} obj.name The name of the action\n * @param {string} obj.description A description of what the action does\n * @param {?(PropTypes|PropTypes[])} obj.propTypes A PropTypes object or an array of PropTypes objects\n * @param {?(function|boolean)} obj.onErrorDispatch Function that returns an action to be executed on error, or boolean `true` to autogenerate an error action\n * @returns {function} A redux-thunk action\n */\nexport function validatedApiDispatcher({\n    dispatcher,\n    // eslint-disable-next-line react/forbid-foreign-prop-types\n    propTypes,\n    name,\n    description,\n    onErrorDispatch,\n}) {\n    return (...args) => {\n        // we return a new dispatcher that performs some validation\n        // and then dispatches as usual\n        return async (dispatch) => {\n            // validate `args`. `args` is an array containing the arguments.\n            // if propTypes is an array, it lists the propTypes for every argument,\n            // otherwise there is just one argument.\n\n            let wasPropTypesError = false;\n            // This function performs the actual PropType check with extra arguments that\n            // will make the warnings in the console more descriptive\n            function propTypeCheck(propTypes, arg) {\n                PropTypes.checkPropTypes(\n                    propTypes,\n                    arg || {},\n                    \"api action argument\",\n                    name,\n                    () => {\n                        wasPropTypesError = true;\n                    }\n                );\n            }\n            if (Array.isArray(propTypes)) {\n                if (propTypes.length !== args.length) {\n                    wasPropTypesError = true;\n                } else {\n                    for (let i = 0; i < propTypes.length; i++) {\n                        propTypeCheck(propTypes[i], args[i]);\n                    }\n                }\n            } else if (propTypes) {\n                propTypeCheck(propTypes, args[0]);\n            }\n            if (wasPropTypesError) {\n                dispatch(\n                    apiError(\n                        `Invalid arguments to ${name} while attempting action \"${description}\"`\n                    )\n                );\n                return;\n            }\n\n            // Declare the start of an API interaction. Generate a `statusId`\n            // so that we can specify which API interaction is ending (since multiple\n            // ones may be going at the same time).\n            const statusId = uuid();\n            dispatch(apiInteractionStart(statusId, description));\n            try {\n                // We need to await so that promise errors get thrown\n                // as real errors\n                await dispatch(dispatcher(...args));\n            } catch (e) {\n                if (onErrorDispatch) {\n                    if (onErrorDispatch instanceof Function) {\n                        dispatch(onErrorDispatch(e));\n                    } else {\n                        dispatch(\n                            apiError(\n                                `Error encountered during \"${description}\"`\n                            )\n                        );\n                    }\n                } else {\n                    throw e;\n                }\n            } finally {\n                // Always declare the API interaction done, even\n                // if there was an error somewhere along the way.\n                dispatch(apiInteractionEnd(statusId));\n            }\n        };\n    };\n}\n","/*\n * A collection of untilty functions for interfacing with the API\n */\n\nconst API_URL = \"/api/v1\";\nconst FETCH_INIT = {\n    credentials: \"same-origin\",\n    headers: {\n        \"Content-Type\": \"application/json\",\n    },\n};\n\n/**\n * Error thrown whenever an api call returns with `status===\"error\"`\n *\n * @class ApiError\n * @extends {Error}\n */\nclass ApiError extends Error {\n    constructor(resp) {\n        const errorMessage = resp.message;\n        super(errorMessage);\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ApiFetchError);\n        }\n        this.response = resp;\n        this.status = resp.status;\n    }\n}\n\n/**\n * Error thrown whenever an api fetch request\n * returns with a status other than 200\n *\n * @class ApiFetchError\n * @extends {ApiError}\n */\nclass ApiFetchError extends ApiError {\n    constructor(resp, path) {\n        const errorMessage = `Got status ${resp.status} ${\n            resp.statusText\n        } when fetching ${API_URL + path}`;\n        super({ message: errorMessage });\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, ApiFetchError);\n        }\n        this.response = resp;\n        this.status = resp.status;\n    }\n}\n\n// Ensure that `path` starts with a `/`\nfunction _ensurePath(path) {\n    return path.startsWith(\"/\") ? path : \"/\" + path;\n}\n\n// Process a `fetch` response from the API.\n// Successful responses from the API should be of\n// the form `{status: (\"success\"|\"error\"), message: \"...\", payload: ...}.\n// Throw an error on a failed HTTP request or a `status !== \"success\"`\n// response from the API.\nasync function _processFetchResponse(resp, path) {\n    if (resp.status === 200) {\n        const json = await resp.json();\n        if (json.status !== \"success\") {\n            // If we got random JSON instead of {status: ..., message: ..., payload: ...}\n            // There will be no `json.message`. Provide a default message that will get\n            // overridden in this case\n            throw new ApiError({\n                message: \"Server response did not have `status === 'success`\",\n                ...json,\n            });\n        }\n        return json.payload;\n    }\n    // if we made it this far, there was a bad status\n    // returned during fetch\n    throw new ApiFetchError(resp, path);\n}\n\n/**\n * Do a GET requestion on the specified api route\n *\n * @param {string} path\n * @returns {Promise<object>} Promise containing the processed JSON response\n * @throws {(ApiError|ApiFetchError|Error)} Throws an error if the fetch fails or returns with `status===\"error\"`\n */\nasync function apiGET(path) {\n    // remove a leading \"/\" if there is one in `path`\n    path = _ensurePath(path);\n    const resp = await fetch(API_URL + path, {\n        ...FETCH_INIT,\n        method: \"GET\",\n    });\n    return await _processFetchResponse(resp, path);\n}\n\n/**\n * Do a POST requestion on the specified api route\n *\n * @param {string} path\n * @param {object} [body={}]\n * @returns {Promise<object>} Promise containing the processed JSON response\n * @throws {(ApiError|ApiFetchError|Error)} Throws an error if the fetch fails or returns with `status===\"error\"`\n */\nasync function apiPOST(path, body = {}) {\n    // remove a leading \"/\" if there is one in `path`\n    path = _ensurePath(path);\n    const resp = await fetch(API_URL + path, {\n        ...FETCH_INIT,\n        method: \"POST\",\n        body: JSON.stringify(body),\n    });\n    return await _processFetchResponse(resp, path);\n}\n\nexport { API_URL, ApiError, ApiFetchError, apiGET, apiPOST };\n","/*\n * A set of utility functions to help with creating reducers\n */\n\nimport { combineReducers as _origCombineReducers } from \"redux\";\nimport { createReducer as _origCreateReducer } from \"redux-create-reducer\";\n\n/**\n * Either updates the item `modelData`\n * with id == newItem.id, or appends it.\n *\n * @param {object} modelData\n * @param {object} newItem\n * @returns {object} An updated version of modelData\n */\nexport function upsertItem(modelData, newItem) {\n    let didUpdate = false;\n    const newModelData = modelData.map((item) => {\n        if (item.id === newItem.id) {\n            didUpdate = 1;\n            return newItem;\n        }\n        return item;\n    });\n    if (!didUpdate) {\n        newModelData.push(newItem);\n    }\n    return newModelData;\n}\n\n/**\n * Create a basic reducer for the operations\n *   FETCH_MANY\n *   FETCH_ONE\n *   UPSERT_ONE\n *   DELETE_ONE\n * A basic reducer assumes that `state._modelData` is\n * an array and that each item in that array has an `id`\n * that can be used to determine upserts and deletes, etc..\n *\n * @param {string} FETCH_MANY\n * @param {string} FETCH_ONE\n * @param {string} UPSERT_ONE\n * @param {string} DELETE_ONE\n * @returns {object} An object of reducers suitable for passing to `createReducer`\n */\nexport function createBasicReducerObject(\n    FETCH_MANY,\n    FETCH_ONE,\n    UPSERT_ONE,\n    DELETE_ONE\n) {\n    return {\n        [FETCH_MANY]: (state, action) => ({\n            ...state,\n            _modelData: action.payload,\n        }),\n        [FETCH_ONE]: (state, action) => ({\n            ...state,\n            _modelData: upsertItem(state._modelData, action.payload),\n        }),\n        [UPSERT_ONE]: (state, action) => ({\n            ...state,\n            _modelData: upsertItem(state._modelData, action.payload),\n        }),\n        [DELETE_ONE]: (state, action) => {\n            const deletedItem = action.payload;\n            return {\n                ...state,\n                _modelData: state._modelData.filter(\n                    (item) => item.id !== deletedItem.id\n                ),\n            };\n        },\n    };\n}\n\n/**\n * Wraps \"redux-create-reducer\"'s version of `createReducer` to add\n * a `_storePath` attribute to the initial state and the reducer.\n * `_storePath` is used by `localStoreSelector` to return the local\n * state when passed in the global state. (For example, if\n *    `state = { a: b: localState }`, then `localStoreSelector(state) === localState`.)\n *\n * @param {object} initialState\n * @param {object} handlers\n * @returns\n */\nexport function createReducer(initialState, handlers) {\n    const path = [];\n    function pushToPath(dir) {\n        path.unshift(dir);\n    }\n    // Every isolated state should have a unique id, so generate\n    // a random one.\n    const _storePath = { id: Math.random(), path, pushToPath };\n\n    // add _storePath to the initial state and to the\n    // new reducer\n    initialState._storePath = _storePath;\n    const reducer = _origCreateReducer(initialState, handlers);\n    reducer._storePath = _storePath;\n\n    // For convenience, attach a local store selector to the reducer\n    reducer._localStoreSelector = createLocalStoreSelector(_storePath);\n\n    return reducer;\n}\n\n/**\n * Search `state` for a local state in the location of `_storePath.path`.\n * For example, if `_storePath.path = [\"a\", \"b\"]`, this function will\n * return `state.a.b`.\n *\n * @param {object} state Redux state\n * @param {object} _storePath The `_storePath` object to use for searching `state`\n * @returns\n */\nfunction _localStoreSelector(state, _storePath) {\n    if (state._storePath && state._storePath.id === _storePath.id) {\n        return state;\n    }\n    try {\n        let localState = state;\n        for (const dir of _storePath.path) {\n            localState = localState[dir];\n        }\n        return localState;\n    } catch (e) {\n        // eslint-disable-next-line\n        console.error(\n            \"Searching\",\n            state,\n            \"for local state with path\",\n            _storePath.join(\".\"),\n            \"but encountered an error\"\n        );\n    }\n    return state;\n}\n\n/**\n * Create a selector that, when passed in the global redux state, will search\n * and return a local state based on the information in `_storePath`. This selector\n * can be passed either the local state or the global state. If it is passed the local\n * state, it checks that the `state._storePath.id` field matches `_storePath.id`;\n * if so, this selector immediately returns `state`. Otherwise, use `_storePath.path`\n * to search for the local state. For example, if `_storePath.path = [\"a\", \"b\"]`,\n * the returned selector will return `state.a.b`.\n *\n * @export\n * @param {object} _storePath\n * @param {array} _storePath.path The path to search in the redux state\n * @param {array} _storePath.id The unique id of the local state\n * @returns {Function} A selector that returns the local state (based on `_storePath`) when passed the global state\n */\nexport function createLocalStoreSelector(_storePath) {\n    return (state) => _localStoreSelector(state, _storePath);\n}\n\n/**\n * Wraps \"redux\"'s `combineReducers` function so that `reducer._storePath.pushToPath`\n * is called on all child reducers.\n *\n * Redux's `combineReducers` function creates a new reducer from `model` that dispatches\n * actions to all reducers listed in `model`, but passes them an isolated part of the\n * store instead of passing in the full redux store as `state`. This is great for writing\n * reducers, but it makes things complicated for writing selectors, since, in general,\n * a selector will get passed the whole state, not the isolated part of the state that\n * `combineReducers` supplies. This wrapped version of `combineReducers` adds to a `path`\n * variable that is present in each reducer and which can be passed to a smart selector.\n *\n * @export\n * @param {object} model An object whose values are reducers\n * @returns {Function} A reducer\n */\nexport function combineReducers(model) {\n    const pushToPathCallbacks = [];\n    // recursively call all `pushToPath` functions.\n    // They have been stored in `pushToPathCallbacks`\n    function pushToPath(dir) {\n        for (const func of pushToPathCallbacks) {\n            func(dir);\n        }\n    }\n\n    for (const [dir, reducer] of Object.entries(model)) {\n        if (reducer._storePath) {\n            reducer._storePath.pushToPath(dir);\n            pushToPathCallbacks.push(reducer._storePath.pushToPath);\n        }\n    }\n\n    const newReducer = _origCombineReducers(model);\n    newReducer._storePath = { pushToPath };\n\n    return newReducer;\n}\n","import {\n    FETCH_SESSIONS_SUCCESS,\n    FETCH_ONE_SESSION_SUCCESS,\n    UPSERT_ONE_SESSION_SUCCESS,\n    DELETE_ONE_SESSION_SUCCESS,\n    SET_ACTIVE_SESSION,\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n    activeSession: null,\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_SESSIONS_SUCCESS,\n    FETCH_ONE_SESSION_SUCCESS,\n    UPSERT_ONE_SESSION_SUCCESS,\n    DELETE_ONE_SESSION_SUCCESS\n);\n\nexport const sessionsReducer = createReducer(initialState, {\n    ...basicReducers,\n    [SET_ACTIVE_SESSION]: (state, action) => ({\n        ...state,\n        activeSession: action.payload,\n    }),\n});\n","import {\n    FETCH_USERS_SUCCESS,\n    FETCH_ACTIVE_USER_SUCCESS,\n    SET_ACTIVE_USER_ROLE_SUCCESS,\n} from \"../constants\";\nimport { createReducer } from \"./utils\";\n\nconst initialState = {\n    users: [],\n    active_user: {},\n    active_role: \"admin\",\n};\n\nexport const usersReducer = createReducer(initialState, {\n    [FETCH_ACTIVE_USER_SUCCESS]: (state, action) => ({\n        ...state,\n        active_user: action.payload,\n    }),\n    [FETCH_USERS_SUCCESS]: (state, action) => ({\n        ...state,\n        users: action.payload,\n    }),\n    [SET_ACTIVE_USER_ROLE_SUCCESS]: (state, action) => ({\n        ...state,\n        active_role: action.payload,\n    }),\n});\n","import {\n    FETCH_APPLICANTS_SUCCESS,\n    FETCH_ONE_APPLICANT_SUCCESS,\n    UPSERT_ONE_APPLICANT_SUCCESS,\n    DELETE_ONE_APPLICANT_SUCCESS,\n    ADD_APPLICANT_TO_SESSION_SUCCESS,\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_APPLICANTS_SUCCESS,\n    FETCH_ONE_APPLICANT_SUCCESS,\n    UPSERT_ONE_APPLICANT_SUCCESS,\n    DELETE_ONE_APPLICANT_SUCCESS\n);\n\n/**\n * Produces an array that is the union of `target` and `source`.\n *\n * @param {object[]} target\n * @param {object[]} source\n */\nfunction insertIfMissing(target, source) {\n    const missingItems = [];\n    for (let item of target) {\n        if (!source.some((x) => x.id === item.id)) {\n            // the current item is new\n            missingItems.push(item);\n        }\n    }\n    if (missingItems.length > 0) {\n        return target.concat(missingItems);\n    }\n    return target;\n}\n\nexport const applicantsReducer = createReducer(initialState, {\n    ...basicReducers,\n    [ADD_APPLICANT_TO_SESSION_SUCCESS]: (state, action) => ({\n        ...state,\n        _modelData: insertIfMissing(state._modelData, action.payload),\n    }),\n});\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_APPLICANTS_SUCCESS,\n    FETCH_ONE_APPLICANT_SUCCESS,\n    UPSERT_ONE_APPLICANT_SUCCESS,\n    DELETE_ONE_APPLICANT_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { applicantsReducer } from \"../reducers/applicants\";\nimport { createSelector } from \"reselect\";\nimport { activeRoleSelector } from \"./users\";\n\n// actions\nconst fetchApplicantsSuccess = actionFactory(FETCH_APPLICANTS_SUCCESS);\nconst fetchOneApplicantSuccess = actionFactory(FETCH_ONE_APPLICANT_SUCCESS);\nconst upsertOneApplicantSuccess = actionFactory(UPSERT_ONE_APPLICANT_SUCCESS);\nconst deleteOneApplicantSuccess = actionFactory(DELETE_ONE_APPLICANT_SUCCESS);\n\n// dispatchers\nexport const fetchApplicants = validatedApiDispatcher({\n    name: \"fetchApplicants\",\n    description: \"Fetch applicants\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        // When we fetch applicants, we only want the applicants associated with the current session\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/applicants`\n        );\n        dispatch(fetchApplicantsSuccess(data));\n    },\n});\n\nexport const fetchApplicant = validatedApiDispatcher({\n    name: \"fetchApplicant\",\n    description: \"Fetch applicant\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/applicants/${payload.id}`);\n        dispatch(fetchOneApplicantSuccess(data));\n    },\n});\n\nexport const upsertApplicant = validatedApiDispatcher({\n    name: \"upsertApplicant\",\n    description: \"Add/insert applicant\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/applicants`, payload);\n        dispatch(upsertOneApplicantSuccess(data));\n    },\n});\n\nexport const deleteApplicant = validatedApiDispatcher({\n    name: \"deleteApplicant\",\n    description: \"Delete applicant\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/applicants/delete`,\n            payload\n        );\n        dispatch(deleteOneApplicantSuccess(data));\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = applicantsReducer._localStoreSelector;\nexport const applicantsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData\n);\n","import {\n    FETCH_APPLICATIONS_SUCCESS,\n    FETCH_ONE_APPLICATION_SUCCESS,\n    UPSERT_ONE_APPLICATION_SUCCESS,\n    DELETE_ONE_APPLICATION_SUCCESS,\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_APPLICATIONS_SUCCESS,\n    FETCH_ONE_APPLICATION_SUCCESS,\n    UPSERT_ONE_APPLICATION_SUCCESS,\n    DELETE_ONE_APPLICATION_SUCCESS\n);\n\nexport const applicationsReducer = createReducer(initialState, basicReducers);\n","import {\n    FETCH_POSITIONS_SUCCESS,\n    FETCH_ONE_POSITION_SUCCESS,\n    UPSERT_ONE_POSITION_SUCCESS,\n    DELETE_ONE_POSITION_SUCCESS,\n    ADD_INSTRUCTOR_TO_POSITION_SUCCESS,\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_POSITIONS_SUCCESS,\n    FETCH_ONE_POSITION_SUCCESS,\n    UPSERT_ONE_POSITION_SUCCESS,\n    DELETE_ONE_POSITION_SUCCESS\n);\n\nexport const positionsReducer = createReducer(initialState, {\n    ...basicReducers,\n    [ADD_INSTRUCTOR_TO_POSITION_SUCCESS]: (state, action) => {\n        const positionId = action.payload.position.id;\n        const instructors = action.payload.instructors;\n\n        // update the instructors list, but only if we're in the\n        // right position\n        function updateInstructors(position) {\n            if (position.id !== positionId) {\n                return position;\n            }\n            return {\n                ...position,\n                instructors: instructors,\n            };\n        }\n\n        return {\n            ...state,\n            _modelData: state._modelData.map(updateInstructors),\n        };\n    },\n});\n","import {\n    FETCH_INSTRUCTORS_SUCCESS,\n    FETCH_ONE_INSTRUCTOR_SUCCESS,\n    UPSERT_ONE_INSTRUCTOR_SUCCESS,\n    DELETE_ONE_INSTRUCTOR_SUCCESS,\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_INSTRUCTORS_SUCCESS,\n    FETCH_ONE_INSTRUCTOR_SUCCESS,\n    UPSERT_ONE_INSTRUCTOR_SUCCESS,\n    DELETE_ONE_INSTRUCTOR_SUCCESS\n);\n\nexport const instructorsReducer = createReducer(initialState, basicReducers);\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_INSTRUCTORS_SUCCESS,\n    FETCH_ONE_INSTRUCTOR_SUCCESS,\n    UPSERT_ONE_INSTRUCTOR_SUCCESS,\n    DELETE_ONE_INSTRUCTOR_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { instructorsReducer } from \"../reducers/instructors\";\nimport { createSelector } from \"reselect\";\nimport { activeRoleSelector } from \"./users\";\n\n// actions\nconst fetchInstructorsSuccess = actionFactory(FETCH_INSTRUCTORS_SUCCESS);\nconst fetchOneInstructorSuccess = actionFactory(FETCH_ONE_INSTRUCTOR_SUCCESS);\nconst upsertOneInstructorSuccess = actionFactory(UPSERT_ONE_INSTRUCTOR_SUCCESS);\nconst deleteOneInstructorSuccess = actionFactory(DELETE_ONE_INSTRUCTOR_SUCCESS);\n\n// dispatchers\nexport const fetchInstructors = validatedApiDispatcher({\n    name: \"fetchInstructors\",\n    description: \"Fetch instructors\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/instructors`);\n        dispatch(fetchInstructorsSuccess(data));\n    },\n});\n\nexport const fetchInstructor = validatedApiDispatcher({\n    name: \"fetchInstructor\",\n    description: \"Fetch instructor\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/instructors/${payload.id}`);\n        dispatch(fetchOneInstructorSuccess(data));\n    },\n});\n\nexport const upsertInstructor = validatedApiDispatcher({\n    name: \"upsertInstructor\",\n    description: \"Add/insert instructor\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/instructors`, payload);\n        dispatch(upsertOneInstructorSuccess(data));\n    },\n});\n\nexport const deleteInstructor = validatedApiDispatcher({\n    name: \"deleteInstructor\",\n    description: \"Delete instructor\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/instructors/delete`, payload);\n        dispatch(deleteOneInstructorSuccess(data));\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = instructorsReducer._localStoreSelector;\nexport const instructorsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData\n);\n","import {\n    FETCH_CONTRACT_TEMPLATES_SUCCESS,\n    FETCH_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS,\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n    all: [],\n};\n\n// basicReducers is an object whose keys are FETCH_*_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_CONTRACT_TEMPLATES_SUCCESS,\n    FETCH_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS\n);\n\nexport const contractTemplatesReducer = createReducer(initialState, {\n    ...basicReducers,\n    [FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS]: (state, action) => ({\n        ...state,\n        all: action.payload,\n    }),\n});\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_CONTRACT_TEMPLATES_SUCCESS,\n    UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS,\n    FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { contractTemplatesReducer } from \"../reducers/contract_templates\";\nimport { createSelector } from \"reselect\";\nimport { activeRoleSelector } from \"./users\";\n\n// actions\nconst fetchContractTemplatesSuccess = actionFactory(\n    FETCH_CONTRACT_TEMPLATES_SUCCESS\n);\nconst fetchAllContractTemplatesSuccess = actionFactory(\n    FETCH_ALL_CONTRACT_TEMPLATES_SUCCESS\n);\nconst upsertOneContractTemplateSuccess = actionFactory(\n    UPSERT_ONE_CONTRACT_TEMPLATE_SUCCESS\n);\nconst deleteOneContractTemplateSuccess = actionFactory(\n    DELETE_ONE_CONTRACT_TEMPLATE_SUCCESS\n);\n\n// dispatchers\nexport const fetchContractTemplates = validatedApiDispatcher({\n    name: \"fetchContractTemplates\",\n    description: \"Fetch contract_templates\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/contract_templates`\n        );\n        dispatch(fetchContractTemplatesSuccess(data));\n    },\n});\n\nexport const upsertContractTemplate = validatedApiDispatcher({\n    name: \"upsertContractTemplate\",\n    description: \"Add/insert contract_template\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/contract_templates`,\n            payload\n        );\n        dispatch(upsertOneContractTemplateSuccess(data));\n    },\n});\n\nexport const deleteContractTemplate = validatedApiDispatcher({\n    name: \"deleteContractTemplate\",\n    description: \"Delete contract_template from a session\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/contract_templates/delete`,\n            payload\n        );\n        dispatch(deleteOneContractTemplateSuccess(data));\n    },\n});\n\nexport const fetchAllContractTemplates = validatedApiDispatcher({\n    name: \"fetchAllContractTemplates\",\n    description: \"Fetch all available contract_templates\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/available_contract_templates`);\n        dispatch(fetchAllContractTemplatesSuccess(data));\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = contractTemplatesReducer._localStoreSelector;\nexport const contractTemplatesSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData\n);\nexport const allContractTemplatesSelector = createSelector(\n    localStoreSelector,\n    (state) => state.all\n);\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_POSITIONS_SUCCESS,\n    FETCH_ONE_POSITION_SUCCESS,\n    UPSERT_ONE_POSITION_SUCCESS,\n    DELETE_ONE_POSITION_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    validatedApiDispatcher,\n    arrayToHash,\n    flattenIdFactory,\n    splitObjByProps,\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { positionsReducer } from \"../reducers/positions\";\nimport { createSelector } from \"reselect\";\nimport { instructorsSelector } from \"./instructors\";\nimport { contractTemplatesSelector } from \"./contract_templates\";\nimport { activeRoleSelector } from \"./users\";\nimport { applicantsSelector } from \"./applicants\";\n\n// actions\nconst fetchPositionsSuccess = actionFactory(FETCH_POSITIONS_SUCCESS);\nconst fetchOnePositionSuccess = actionFactory(FETCH_ONE_POSITION_SUCCESS);\nconst upsertOnePositionSuccess = actionFactory(UPSERT_ONE_POSITION_SUCCESS);\nconst deleteOnePositionSuccess = actionFactory(DELETE_ONE_POSITION_SUCCESS);\n\n// dispatchers\nexport const fetchPositions = validatedApiDispatcher({\n    name: \"fetchPositions\",\n    description: \"Fetch positions\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/positions`\n        );\n        dispatch(fetchPositionsSuccess(data));\n    },\n});\n\nexport const fetchPosition = validatedApiDispatcher({\n    name: \"fetchPosition\",\n    description: \"Fetch position\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/positions/${payload.id}`\n        );\n        dispatch(fetchOnePositionSuccess(data));\n    },\n});\n\n// Some helper functions to convert the data that the UI uses\n// into data that the API can use\nconst instructorsToInstructorIds = flattenIdFactory(\n    \"instructors\",\n    \"instructor_ids\",\n    true\n);\nconst contractTemplateToContractTemplateId = flattenIdFactory(\n    \"contract_template\",\n    \"contract_template_id\"\n);\n\nconst instructorToInstructorId = flattenIdFactory(\n    \"instructor\",\n    \"instructor_id\"\n);\n\nconst applicantToApplicantId = flattenIdFactory(\"applicant\", \"applicant_id\");\n\nfunction prepForApi(data) {\n    const [ret, filtered] = splitObjByProps(data, [\"instructor_preferences\"]);\n\n    if (filtered[\"instructor_preferences\"]) {\n        ret[\"instructor_preferences\"] = filtered[\n            \"instructor_preferences\"\n        ].map((preference) =>\n            applicantToApplicantId(instructorToInstructorId(preference))\n        );\n    }\n\n    return contractTemplateToContractTemplateId(\n        instructorsToInstructorIds(ret)\n    );\n}\n\nexport const upsertPosition = validatedApiDispatcher({\n    name: \"upsertPosition\",\n    description: \"Add/insert position\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/positions`,\n            prepForApi(payload)\n        );\n        dispatch(upsertOnePositionSuccess(data));\n    },\n});\n\nexport const deletePosition = validatedApiDispatcher({\n    name: \"deletePosition\",\n    description: \"Delete position\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/positions/delete`,\n            prepForApi(payload)\n        );\n        dispatch(deleteOnePositionSuccess(data));\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = positionsReducer._localStoreSelector;\nconst _positionsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData\n);\n/**\n * Get the positions, but populate the `instructors` array with the full instructor\n * information.\n */\nexport const positionsSelector = createSelector(\n    [\n        _positionsSelector,\n        instructorsSelector,\n        contractTemplatesSelector,\n        applicantsSelector,\n    ],\n    (positions, instructors, contractTemplates, applicants) => {\n        // Hash the instructors by `id` for fast lookup\n        const instructorsById = arrayToHash(instructors);\n        const contractTemplatesById = arrayToHash(contractTemplates);\n        const applicantsById = arrayToHash(applicants);\n\n        // Leave all the data alone, except replace the `instructor_ids` list\n        // with the full instructor data.\n        return positions.map(\n            ({\n                instructor_ids,\n                contract_template_id,\n                instructor_preferences,\n                ...rest\n            }) => ({\n                ...rest,\n                instructors: instructor_ids.map((x) => instructorsById[x]),\n                contract_template: contractTemplatesById[contract_template_id],\n                instructor_preferences: (instructor_preferences || []).map(\n                    ({ applicant_id, instructor_id, ...rest }) => ({\n                        instructor: instructorsById[instructor_id],\n                        applicant: applicantsById[applicant_id],\n                        ...rest,\n                    })\n                ),\n            })\n        );\n    }\n);\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_APPLICATIONS_SUCCESS,\n    FETCH_ONE_APPLICATION_SUCCESS,\n    UPSERT_ONE_APPLICATION_SUCCESS,\n    DELETE_ONE_APPLICATION_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    arrayToHash,\n    validatedApiDispatcher,\n    flattenIdFactory,\n    splitObjByProps,\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { applicationsReducer } from \"../reducers/applications\";\nimport { createSelector } from \"reselect\";\nimport { applicantsSelector } from \"./applicants\";\nimport { activeRoleSelector } from \"./users\";\nimport { positionsSelector } from \"./positions\";\n\n// actions\nconst fetchApplicationsSuccess = actionFactory(FETCH_APPLICATIONS_SUCCESS);\nconst fetchOneApplicationSuccess = actionFactory(FETCH_ONE_APPLICATION_SUCCESS);\nconst upsertOneApplicationSuccess = actionFactory(\n    UPSERT_ONE_APPLICATION_SUCCESS\n);\nconst deleteOneApplicationSuccess = actionFactory(\n    DELETE_ONE_APPLICATION_SUCCESS\n);\n\nconst applicantToApplicantId = flattenIdFactory(\"applicant\", \"applicant_id\");\nconst positionToPositionId = flattenIdFactory(\"position\", \"position_id\");\nfunction prepForApi(data) {\n    const [ret, filtered] = splitObjByProps(data, [\"position_preferences\"]);\n\n    if (filtered[\"position_preferences\"]) {\n        ret[\"position_preferences\"] = filtered[\n            \"position_preferences\"\n        ].map((preference) => positionToPositionId(preference));\n    }\n\n    return applicantToApplicantId(ret);\n}\n\n// dispatchers\nexport const fetchApplications = validatedApiDispatcher({\n    name: \"fetchApplications\",\n    description: \"Fetch applications\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/applications`\n        );\n        dispatch(fetchApplicationsSuccess(data));\n    },\n});\n\nexport const fetchApplication = validatedApiDispatcher({\n    name: \"fetchApplication\",\n    description: \"Fetch application\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/applications/${payload.id}`\n        );\n        dispatch(fetchOneApplicationSuccess(data));\n    },\n});\n\nexport const upsertApplication = validatedApiDispatcher({\n    name: \"upsertApplication\",\n    description: \"Add/insert application\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/applications`,\n            prepForApi(payload)\n        );\n        dispatch(upsertOneApplicationSuccess(data));\n    },\n});\n\nexport const deleteApplication = validatedApiDispatcher({\n    name: \"deleteApplication\",\n    description: \"Delete application\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiPOST(\n            `/${role}/sessions/${activeSessionId}/applications/delete`,\n            prepForApi(payload)\n        );\n        dispatch(deleteOneApplicationSuccess(data));\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = applicationsReducer._localStoreSelector;\nexport const _applicationsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData\n);\n\n// Get the current list of applications and recompute `applicant_id` and `position_id`\n// to have corresponding `applicant` and `position` objects\nexport const applicationsSelector = createSelector(\n    [_applicationsSelector, applicantsSelector, positionsSelector],\n    (applications, applicants, positions) => {\n        if (applications.length === 0) {\n            return [];\n        }\n\n        const applicantsById = arrayToHash(applicants);\n        const positionsById = arrayToHash(positions);\n\n        // Change `applicant_id` to the corresponding `applicant` object\n        // and similarly, change each `position_id` in each entry of\n        // `position_preferences` to corresponding `position` object.\n        return applications.map(\n            ({ position_preferences, applicant_id, ...rest }) => ({\n                ...rest,\n                applicant: applicantsById[applicant_id] || {},\n                position_preferences: (position_preferences || []).map(\n                    ({ position_id, ...rest }) => ({\n                        position: positionsById[position_id],\n                        ...rest,\n                    })\n                ),\n            })\n        );\n    }\n);\n","import {\n    FETCH_ASSIGNMENTS_SUCCESS,\n    FETCH_ONE_ASSIGNMENT_SUCCESS,\n    UPSERT_ONE_ASSIGNMENT_SUCCESS,\n    DELETE_ONE_ASSIGNMENT_SUCCESS,\n    FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS,\n    UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS,\n} from \"../constants\";\nimport { createBasicReducerObject, createReducer } from \"./utils\";\n\nconst initialState = {\n    _modelData: [],\n    // Since we don't want to fetch all wage chunks all the time,\n    // we fetch them on a per-assignment basis and store them here.\n    _wageChunksByAssignmentId: {},\n};\n\n// basicReducers is an object whose keys are FETCH_SESSIONS_SUCCESS, etc,\n// and values are the corresponding reducer functions\nconst basicReducers = createBasicReducerObject(\n    FETCH_ASSIGNMENTS_SUCCESS,\n    FETCH_ONE_ASSIGNMENT_SUCCESS,\n    UPSERT_ONE_ASSIGNMENT_SUCCESS,\n    DELETE_ONE_ASSIGNMENT_SUCCESS\n);\n\n/**\n * Given a list of all the wage chunks for a particular assignment,\n * sets the _wageChunksByAssignmentId hash appropriately.\n *\n * @param {*} state\n * @param {{payload: object}} action\n * @returns\n */\nfunction setWageChunks(state, action) {\n    const assignmentId = (action.payload[0] || {}).assignment_id;\n    if (!assignmentId) {\n        return state;\n    }\n    return {\n        ...state,\n        _wageChunksByAssignmentId: {\n            ...state._wageChunksByAssignmentId,\n            [assignmentId]: action.payload,\n        },\n    };\n}\n\nexport const assignmentsReducer = createReducer(initialState, {\n    ...basicReducers,\n    // wage chunks are closely associated with assignments, so their actions happen\n    // here\n    [FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS]: setWageChunks,\n    [UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS]: setWageChunks,\n});\n","import PropTypes from \"prop-types\";\nimport {\n    FETCH_ASSIGNMENTS_SUCCESS,\n    FETCH_ONE_ASSIGNMENT_SUCCESS,\n    UPSERT_ONE_ASSIGNMENT_SUCCESS,\n    DELETE_ONE_ASSIGNMENT_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport {\n    actionFactory,\n    validatedApiDispatcher,\n    arrayToHash,\n    flattenIdFactory,\n} from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { assignmentsReducer } from \"../reducers/assignments\";\nimport { createSelector } from \"reselect\";\nimport { applicantsSelector } from \"./applicants\";\nimport { positionsSelector } from \"./positions\";\nimport { activeRoleSelector } from \"./users\";\n\n// actions\nconst fetchAssignmentsSuccess = actionFactory(FETCH_ASSIGNMENTS_SUCCESS);\nconst fetchOneAssignmentSuccess = actionFactory(FETCH_ONE_ASSIGNMENT_SUCCESS);\nconst upsertOneAssignmentSuccess = actionFactory(UPSERT_ONE_ASSIGNMENT_SUCCESS);\nconst deleteOneAssignmentSuccess = actionFactory(DELETE_ONE_ASSIGNMENT_SUCCESS);\n\n// dispatchers\nexport const fetchAssignments = validatedApiDispatcher({\n    name: \"fetchAssignments\",\n    description: \"Fetch assignments\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const { id: activeSessionId } = getState().model.sessions.activeSession;\n        const data = await apiGET(\n            `/${role}/sessions/${activeSessionId}/assignments`\n        );\n        dispatch(fetchAssignmentsSuccess(data));\n    },\n});\n\nexport const fetchAssignment = validatedApiDispatcher({\n    name: \"fetchAssignment\",\n    description: \"Fetch assignment\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/assignments/${payload.id}`);\n        dispatch(fetchOneAssignmentSuccess(data));\n    },\n});\n\n// Some helper functions to convert the data that the UI uses\n// into data that the API can use\nconst applicantToApplicantId = flattenIdFactory(\"applicant\", \"applicant_id\");\nconst positionToPositionId = flattenIdFactory(\"position\", \"position_id\");\nfunction prepForApi(data) {\n    return positionToPositionId(applicantToApplicantId(data));\n}\n\nexport const upsertAssignment = validatedApiDispatcher({\n    name: \"upsertAssignment\",\n    description: \"Add/insert assignment\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/assignments`, prepForApi(payload));\n        dispatch(upsertOneAssignmentSuccess(data));\n    },\n});\n\nexport const deleteAssignment = validatedApiDispatcher({\n    name: \"deleteAssignment\",\n    description: \"Delete assignment\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/delete`,\n            prepForApi(payload)\n        );\n        dispatch(deleteOneAssignmentSuccess(data));\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needing to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = assignmentsReducer._localStoreSelector;\n/**\n * Get just the assignment data as it appears in the store; i.e., it has references to\n * id's of applicants and positions.\n */\nconst _assignmentsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData\n);\n/**\n * Get the current assignments. This selector is memoized and will only\n * be recomputed when assignments, applicants, or positions change.\n */\nexport const assignmentsSelector = createSelector(\n    [_assignmentsSelector, applicantsSelector, positionsSelector],\n    (assignments, applicants, positions) => {\n        if (assignments.length === 0) {\n            return [];\n        }\n        applicants = arrayToHash(applicants);\n        positions = arrayToHash(positions);\n        return assignments.map(({ position_id, applicant_id, ...rest }) => ({\n            ...rest,\n            position: positions[position_id] || {},\n            applicant: applicants[applicant_id] || {},\n        }));\n    }\n);\n","import { validatedApiDispatcher } from \"./utils\";\nimport { apiError } from \"./errors\";\nimport { activeSessionSelector } from \"./sessions\";\nimport { initFromStage } from \"./init\";\n\nexport const setGlobals = validatedApiDispatcher({\n    name: \"setGlobals\",\n    description: \"Sets global variables\",\n    onErrorDispatch: (e) => apiError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const globals = { ...globalsSelector(getState()), ...payload };\n\n        // Store the globals in the URL\n        await dispatch(setGlobalsInUrl(globals));\n\n        // Now store the globals in the Redux store\n        dispatch({ type: \"SET_GLOBALS\", payload: globals });\n    },\n});\n\n/**\n * Sets the specified values to be part of the URL\n */\nexport const setGlobalsInUrl = validatedApiDispatcher({\n    name: \"setGlobalsInUrl\",\n    description: \"Stores global variables in the URL\",\n    onErrorDispatch: (e) => apiError(e.toString()),\n    dispatcher: (payload) => async () => {\n        // Create a new URL with the globals set in it\n        const searchParams = new URLSearchParams();\n        for (const [key, val] of Object.entries(payload)) {\n            searchParams.append(key, JSON.stringify(val));\n        }\n\n        // If we have globals to store, push them onto the url\n        if (window.history.pushState && (\"\" + searchParams).length > 0) {\n            let newUrl = new URL(window.location);\n            newUrl.search = \"?\" + searchParams;\n            newUrl = \"\" + newUrl;\n            if (\"\" + newUrl !== \"\" + window.location) {\n                window.history.pushState({ path: newUrl }, \"\", newUrl);\n            }\n        }\n    },\n});\n\nexport const setMockAPIState = validatedApiDispatcher({\n    name: \"setMockAPIState\",\n    description: \"Activates or deactivates the mockAPI\",\n    onErrorDispatch: (e) => apiError(e.toString()),\n    dispatcher: (payload, options = { skipInit: false }) => async (\n        dispatch\n    ) => {\n        await dispatch(setGlobals({ mockAPI: payload }));\n\n        if (!options.skipInit) {\n            await dispatch(initFromStage(\"toggleMockAPI\"));\n        }\n    },\n});\n\nexport const globalsSelector = (state) => {\n    // Peel off the `activeSession` if it is stored in globals.\n    // We want to always use the \"real\" active session and want\n    // to avoid multiple sources of truth.\n    // eslint-disable-next-line\n    const { activeSession, ...otherGlobals } = state.ui.globals;\n    const storedActiveSession = activeSessionSelector(state);\n    if (storedActiveSession != null && storedActiveSession.id != null) {\n        return { ...otherGlobals, activeSession: storedActiveSession.id };\n    }\n    return otherGlobals;\n};\n","/*\n * A collection of untilty functions for interfacing with urls\n */\n\n/**\n * Try to parse `s` as a native javascript type. E.g., \"45.6\" will\n * be parsed as a number, \"true\" will be parsed as `true`, \"[]\"\n * will be parsed as an empty array.\n *\n * @param {string} s\n * @returns\n */\nfunction stringToNativeType(s) {\n    try {\n        return JSON.parse(s);\n    } catch (e) {\n        return s;\n    }\n}\n\nfunction parseURLSearchString(s) {\n    const searchParams = new URLSearchParams(s);\n    const ret = {};\n    for (const [key, val] of searchParams.entries()) {\n        ret[key] = stringToNativeType(val);\n    }\n    return ret;\n}\n\nexport { stringToNativeType, parseURLSearchString };\n","import {\n    setActiveSession,\n    fetchSessions,\n    sessionsSelector,\n    activeSessionSelector,\n} from \"./sessions\";\nimport {\n    fetchActiveUser,\n    setActiveUserRole,\n    activeRoleSelector,\n} from \"./users\";\nimport { fetchApplicants } from \"./applicants\";\nimport { fetchApplications } from \"./applications\";\nimport { fetchAssignments } from \"./assignments\";\nimport { fetchContractTemplates } from \"./contract_templates\";\nimport { fetchInstructors } from \"./instructors\";\nimport { fetchPositions } from \"./positions\";\nimport { setGlobals, globalsSelector } from \"./globals\";\nimport { parseURLSearchString } from \"../../libs/urlUtils\";\n\n/**\n * A helper function to replace all API actions to\n * use mock API actions.\n *\n * @param {boolean} enableMockAPI\n */\nfunction toggleMockApi(enableMockAPI) {\n    // in production, ToggleMockApi is a no-op. In development, it actually\n    // does something.\n    /* eslint-disable */\n    if (enableMockAPI != null && process.env.REACT_APP_DEV_FEATURES) {\n        const mock = require(\"../mockAPI\");\n        const mockAPI = mock.mockAPI;\n\n        if (enableMockAPI === true) {\n            mockAPI.replaceGlobalFetch();\n        } else {\n            mockAPI.restoreGlobalFetch();\n        }\n    }\n    /* eslint-enable */\n}\n\n/**\n * Prepare an object to be used to set global variables. The\n * return value is the same as the input except with `null` entries\n * removed.\n *\n * @param {*} globals\n * @returns {object} same as input but with `null` values removed.\n */\nfunction prepareGlobals(globals) {\n    const ret = {};\n    for (const [key, val] of Object.entries(globals)) {\n        if (val != null) {\n            ret[key] = val;\n        }\n    }\n    return ret;\n}\n\n/**\n * Various actions have side effects, requiring additional actions to\n * be dispatched. For example, if a session changes, all data related to\n * that session needs to be re-fetched.\n *\n * This function allows you to specify \"stage\" to start the init procedure at.\n * It will handle re-fetching any dependent data and dispatching any\n * required actions depending on the stage specified.\n *\n * @export\n * @param {string} stage - What stage to start the init procedure at\n * @param {{ startAfterStage: boolean }} options - if true, start from the stage following the specified stage; if false, start from the specified stage\n * @returns {function} an async function that handles all the API calls.\n */\nexport function initFromStage(stage, options = { startAfterStage: false }) {\n    const startAfterStage = !!options.startAfterStage;\n\n    return async (dispatch, getState) => {\n        const parsedGlobals = { mockAPI: null, activeSession: null };\n\n        /**\n         * A helper function to determine if the `currentStage`\n         * should be run\n         *\n         * @param {string} queryStage\n         * @returns {boolean} whether the `currentStage` action\n         * should be performed\n         */\n        function shouldRunStage(queryStage) {\n            const initOrder = [\n                \"pageLoad\",\n                \"toggleMockAPI\",\n                \"setActiveUser\",\n                \"setActiveUserRole\",\n                \"fetchSessions\",\n                \"setActiveSession\",\n                \"updateGlobals\",\n                \"fetchSessionDependentData\",\n            ];\n\n            // Is the queried stage dependent on the current stage?\n            // If `startAfterStage` is set, we actually want to know\n            // if we are the *next* stage.\n            const stageDependent =\n                initOrder.indexOf(stage) + startAfterStage <=\n                initOrder.indexOf(queryStage);\n\n            // `\"setActiveSession\" requires that an active session be set before\n            // it gets run.\n            if (stageDependent && queryStage === \"setActiveSession\") {\n                const state = getState();\n                const sessions = sessionsSelector(state);\n                const activeSession = activeSessionSelector(state) || {\n                    id: parsedGlobals.activeSession,\n                };\n                if (\n                    sessions.find((session) => session.id === activeSession.id)\n                ) {\n                    return true;\n                }\n                return false;\n            }\n\n            // All session dependent data depends on an active session being set\n            if (stageDependent && queryStage === \"fetchSessionDependentData\") {\n                const state = getState();\n                const activeSession = activeSessionSelector(state);\n                if (activeSession && activeSession.id != null) {\n                    return true;\n                }\n                return false;\n            }\n\n            return stageDependent;\n        }\n\n        if (shouldRunStage(\"pageLoad\")) {\n            // When the page loads we parse the URL and pull out any globals that\n            // need setting\n            if (window.location) {\n                Object.assign(\n                    parsedGlobals,\n                    parseURLSearchString(window.location.search)\n                );\n                // Immediately set any global variables in the Redux store.\n                await dispatch(setGlobals(prepareGlobals(parsedGlobals)));\n            }\n        }\n\n        if (shouldRunStage(\"toggleMockAPI\")) {\n            const globals = globalsSelector(getState());\n            toggleMockApi(globals.mockAPI);\n        }\n\n        if (shouldRunStage(\"setActiveUser\")) {\n            await dispatch(fetchActiveUser());\n        }\n\n        if (shouldRunStage(\"setActiveUserRole\")) {\n            const activeRole = activeRoleSelector(getState());\n            await dispatch(setActiveUserRole(activeRole, { skipInit: true }));\n        }\n\n        if (shouldRunStage(\"fetchSessions\")) {\n            await dispatch(fetchSessions());\n        }\n\n        if (shouldRunStage(\"setActiveSession\")) {\n            // after sessions are fetched, we compare with the active session.\n            // The active session might need to be \"updated\" if the ID matches but\n            // the data doesn't\n            const state = getState();\n            const sessions = sessionsSelector(state);\n            const activeSession = activeSessionSelector(state);\n            // There are two places where the active session could be store:\n            // in the URL as a global and in the Redux store. Prefer the value\n            // in the URL.\n            const matchingSession =\n                sessions.find(\n                    (session) => session.id === parsedGlobals.activeSession\n                ) || activeSession;\n\n            await dispatch(\n                setActiveSession(matchingSession, { skipInit: true })\n            );\n        }\n\n        if (shouldRunStage(\"updateGlobals\")) {\n            await dispatch(setGlobals(prepareGlobals(parsedGlobals)));\n        }\n\n        if (shouldRunStage(\"fetchSessionDependentData\")) {\n            // `fetchActions` array contains all the fetch API calls that need to be\n            // made in order to obtain all data that the app needs.\n            const fetchActions = [\n                fetchApplicants,\n                fetchApplications,\n                fetchAssignments,\n                fetchContractTemplates,\n                fetchInstructors,\n                fetchPositions,\n            ];\n\n            // The order of fetching here doesn't matter, so dispatch all at once\n            await Promise.all(fetchActions.map((action) => dispatch(action())));\n        }\n    };\n}\n","import {\n    FETCH_ACTIVE_USER_SUCCESS,\n    FETCH_USERS_SUCCESS,\n    UPSERT_USERS_SUCCESS,\n    SET_ACTIVE_USER_ROLE_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { usersReducer } from \"../reducers/users\";\nimport { initFromStage } from \"./init\";\n\n// actions\nconst fetchActiveUserSuccess = actionFactory(FETCH_ACTIVE_USER_SUCCESS);\nconst fetchUsersSuccess = actionFactory(FETCH_USERS_SUCCESS);\nconst upsertUserSuccess = actionFactory(UPSERT_USERS_SUCCESS);\nconst setActiveUserRoleSuccess = actionFactory(SET_ACTIVE_USER_ROLE_SUCCESS);\n\n// dispatchers\nexport const fetchActiveUser = validatedApiDispatcher({\n    name: \"fetchActiveUser\",\n    description: \"Fetch the active user\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/active_user`);\n        dispatch(fetchActiveUserSuccess(data));\n    },\n});\n\nexport const upsertUser = validatedApiDispatcher({\n    name: \"upsertUsers\",\n    description: \"Upserts a user (setting their role(s))\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (user) => async (dispatch) => {\n        const data = await apiPOST(`/admin/users`, user);\n        dispatch(upsertUserSuccess(data));\n        await dispatch(fetchUsers(user));\n    },\n});\n\nexport const fetchUsers = validatedApiDispatcher({\n    name: \"fetchUsers\",\n    description: \"Fetch all users\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/users`);\n        dispatch(fetchUsersSuccess(data));\n    },\n});\n\nexport const setActiveUserRole = validatedApiDispatcher({\n    name: \"setActiveUserRole\",\n    description: \"Sets the role of the active user\",\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload, options = {}) => async (dispatch) => {\n        await dispatch(setActiveUserRoleSuccess(payload));\n        if (!options.skipInit) {\n            await dispatch(\n                initFromStage(\"setActiveUserRole\", { startAfterStage: true })\n            );\n        }\n    },\n});\n\nexport const debugOnlyFetchUsers = validatedApiDispatcher({\n    name: \"debugOnlyFetchUsers\",\n    description:\n        \"Fetch all users; this is available only in debug mode and bypasses any user permissions\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: () => async (dispatch) => {\n        const data = await apiGET(`/debug/users`);\n        dispatch(fetchUsersSuccess(data));\n    },\n});\n\nexport const debugOnlySetActiveUser = validatedApiDispatcher({\n    name: \"debugOnlySetActiveUser\",\n    description:\n        \"Sets the active user (i.e. fakes the 'logged on' user); available only in debug mode\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (user, options = {}) => async (dispatch) => {\n        const data = await apiPOST(`/debug/active_user`, user);\n        await dispatch(fetchActiveUserSuccess(data));\n        // The new user we switch to might not have the same roles as the previous user.\n        // Default to the highest-authority role available, which is the first in the list.\n        await dispatch(setActiveUserRoleSuccess(data.roles[0]));\n\n        // After the active user has been set, we need to re-download (almost) all data\n        // with the permissions of the new active user.\n        if (!options.skipInit) {\n            await dispatch(initFromStage(\"setActiveUser\"));\n        }\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\nexport const localStoreSelector = usersReducer._localStoreSelector;\nexport const usersSelector = (state) => localStoreSelector(state).users;\nexport const activeUserSelector = (state) =>\n    localStoreSelector(state).active_user;\nexport const activeRoleSelector = (state) =>\n    localStoreSelector(state).active_role;\n","import PropTypes from \"prop-types\";\nimport { createSelector } from \"reselect\";\nimport {\n    FETCH_SESSIONS_SUCCESS,\n    FETCH_ONE_SESSION_SUCCESS,\n    UPSERT_ONE_SESSION_SUCCESS,\n    DELETE_ONE_SESSION_SUCCESS,\n    SET_ACTIVE_SESSION,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { sessionsReducer } from \"../reducers/sessions\";\nimport { activeRoleSelector } from \"./users\";\nimport { initFromStage } from \"./init\";\n\n// actions\nconst fetchSessionsSuccess = actionFactory(FETCH_SESSIONS_SUCCESS);\nconst fetchOneSessionSuccess = actionFactory(FETCH_ONE_SESSION_SUCCESS);\nconst upsertOneSessionSuccess = actionFactory(UPSERT_ONE_SESSION_SUCCESS);\nconst deleteOneSessionSuccess = actionFactory(DELETE_ONE_SESSION_SUCCESS);\nconst setActiveSessionAction = actionFactory(SET_ACTIVE_SESSION);\n\n// dispatchers\nexport const fetchSessions = validatedApiDispatcher({\n    name: \"fetchSessions\",\n    description: \"Fetch sessions\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: () => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/sessions`);\n        await dispatch(fetchSessionsSuccess(data));\n    },\n});\n\nexport const fetchSession = validatedApiDispatcher({\n    name: \"fetchSession\",\n    description: \"Fetch session\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(`/${role}/sessions/${payload.id}`);\n        dispatch(fetchOneSessionSuccess(data));\n    },\n});\n\nexport const upsertSession = validatedApiDispatcher({\n    name: \"upsertSession\",\n    description: \"Add/insert session\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/sessions`, payload);\n        dispatch(upsertOneSessionSuccess(data));\n    },\n});\n\nexport const deleteSession = (payload) =>\n    validatedApiDispatcher({\n        name: \"deleteSession\",\n        description: \"Delete session\",\n        propTypes: { id: PropTypes.any.isRequired },\n        onErrorDispatch: (e) => deleteError(e.toString()),\n        dispatcher: async (dispatch, getState) => {\n            const role = activeRoleSelector(getState());\n            const data = await apiPOST(`/${role}/sessions/delete`, payload);\n            dispatch(deleteOneSessionSuccess(data));\n        },\n    });\n\n/**\n * Sets the `activeSession`. `activeSession` is used\n * in other API calls, so changing the active session may\n * trigger changes in other data (for example, `instructors` or `positions`)\n *\n * @param {object} payload - The session to set active\n */\nexport const setActiveSession = validatedApiDispatcher({\n    name: \"setActiveSession\",\n    description: \"Set the active session\",\n    onErrorDispatch: true,\n    dispatcher: (payload, options = {}) => async (dispatch, getState) => {\n        const { skipInit } = options;\n        const state = getState();\n        const currentActiveSession = activeSessionSelector(state);\n        if (currentActiveSession === payload) {\n            return;\n        }\n        // passing in null will unset the active session\n        if (payload == null) {\n            await dispatch(setActiveSessionAction(null));\n            return;\n        }\n        if ((currentActiveSession || { id: null }).id === payload.id) {\n            return;\n        }\n        // If we made it here, the activeSession is changing.\n        await dispatch(setActiveSessionAction(payload));\n        // Make sure all tasks we depend on get run\n        if (!skipInit) {\n            await dispatch(\n                initFromStage(\"setActiveSession\", { startAfterStage: true })\n            );\n        }\n    },\n});\n\n// selectors\nexport const localStoreSelector = sessionsReducer._localStoreSelector;\nexport const sessionsSelector = createSelector(\n    localStoreSelector,\n    (state) => state._modelData\n);\nexport const activeSessionSelector = createSelector(\n    localStoreSelector,\n    (state) => state.activeSession\n);\n","import PropTypes from \"prop-types\";\nimport {\n    UPSERT_ONE_WAGE_CHUNK_SUCCESS,\n    DELETE_ONE_WAGE_CHUNK_SUCCESS,\n    FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS,\n    UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS,\n} from \"../constants\";\nimport { fetchError, upsertError, deleteError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { createSelector } from \"reselect\";\nimport { assignmentsReducer } from \"../reducers/assignments\";\nimport { fetchAssignment } from \"./assignments\";\nimport { activeRoleSelector } from \"./users\";\n\n// actions\nconst fetchWageChunksForAssignmentSuccess = actionFactory(\n    FETCH_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS\n);\nconst upsertWageChunksForAssignmentSuccess = actionFactory(\n    UPSERT_WAGE_CHUNKS_FOR_ASSIGNMENT_SUCCESS\n);\nconst upsertOneWageChunkSuccess = actionFactory(UPSERT_ONE_WAGE_CHUNK_SUCCESS);\nconst deleteOneWageChunkSuccess = actionFactory(DELETE_ONE_WAGE_CHUNK_SUCCESS);\n\n// dispatchers\nexport const fetchWageChunksForAssignment = validatedApiDispatcher({\n    name: \"fetchWageChunksForAssignment\",\n    description: \"Fetch wage chunks associated with an assignment\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        // When we fetch wage chunks for an assignment, we only get the wage chunks for that particular assignment\n        const { id: assignmentId } = payload;\n        const data = await apiGET(\n            `/${role}/assignments/${assignmentId}/wage_chunks`\n        );\n        dispatch(fetchWageChunksForAssignmentSuccess(data));\n    },\n});\n\nexport const upsertWageChunksForAssignment = validatedApiDispatcher({\n    name: \"upsertWageChunksForAssignment\",\n    description: \"Fetch wage chunks associated with an assignment\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment, payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        // When we fetch wage chunks for an assignment, we only get the wage chunks for that particular assignment\n        const { id: assignmentId } = assignment;\n        const data = await apiPOST(\n            `/${role}/assignments/${assignmentId}/wage_chunks`,\n            payload\n        );\n        dispatch(upsertWageChunksForAssignmentSuccess(data));\n        // After we update a wage chunk, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const upsertWageChunk = validatedApiDispatcher({\n    name: \"upsertWageChunk\",\n    description: \"Add/insert wage chunk\",\n    propTypes: {},\n    onErrorDispatch: (e) => upsertError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/wage_chunks`, payload);\n        dispatch(upsertOneWageChunkSuccess(data));\n    },\n});\n\nexport const deleteWageChunk = validatedApiDispatcher({\n    name: \"deleteWageChunk\",\n    description: \"Delete a wage chunk\",\n    propTypes: { id: PropTypes.any.isRequired },\n    onErrorDispatch: (e) => deleteError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(`/${role}/wage_chunks/delete`, payload);\n        dispatch(deleteOneWageChunkSuccess(data));\n    },\n});\n\n// selectors\n\n// Each reducer is given an isolated state; instead of needed to remember to\n// pass the isolated state to each selector, `reducer._localStoreSelector` will intelligently\n// search for and return the isolated state associated with `reducer`. This is not\n// a standard redux function.\n\n// wage chunk data is stored with the assignments in the redux store\nexport const localStoreSelector = assignmentsReducer._localStoreSelector;\nexport const wageChunksByAssignmentSelector = createSelector(\n    localStoreSelector,\n    (state) =>\n        function (assignment) {\n            const assignment_id = assignment.id;\n            if (!state._wageChunksByAssignmentId[assignment_id]) {\n                return [];\n            }\n            return state._wageChunksByAssignmentId[assignment_id];\n        }\n);\n","import {\n    FETCH_ONE_OFFER_SUCCESS,\n    SET_OFFER_ACCEPTED_SUCCESS,\n    SET_OFFER_REJECTED_SUCCESS,\n    OFFER_CREATE_SUCCESS,\n    OFFER_EMAIL_SUCCESS,\n    OFFER_NAG_SUCCESS,\n    OFFER_WITHDRAW_SUCCESS,\n} from \"../constants\";\nimport { fetchError } from \"./errors\";\nimport { actionFactory, validatedApiDispatcher } from \"./utils\";\nimport { apiGET, apiPOST } from \"../../libs/apiUtils\";\nimport { fetchAssignment } from \"./assignments\";\nimport { activeRoleSelector } from \"./users\";\n\n// actions\nexport const fetchOfferSucces = actionFactory(FETCH_ONE_OFFER_SUCCESS);\nexport const setOfferAcceptedSuccess = actionFactory(\n    SET_OFFER_ACCEPTED_SUCCESS\n);\nexport const setOfferRejectedSuccess = actionFactory(\n    SET_OFFER_REJECTED_SUCCESS\n);\nexport const offerCreateSuccess = actionFactory(OFFER_CREATE_SUCCESS);\nexport const offerEmailSuccess = actionFactory(OFFER_EMAIL_SUCCESS);\nexport const offerNagSuccess = actionFactory(OFFER_NAG_SUCCESS);\nexport const offerWithdrawSuccess = actionFactory(OFFER_WITHDRAW_SUCCESS);\n\n// dispatchers\nexport const fetchActiveOfferForAssignment = validatedApiDispatcher({\n    name: \"fetchActiveOfferForAssignment\",\n    description: \"Fetch an offer associated with an assignment\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (payload) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiGET(\n            `/${role}/assignments/${payload.id}/active_offer`\n        );\n        dispatch(fetchOfferSucces(data));\n    },\n});\n\nexport const setOfferForAssignmentAccepted = validatedApiDispatcher({\n    name: \"setOfferForAssignmentAccepted\",\n    description: \"Set an offer as accepted\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/accept`\n        );\n        dispatch(setOfferAcceptedSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const setOfferForAssignmentRejected = validatedApiDispatcher({\n    name: \"setOfferForAssignmentRejected\",\n    description: \"Set an offer as rejected\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/reject`\n        );\n        dispatch(setOfferRejectedSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const offerForAssignmentWithdraw = validatedApiDispatcher({\n    name: \"offerForAssignmentWithdraw\",\n    description: \"Withdraw an offer\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/withdraw`\n        );\n        dispatch(offerWithdrawSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const offerForAssignmentCreate = validatedApiDispatcher({\n    name: \"offerForAssignmentCreate\",\n    description: \"Create an offer\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/create`\n        );\n        dispatch(offerCreateSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const offerForAssignmentEmail = validatedApiDispatcher({\n    name: \"offerForAssignmentEmail\",\n    description: \"Email an offer\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/email`\n        );\n        dispatch(offerEmailSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n\nexport const offerForAssignmentNag = validatedApiDispatcher({\n    name: \"offerForAssignmentNag\",\n    description: \"Send a nag email for an offer\",\n    onErrorDispatch: (e) => fetchError(e.toString()),\n    dispatcher: (assignment) => async (dispatch, getState) => {\n        const role = activeRoleSelector(getState());\n        const data = await apiPOST(\n            `/${role}/assignments/${assignment.id}/active_offer/nag`\n        );\n        dispatch(offerNagSuccess(data));\n        // After we update an offer, we should refetch the assignment to make sure\n        // there isn't stale data\n        await dispatch(fetchAssignment(assignment));\n    },\n});\n","import React from \"react\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { setGlobals, globalsSelector } from \"../../api/actions\";\n\n/**\n * A toggle switch for turning on and off the Mock API. An instance\n * of the Mock API is included in this component, and this component\n * takes no arguments.\n *\n * This component only renders when `process.env.REACT_APP_DEV_FEATURES` is truthy.\n *\n * @export\n * @returns {React.ElementType}\n */\nlet ToggleMockApi = function ToggleMockApi(props) {\n    const { globals, setMockAPIState } = props;\n    const active = globals.mockAPI;\n\n    return (\n        <span\n            title={\n                \"The Mock API simulates the TAPP API but uses browser-based storage. This allows you to test TAPP functionality without a working server.\"\n            }\n        >\n            Mock API{\" \"}\n            <ButtonGroup>\n                <Button\n                    variant={active ? \"primary\" : \"secondary\"}\n                    onClick={() => setMockAPIState(true)}\n                >\n                    On\n                </Button>\n                <Button\n                    variant={active ? \"secondary\" : \"primary\"}\n                    onClick={() => setMockAPIState(false)}\n                >\n                    Off\n                </Button>\n            </ButtonGroup>\n        </span>\n    );\n};\n\nToggleMockApi = connect((state) => ({ globals: globalsSelector(state) }), {\n    setGlobals,\n})(ToggleMockApi);\n\nexport { ToggleMockApi };\n","import React from \"react\";\nimport { Dropdown } from \"react-bootstrap\";\n\nconst ident = () => {};\n\n/**\n * A toggle switch for turning on and off the Mock API. An instance\n * of the Mock API is included in this component, and this component\n * takes no arguments.\n *\n * This component only renders when `process.env.REACT_APP_DEV_FEATURES` is truthy.\n *\n * @export\n * @returns {React.ElementType}\n */\nfunction ActiveUserButton({\n    users = [],\n    activeUser = {},\n    setActiveUser = ident,\n    fetchUsers = ident,\n}) {\n    const [dropdownVisible, setDropdownVisible] = React.useState(false);\n\n    React.useEffect(() => {\n        // Whenever the dropdown is open, fetch a list of all available users.\n        // This would normally not be a good idea, but since this button is only\n        // used in debug mode, it's okay.\n        if (dropdownVisible) {\n            fetchUsers();\n        }\n    }, [dropdownVisible, fetchUsers]);\n\n    return (\n        <span\n            title={\n                \"Set which user you are currently logged in as. This is only available when the server is running in debug mode.\"\n            }\n            className=\"logged-in-as-container\"\n        >\n            <label>Logged in as</label>\n            <Dropdown\n                onSelect={(i) => {\n                    setActiveUser(users[i]);\n                }}\n                onToggle={(desiredVisibility) =>\n                    setDropdownVisible(desiredVisibility)\n                }\n                show={dropdownVisible}\n                alignRight\n            >\n                <Dropdown.Toggle split variant=\"dark\">\n                    {activeUser.utorid}{\" \"}\n                </Dropdown.Toggle>\n                <Dropdown.Menu flip={true}>\n                    {(users || []).map((user, i) => (\n                        <Dropdown.Item\n                            key={i}\n                            eventKey={i}\n                            active={activeUser.utorid === user.utorid}\n                        >\n                            {user.utorid} ({(user.roles || []).join(\", \")})\n                        </Dropdown.Item>\n                    ))}\n                </Dropdown.Menu>\n            </Dropdown>\n        </span>\n    );\n}\n\nexport { ActiveUserButton };\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { NavLink, Switch, Route } from \"react-router-dom\";\n\nimport \"./main.css\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport { ToggleMockApi } from \"./mockAPI\";\n\nimport SwaggerUI from \"swagger-ui-react\";\nimport \"swagger-ui-react/swagger-ui.css\";\nimport { mockApiRoutesAsSwaggerPaths } from \"../../api/defs/doc-generation\";\nimport { mockAPI } from \"../../api/mockAPI\";\nimport {\n    setMockAPIState,\n    usersSelector,\n    activeUserSelector,\n    debugOnlySetActiveUser,\n    debugOnlyFetchUsers,\n} from \"../../api/actions\";\nimport { ActiveUserButton } from \"./active-user-switch\";\n\n/**\n * Wrap `\"react-router-dom\"`'s `NavLink` in Bootstrap\n * styling.\n *\n * @param {*} props\n * @returns\n */\nfunction BootstrapNavLink(props) {\n    return (\n        <Nav.Link\n            as={NavLink}\n            activeClassName=\"bg-warning text-dark\"\n            to={props.to}\n        >\n            {props.children}\n        </Nav.Link>\n    );\n}\nBootstrapNavLink.propTypes = {\n    to: PropTypes.string,\n};\n\nconst swaggerData = {\n    openapi: \"3.0.0\",\n    info: {\n        description:\n            \"TAPP is a program for TA management--for making TA assignments and distributing TA contracts.\",\n        title: \"TAPP\",\n    },\n    servers: [\n        { url: \"/api/v1/admin\" },\n        { url: \"/api/v1/instructor\" },\n        { url: \"/api/v1/ta\" },\n        { url: \"/api/v1\" },\n    ],\n    paths: {\n        /* XXX this is hear temporarily to serve as an example for generating Swagger (openapi) documenation\n        \"/bob\": {\n            get: {\n                summary: \"Bob's summary\",\n                tags: [\"helful\"],\n                produces: \"application/json\",\n                responses: {\n                    default: {\n                        description: \"OK\",\n                        content: {\n                            \"application/json\": {\n                                schema: {\n                                    type: \"object\",\n                                    properties: {\n                                        status: {\n                                            type: \"string\",\n                                            enum: [\"success\", \"error\"]\n                                        },\n                                        message: { type: \"string\" },\n                                        payload: {\n                                            type: \"array\",\n                                            items: {\n                                                type: \"object\",\n                                                properties: {\n                                                    name: { type: \"string\" }\n                                                },\n                                                required: [\"name\"]\n                                            }\n                                        }\n                                    },\n                                    required: [\"status\"]\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n*/\n        ...mockApiRoutesAsSwaggerPaths(mockAPI),\n    },\n};\n\nconst ConnectedActiveUserButton = connect(\n    (state) => ({\n        activeUser: activeUserSelector(state),\n        users: usersSelector(state),\n    }),\n    { fetchUsers: debugOnlyFetchUsers, setActiveUser: debugOnlySetActiveUser }\n)(ActiveUserButton);\n\n// When toggled, `ToggleMockApi` will try\n// to refetch all the sessions, so pass it an\n// appropriate dispatcher.\nconst ConnectedToggleMockApi = connect(null, { setMockAPIState })(\n    ToggleMockApi\n);\n\nfunction DevFrame(props) {\n    return (\n        <div id=\"dev-frame\" className=\"bg-info\">\n            <div id=\"dev-frame-header\">\n                <Navbar expand variant=\"dark\">\n                    <Navbar.Brand\n                        href=\"#/\"\n                        title=\"View TAPP in development mode in a framed window.\"\n                    >\n                        Dev Mode\n                    </Navbar.Brand>\n                    <Nav className=\"mr-auto\">\n                        <BootstrapNavLink to=\"/dashboard\">\n                            Dashboard\n                        </BootstrapNavLink>\n                    </Nav>\n                    <Nav className=\"mr-auto\">\n                        <BootstrapNavLink to=\"/api-docs\">\n                            API Docs\n                        </BootstrapNavLink>\n                    </Nav>\n                    <Navbar.Collapse className=\"justify-content-end\">\n                        <ConnectedActiveUserButton />\n                        <ConnectedToggleMockApi />\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n            <div id=\"dev-frame-body\">\n                <div id=\"dev-frame-body-inner\">\n                    <Switch>\n                        <Route path=\"/api-docs\">\n                            <SwaggerUI spec={swaggerData} docExpansion=\"list\" />\n                        </Route>\n                        <Route>{props.children}</Route>\n                    </Switch>\n                </div>\n            </div>\n            <div id=\"dev-frame-footer\"></div>\n        </div>\n    );\n}\n\nexport { DevFrame };\n","/**\n * Notifications popup whenever they show up in state.ui.notifications\n */\nimport { connect } from \"react-redux\";\nimport Notifications from \"react-notification-system-redux\";\n\nexport const ConnectedNotifications = connect((state) => ({\n    notifications: state.ui.notifications,\n}))(Notifications);\n","import { SET_SELECTED_ROWS } from \"./constants\";\n\n// actions\nexport const setSelectedRows = (data) => ({\n    type: SET_SELECTED_ROWS,\n    payload: data,\n});\n\n// selectors\nexport const offerTableSelector = (state) => state.ui.offerTable;\n","import React from \"react\";\nimport { Form, Col } from \"react-bootstrap\";\n\n/**\n * A higher-order-function which returns a function that creates editable fields.\n * For example, `fieldEditorFactory(x, setX)(\"I set foo\", \"foo\", \"number\")` returns\n * a react `<input />` element that will call `setX({...x, foo: <new foo val>})` whenever\n * the input changes.\n *\n * A `type=` parameter can be passed in; when used, some types are coerced. For example,\n * `type=number` will automatically coerce strings to numbers so `setBoundData` would be\n * passed an object with the specified attribute cast as a number.\n *\n * @export\n * @param {object} boundData - object whose attributes will be (non-destructively) set\n * @param {function(object): void} setBoundData - setter function\n * @returnType {function(title: string, attr: string, type: string, inputAttrs: object): React.Node}\n */\nexport function fieldEditorFactory(boundData, setBoundData) {\n    /**\n     * Create a callback function which updates the specified attribute.\n     *\n     * @param {string} attr\n     * @returns\n     */\n    function setAttrFactory(attr, coerceFunc = (x) => x) {\n        return (e) => {\n            const newVal = e.target.value || \"\";\n            const newData = { ...boundData, [attr]: coerceFunc(newVal) };\n            setBoundData(newData);\n        };\n    }\n\n    /**\n     * Create a bootstrap form component that updates the specified attr\n     * of `boundData`\n     *\n     * @param {string} title - Label text of the form control\n     * @param {string} attr - attribute of `boundData` to be updated when this form control changes\n     * @param {string?} type - the type of the `<input />` element\n     * @param {object?} inputAttrs - additional attributes to be passed to the `<input />` element\n     * @returnType {React.Node}\n     */\n    function createFieldEditor(title, attr, type = \"text\", inputAttrs = {}) {\n        // Function called on the value before it is passed to setBoundData\n        let coerceFunc = (x) => x;\n        // Function that is called on the value before it is passed to the `<input />`\n        // element\n        let valueFunc = (x) => x || \"\";\n\n        // depending on the type we want to coerce values appropriately\n        switch (type) {\n            case \"number\":\n                coerceFunc = Number;\n                break;\n            case \"date\":\n                coerceFunc = (x) => new Date(x).toISOString();\n                valueFunc = (x) => {\n                    try {\n                        return new Date(x).toISOString().slice(0, 10);\n                    } catch (e) {\n                        return \"\";\n                    }\n                };\n                break;\n            default:\n                break;\n        }\n\n        return (\n            <React.Fragment>\n                <Form.Label>{title}</Form.Label>\n                <Form.Control\n                    type={type}\n                    value={valueFunc(boundData[attr])}\n                    onChange={setAttrFactory(attr, coerceFunc)}\n                    {...inputAttrs}\n                />\n            </React.Fragment>\n        );\n    }\n\n    return createFieldEditor;\n}\n\n/**\n * Place all children side-by-side in a react-boostrap `Form.Row`\n *\n * @export\n * @param {*} props\n * @returnType {React.Node}\n */\nexport function DialogRow(props) {\n    const { children } = props;\n    return (\n        <Form.Row style={{ alignItems: \"baseline\" }}>\n            {React.Children.map(children, (child, index) => {\n                return (\n                    <Form.Group as={Col} key={index}>\n                        {child}\n                    </Form.Group>\n                );\n            })}\n        </Form.Row>\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-bootstrap\";\nimport { docApiPropTypes } from \"../../api/defs/doc-generation\";\nimport { fieldEditorFactory, DialogRow } from \"./common-controls\";\n/**\n * Edit a session\n *\n * @export\n * @param {{session: object, setSession: function}} props\n * @returns\n */\nexport function SessionEditor(props) {\n    const { session, setSession } = props;\n\n    const createFieldEditor = fieldEditorFactory(session, setSession);\n\n    return (\n        <Form>\n            <DialogRow>\n                {createFieldEditor(\"Session Name (e.g. 2019 Fall)\", \"name\")}\n                {createFieldEditor(\"Start Date\", \"start_date\", \"date\")}\n                {createFieldEditor(\"End Date\", \"end_date\", \"date\")}\n            </DialogRow>\n            <DialogRow>\n                {createFieldEditor(\n                    \"Rate 1 (pre-January rate)\",\n                    \"rate1\",\n                    \"number\",\n                    {\n                        step: \"0.01\",\n                        min: 0,\n                    }\n                )}\n                {createFieldEditor(\n                    \"Rate 2 (post-January rate)\",\n                    \"rate2\",\n                    \"number\",\n                    {\n                        step: \"0.01\",\n                        min: 0,\n                    }\n                )}\n            </DialogRow>\n        </Form>\n    );\n}\nSessionEditor.propTypes = {\n    session: docApiPropTypes.session.isRequired,\n    setSession: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport class ApplicantsList extends React.Component {\n    static propTypes = {\n        applicants: PropTypes.arrayOf(\n            PropTypes.shape({\n                first_name: PropTypes.string,\n                last_name: PropTypes.string,\n            })\n        ).isRequired,\n    };\n    render() {\n        const { applicants } = this.props;\n        let applicantsList = <div>No Applicants...</div>;\n        if (applicants.length > 0) {\n            applicantsList = (\n                <ul>\n                    {applicants.map((applicant) => (\n                        <li key={applicant.id}>\n                            {applicant.first_name} {applicant.last_name}\n                        </li>\n                    ))}\n                </ul>\n            );\n        }\n        return (\n            <div>\n                <h3>Available Applicants</h3>\n                {applicantsList}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport { docApiPropTypes } from \"../api/defs/doc-generation\";\n\nconst DEFAULT_COLUMNS = [\n    { Header: \"Template Name\", accessor: \"template_name\" },\n    { Header: \"Template File\", accessor: \"template_file\" },\n];\n\n/**\n * List the instructors using a ReactTable. `columns` can be passed\n * in to customize columns/cell renderers.\n *\n * @export\n * @param {{instructors: object[], columns: object[]}} props\n * @returns\n */\nexport function ContractTemplatesList(props) {\n    const { contractTemplates, columns = DEFAULT_COLUMNS } = props;\n    return (\n        <React.Fragment>\n            <h3>Contract Templates</h3>\n            <ReactTable\n                data={contractTemplates}\n                columns={columns}\n                showPagination={false}\n                minRows={1}\n            />\n        </React.Fragment>\n    );\n}\nContractTemplatesList.propTypes = {\n    contractTemplates: PropTypes.arrayOf(docApiPropTypes.contractTemplate)\n        .isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({ Header: PropTypes.any.isRequired })\n    ),\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport { docApiPropTypes } from \"../api/defs/doc-generation\";\nimport { Col, Form } from \"react-bootstrap\";\n\nconst DEFAULT_COLUMNS = [\n    { Header: \"Last Name\", accessor: \"last_name\" },\n    { Header: \"First Name\", accessor: \"first_name\" },\n    { Header: \"UTORid\", accessor: \"utorid\" },\n];\n\n/**\n * List the instructors using a ReactTable. `columns` can be passed\n * in to customize columns/cell renderers.\n *\n * @export\n * @param {{instructors: object[], columns: object[]}} props\n * @returns\n */\nexport function InstructorsList(props) {\n    const { instructors, columns = DEFAULT_COLUMNS } = props;\n    return (\n        <React.Fragment>\n            <h3>Instructors</h3>\n            <ReactTable\n                data={instructors}\n                columns={columns}\n                showPagination={false}\n                minRows={1}\n            />\n        </React.Fragment>\n    );\n}\nInstructorsList.propTypes = {\n    instructors: PropTypes.arrayOf(docApiPropTypes.instructor).isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({ Header: PropTypes.any.isRequired })\n    ),\n};\n\nconst DEFAULT_INSTRUCTOR = {\n    utorid: \"\",\n    last_name: \"\",\n    first_name: \"\",\n};\n\n/**\n * Edit information about an instructor.\n *\n * @export\n * @param {{instructor: object, setInstructor: function}} props\n * @returns\n */\nexport function InstructorEditor(props) {\n    const { instructor: instructorProps, setInstructor } = props;\n    const instructor = { ...DEFAULT_INSTRUCTOR, ...instructorProps };\n\n    /**\n     * Create a callback function which updates the specified attribute\n     * of a position.\n     *\n     * @param {string} attr\n     * @returns\n     */\n    function setAttrFactory(attr) {\n        return (e) => {\n            const newVal = e.target.value || \"\";\n            const newInstructor = { ...instructor, [attr]: newVal };\n            setInstructor(newInstructor);\n        };\n    }\n\n    /**\n     * Create a bootstrap form component that updates the specified attr\n     * of `position`\n     *\n     * @param {string} title - Label text of the form control\n     * @param {string} attr - attribute of `position` to be updated when this form control changes\n     * @returns {node}\n     */\n    function createFieldEditor(title, attr, type = \"text\") {\n        return (\n            <React.Fragment>\n                <Form.Label>{title}</Form.Label>\n                <Form.Control\n                    type={type}\n                    value={instructor[attr] || \"\"}\n                    onChange={setAttrFactory(attr)}\n                />\n            </React.Fragment>\n        );\n    }\n\n    return (\n        <Form>\n            <Form.Row>\n                <Form.Group as={Col}>\n                    {createFieldEditor(\"First Name\", \"first_name\")}\n                </Form.Group>\n                <Form.Group as={Col}>\n                    {createFieldEditor(\"Last Name\", \"last_name\")}\n                </Form.Group>\n                <Form.Group as={Col}>\n                    {createFieldEditor(\"UTORid\", \"utorid\")}\n                </Form.Group>\n            </Form.Row>\n        </Form>\n    );\n}\nInstructorEditor.propTypes = {\n    instructor: docApiPropTypes.instructor,\n    setInstructor: PropTypes.func,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FaEdit } from \"react-icons/fa\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nimport \"./edit-field-widgets.css\";\n\n/**\n * A dialog allowing one to edit `props.value`. `onChagne` is called\n * when \"save\" is clicked while editing this value.\n *\n * @param {*} props\n * @returns\n */\nfunction EditFieldDialog(props) {\n    const { title, value, show, onHide, onChange } = props;\n    const [fieldVal, setFieldVal] = React.useState(value);\n\n    function cancelClick() {\n        setFieldVal(value);\n        onHide();\n    }\n\n    function saveClick() {\n        // eslint-disable-next-line\n        if (fieldVal != value) {\n            // Only call `onChange` if the value has changed\n            onChange(fieldVal, value);\n        }\n        onHide();\n    }\n\n    const changeIndicator =\n        // eslint-disable-next-line\n        fieldVal == value ? null : (\n            <span>\n                Change from{\" \"}\n                <span className=\"field-dialog-formatted-name\">{value}</span> to{\" \"}\n                <span className=\"field-dialog-formatted-name\">{fieldVal}</span>\n            </span>\n        );\n\n    return (\n        <Modal show={show} onHide={cancelClick}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <input\n                    type=\"text\"\n                    value={fieldVal}\n                    onChange={(e) => setFieldVal(e.currentTarget.value)}\n                />{\" \"}\n                {changeIndicator}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={cancelClick} variant=\"outline-secondary\">\n                    Cancel\n                </Button>\n                <Button onClick={saveClick}>Save</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\n/**\n * An edit icon that appears on hover.\n *\n * @param {*} props\n * @returns\n */\nfunction EditFieldIcon(props) {\n    const { title, hidden, onClick } = props;\n    if (hidden) {\n        return null;\n    }\n    return (\n        <div\n            className=\"show-on-hover edit-glyph\"\n            onClick={onClick}\n            title={title}\n        >\n            <FaEdit />\n        </div>\n    );\n}\n\n/**\n * Adds an \"edit\" icon which shows up when hovering on the wrapped widget.\n * Clicking the \"edit\" icon opens a dialog that allows one to edit the value.\n * `onChange` is called if \"save\" is pressed in the edit dialog.\n *\n * @export\n * @param {{children, title, value, onChange: function, editable: boolean}} props\n * @returns\n */\nexport function EditableField(props) {\n    const { children, title, value, onChange, editable = true } = props;\n    const [dialogShow, setDialogShow] = React.useState(false);\n    return (\n        <div className=\"show-on-hover-wrapper\">\n            {children}\n            <EditFieldIcon\n                title={title}\n                hidden={!editable}\n                onClick={() => setDialogShow(true)}\n            />\n            <EditFieldDialog\n                title={title}\n                value={value}\n                onChange={onChange}\n                show={dialogShow}\n                onHide={() => setDialogShow(false)}\n            />\n        </div>\n    );\n}\nEditFieldDialog.propTypes = {\n    title: PropTypes.node,\n    value: PropTypes.any.isRequired,\n    onChange: PropTypes.func,\n    editable: PropTypes.bool,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { instructorsSelector, upsertInstructor } from \"../../api/actions\";\nimport { InstructorsList } from \"../../components/instructors\";\nimport { EditableField } from \"../../components/edit-field-widgets\";\n\n/**\n * A cell that renders editable applicant information\n *\n * @param {*} props\n * @returns\n */\nfunction EditableCell(props) {\n    const title = `Edit ${props.column.Header}`;\n    const { upsertInstructor, field } = props;\n    function onChange(newVal) {\n        const applicantId = props.original.id;\n        upsertInstructor({ id: applicantId, [field]: newVal });\n    }\n    return (\n        <EditableField\n            title={title}\n            value={props.value || \"\"}\n            onChange={onChange}\n        >\n            {props.value}\n        </EditableField>\n    );\n}\n\nfunction EditableInstructorsList(props) {\n    const { upsertInstructor, ...rest } = props;\n\n    // Bind an `ApplicantCell` to a particular field\n    function generateCell(field) {\n        return (props) => (\n            <EditableCell\n                field={field}\n                upsertInstructor={upsertInstructor}\n                {...props}\n            />\n        );\n    }\n\n    const columns = [\n        {\n            Header: \"Last Name\",\n            accessor: \"last_name\",\n            Cell: generateCell(\"last_name\"),\n        },\n        {\n            Header: \"First Name\",\n            accessor: \"first_name\",\n            Cell: generateCell(\"first_name\"),\n        },\n        {\n            Header: \"Email\",\n            accessor: \"email\",\n            Cell: generateCell(\"email\"),\n        },\n        {\n            Header: \"UTORid\",\n            accessor: \"utorid\",\n            Cell: generateCell(\"utorid\"),\n        },\n    ];\n\n    return <InstructorsList columns={columns} {...rest} />;\n}\n\n/**\n * EditableInstructorsList that has been connected to the redux store\n * for live updates and editability.\n */\nexport const ConnectedInstructorsList = connect(\n    (state) => ({\n        instructors: instructorsSelector(state),\n    }),\n    { upsertInstructor }\n)(EditableInstructorsList);\n","/**\n * Trims the input string. If the `x` is not a string, it is\n * coerced\n *\n * @param {string} x\n * @returns\n */\nexport function strip(x) {\n    if (x == null) {\n        return \"\";\n    }\n    return (\"\" + x).trim();\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { InstructorEditor } from \"../../components/instructors\";\nimport { Modal, Button, Alert } from \"react-bootstrap\";\nimport { upsertInstructor, instructorsSelector } from \"../../api/actions\";\nimport { strip } from \"../../libs/utils\";\n\nconst BLANK_INSTRUCTOR = {\n    first_name: \"\",\n    last_name: \"\",\n    utorid: \"\",\n};\n\n/**\n * Find if there is a conflicting instructor in the passed in list\n * of instructors, or if any required fields are incorrect.\n *\n * @param {object} instructor\n * @param {object[]} instructors\n */\nfunction getConficts(instructor, instructors) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (\n        !strip(instructor.utorid) ||\n        !strip(instructor.first_name) ||\n        !strip(instructor.last_name)\n    ) {\n        ret.delayShow = \"A first name, last name, and utorid is required\";\n    }\n    const matchingInstructor = instructors.find(\n        (x) => strip(x.utorid) === strip(instructor.utorid)\n    );\n    if (matchingInstructor) {\n        ret.immediateShow = (\n            <p>\n                Another instructor exists with utorid={instructor.utorid}:{\" \"}\n                <b>\n                    {matchingInstructor.first_name}{\" \"}\n                    {matchingInstructor.last_name}\n                </b>\n            </p>\n        );\n    }\n    return ret;\n}\n\nfunction AddInstructorDialog(props) {\n    const { show, onHide = () => {}, instructors, upsertInstructor } = props;\n    const [newInstructor, setNewInstructor] = React.useState(BLANK_INSTRUCTOR);\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewInstructor(BLANK_INSTRUCTOR);\n        }\n    }, [show]);\n\n    function createInstructor() {\n        upsertInstructor(newInstructor);\n        onHide();\n    }\n\n    const conflicts = getConficts(newInstructor, instructors);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Instructor</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <InstructorEditor\n                    instructor={newInstructor}\n                    setInstructor={setNewInstructor}\n                />\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createInstructor}\n                    title={conflicts.delayShow || \"Create Instructor\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Instructor\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n/**\n * AddInstructorDialog that has been connected to the redux store\n */\nexport const ConnectedAddInstructorDialog = connect(\n    (state) => ({ instructors: instructorsSelector(state) }),\n    { upsertInstructor }\n)(AddInstructorDialog);\n","import React from \"react\";\nimport { ConnectedInstructorsList } from \"./editable-instructors-list\";\nimport { ConnectedAddInstructorDialog } from \"./add-instructor-dialog\";\nimport { Button } from \"react-bootstrap\";\n\nexport function AdminIstructorsView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div>\n            <Button\n                onClick={() => {\n                    setAddDialogVisible(true);\n                }}\n            >\n                Add Instructor\n            </Button>\n            <ConnectedAddInstructorDialog\n                show={addDialogVisible}\n                onHide={() => {\n                    setAddDialogVisible(false);\n                }}\n            />\n            <ConnectedInstructorsList />\n        </div>\n    );\n}\n\nexport { ConnectedInstructorsList, ConnectedAddInstructorDialog };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport { docApiPropTypes } from \"../api/defs/doc-generation\";\nimport { Badge } from \"react-bootstrap\";\n\nconst DEFAULT_COLUMNS = [\n    { Header: \"Position Code\", accessor: \"position_code\" },\n    { Header: \"Position Title\", accessor: \"position_title\" },\n    { Header: \"Hours\", accessor: \"hours_per_assignment\" },\n    { Header: \"Start\", accessor: \"start_date\" },\n    { Header: \"End\", accessor: \"end_date\" },\n    {\n        Header: \"Instructors\",\n        accessor: \"instructors\",\n        Cell: (props) => (\n            <React.Fragment>\n                {props.value.map((instructor = {}) => {\n                    const name = `${instructor.first_name} ${instructor.last_name}`;\n                    return (\n                        <Badge variant=\"secondary\" className=\"mr-1\" key={name}>\n                            {name}\n                        </Badge>\n                    );\n                })}\n            </React.Fragment>\n        ),\n    },\n    {\n        Header: \"Contract Template\",\n        accessor: \"contract_template.template_name\",\n    },\n];\n\n/**\n * List the instructors using a ReactTable. `columns` can be passed\n * in to customize columns/cell renderers.\n *\n * @export\n * @param {{instructors: object[], columns: object[]}} props\n * @returns\n */\nexport function PositionsList(props) {\n    const { positions, columns = DEFAULT_COLUMNS } = props;\n    return (\n        <React.Fragment>\n            <h3>Positions</h3>\n            <ReactTable\n                data={positions}\n                columns={columns}\n                showPagination={false}\n                minRows={1}\n            />\n        </React.Fragment>\n    );\n}\nPositionsList.propTypes = {\n    positions: PropTypes.arrayOf(docApiPropTypes.position).isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({ Header: PropTypes.any.isRequired })\n    ),\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./components.css\";\n\nexport class SearchBox extends React.Component {\n    static propTypes = {\n        data: PropTypes.arrayOf(\n            PropTypes.shape({\n                first_name: PropTypes.string,\n                last_name: PropTypes.string,\n            })\n        ).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            filters: \"\",\n            data: this.props.data,\n        };\n    }\n\n    filter(event) {\n        let input = event.target.value;\n        let newData = this.props.data.filter((x) => {\n            for (let key in x) {\n                let v = x[key] && x[key].toString().toLowerCase();\n                if (v && v.indexOf(input.toLowerCase()) !== -1) {\n                    return true;\n                }\n            }\n            return false;\n        });\n        this.setState({\n            filters: input,\n            data: newData,\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        //constructor is only invoked when the component is first created. if data change, need to update on componentWillReceiveProps\n        if (nextProps.data !== this.props.data) {\n            this.setState({ data: nextProps.data });\n        }\n    }\n\n    render() {\n        let applicants = this.state.data;\n        let applicantsList = <div>No Applicants...</div>;\n        if (applicants.length > 0) {\n            applicantsList = (\n                <ul>\n                    {applicants.map((applicant) => (\n                        <li key={applicant.id}>\n                            {applicant.first_name} {applicant.last_name}\n                        </li>\n                    ))}\n                </ul>\n            );\n        }\n\n        return (\n            <div className=\"search-box\">\n                <input\n                    className=\"search\"\n                    type=\"text\"\n                    name=\"\"\n                    value={this.state.filters}\n                    placeholder=\"Search here\"\n                    onChange={this.filter.bind(this)}\n                />\n                {applicantsList}\n            </div>\n        );\n    }\n}\n","export const readFile = (component, loadDataFunc) => {\n    let files = component.files;\n    if (files.length > 0) {\n        const reader = new FileReader();\n        let importFunc = importChoices(files[0].name, loadDataFunc);\n        reader.readAsText(files[0]);\n        reader.onload = (event) => importFunc(event.target.result);\n    }\n    component.value = \"\";\n};\n\nexport const downloadFile = async (route, loadMessage) => {\n    try {\n        const res = await fetch(route);\n        if (res.status === 200) {\n            const blob = await res.blob();\n            let filename = getFilename(res);\n            if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n                window.navigator.msSaveOrOpenBlob(blob, filename); //special case for Edge & IE\n            } else {\n                let url = URL.createObjectURL(blob),\n                    a = document.createElement(\"a\");\n                a.href = url;\n                a.download = filename;\n                a.target = \"_self\"; //required in FF\n                a.style.display = \"none\";\n                document.body.appendChild(a); //required in FF\n                a.click();\n                URL.revokeObjectURL(url);\n                document.body.removeChild(a); //required in FF\n            }\n            loadMessage(optSuccess(true, null));\n        } else {\n            const err = await res.json();\n            loadMessage(optSuccess(false, err));\n        }\n    } catch (err) {\n        loadMessage(optSuccess(false, err));\n    }\n};\n\nconst optSuccess = (success, content) => {\n    return {\n        success: success,\n        content: content,\n    };\n};\n\nconst getFilename = (res) => {\n    try {\n        return res.headers\n            .get(\"Content-Disposition\")\n            .match(/filename=\"(.*)\"/)[1];\n    } catch (err) {\n        return \"Untitled\";\n    }\n};\n\nconst importChoices = (file, loadDataFunc) => {\n    switch (getExtension(file)) {\n        case \".json\":\n            return (data) => {\n                try {\n                    loadDataFunc(optSuccess(true, JSON.parse(data)));\n                } catch (err) {\n                    loadDataFunc(optSuccess(false, err));\n                }\n            };\n        default:\n            return (data) => {\n                loadDataFunc(optSuccess(true, data));\n            };\n    }\n};\n\nconst getExtension = (file) => {\n    let extension = file.match(/\\.\\w+$/g);\n    if (extension.length > 0) return extension[0];\n    else return null;\n};\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Dropdown, DropdownButton, Modal } from \"react-bootstrap\";\nimport { readFile } from \"../libs/fileManager\";\n\n/**\n * Renders an dropdown import button component that imports data from file.\n *\n * The data should be in json format.\n *\n * @export\n * @param {function(list[object])} props.uploadFunc\n */\nexport function ImportButton(props) {\n    let { uploadFunc } = props;\n    const [data, setData] = useState(null); // eslint-disable-line\n    const [dialogContents, setDialogContents] = useState(\"\"); // eslint-disable-line\n    const [dialogOpen, setDialogOpen] = useState(false);\n\n    /**\n     * closes the dialog by setting dialogOpen to false\n     */\n    function handleClose() {\n        setDialogOpen(false);\n    }\n\n    /**\n     * Read the json file content and import the data in it to the backend.\n     *\n     * Implementation details discussed in TAPP meeting on Aug 29:\n     *   - assume frontend data is up to date\n     *   - upload the assignment object\n     *   - if there's an part of inconsistency between the imported data and frontend data\n     *   then apiGET that part of data and re-verify it\n     *\n     * @param {event} e\n     */\n    function importFile(e) {\n        let importClicked = (data) => {\n            // passed in data is of json format\n            console.log(data);\n            throw new Error(\"Not implemented!\");\n\n            /* TODO: \n            * const diffs = getDiffs(data, ...dataFromBackend);\n            * if (diffs) {\n            *     setData(data)\n            *     setDialogContents(diffs);\n            *     setDialogOpen(true);\n            * } else {\n            *     uploadFunc(data)\n            } */\n        };\n\n        readFile(e.target, importClicked);\n    }\n\n    return (\n        <div>\n            <DropdownButton id=\"dropdown-basic-button\" title=\"Import\">\n                <input\n                    id=\"raised-button-file\"\n                    type=\"file\"\n                    accept=\"application/json\"\n                    style={{ display: \"none\" }}\n                    onChange={importFile}\n                />\n                <label htmlFor=\"raised-button-file\">\n                    <Dropdown.Item>Import From File</Dropdown.Item>\n                </label>\n            </DropdownButton>\n\n            <Modal show={dialogOpen} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>The following will be overwritten</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <p>{dialogContents}</p>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Cancel\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => uploadFunc(data)}>\n                        Proceed\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n}\n\nImportButton.propTypes = {\n    uploadFunc: PropTypes.func,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport selectTableHOC from \"react-table/lib/hoc/selectTable\";\n\nimport \"react-table/react-table.css\";\n// This HOC adds a checkbox to every row of a ReactTable\nconst SelectTable = selectTableHOC(ReactTable);\n\nconst COLUMNS = [\n    { Header: \"Last Name\", accessor: \"applicant.last_name\" },\n    { Header: \"First Name\", accessor: \"applicant.first_name\" },\n    { Header: \"Email\", accessor: \"applicant.email\", width: 250 },\n    {\n        Header: \"Student Number\",\n        accessor: \"applicant.student_number\",\n        width: 100,\n    },\n    {\n        Header: \"Position\",\n        accessor: \"position.position_code\",\n        width: 130,\n    },\n    {\n        Header: \"Hours\",\n        accessor: \"hours\",\n        width: 100,\n    },\n    {\n        Header: \"Contract\",\n        accessor: \"position.contract_template.template_name\",\n        width: 100,\n    },\n    {\n        Header: \"First Time?\",\n        accessor: \"applicant.first_time_ta\",\n        Cell: (props) => (\n            <div style={{ backgroundColor: \"red\" }}>\n                {(\"\" + props.value).toUpperCase()}\n            </div>\n        ),\n        width: 100,\n    }, // boolean\n    { Header: \"Status\", accessor: \"status\", width: 100 },\n    { Header: \"Nag Count\", accessor: \"nag_count\", width: 100 },\n];\n\n/**\n * Converts a row of the offer table into a string for omni-searching\n *\n * @param {*} row\n * @returns {string}\n */\nfunction rowToStr(row) {\n    // flatten to a string two levels deep\n    return Object.values(row)\n        .map((x) => (typeof x === \"string\" ? x : Object.values(x).join(\" \")))\n        .join(\" \")\n        .toLowerCase();\n}\n\n/**\n * A filterable offer table. If `selected` and `setSelected` props are provided,\n * rows of this table can be selected.\n *\n * @param {*} props\n * @param {list} props.data - a list of assignments\n * @param {list} props.selected - a list of assignment `id`s that are selected\n * @param {func} props.setSelected - function that is called to set the selected ids\n * @returns\n */\nfunction OfferTable(props) {\n    const { data, selected, setSelected, columns = COLUMNS } = props;\n    // internally we use a more efficient datastructure than a list to keep track of `selected` things.\n    const _selected = new Set(selected);\n    const _setSelected = (_selected) => {\n        // convert `_selected` back to a list before setting it.\n        setSelected([..._selected]);\n    };\n\n    const [filterString, setFilterString] = React.useState(\"\");\n    const [lastSelected, setLastSelected] = React.useState(null);\n    const [allSelected, setAllSelected] = React.useState(false);\n    function isSelected(id) {\n        return _selected.has(id);\n    }\n\n    const filteredData = filterString\n        ? data.filter((row) =>\n              rowToStr(row).includes(filterString.toLowerCase())\n          )\n        : data;\n\n    // we need a reference to the internal table so that we can get the \"visible data\"\n    // if it happens to be filtered or sorted\n    let reactTableRef = React.useRef(null);\n    /**\n     * Gets the data that is actually displayed in the ReactTable. This is useful\n     * for range selecting (shift-cliking should select in the range that is displayed)\n     *\n     * @returns {[object]}\n     */\n    function getDisplayedData() {\n        if (!reactTableRef) {\n            // eslint-disable-next-line\n            console.warn(\n                \"Trying to get data displayed in a ReactTable, but no ref has been created\"\n            );\n            return [];\n        }\n        try {\n            return reactTableRef\n                .getWrappedInstance()\n                .getResolvedState()\n                .sortedData.map((x) => x._original);\n        } catch (e) {\n            return [];\n        }\n    }\n\n    // Every time `selection` changes, compute whether everything visible\n    // is selected\n    React.useEffect(() => {\n        let allSelected = false;\n        const displayedData = getDisplayedData();\n        if (\n            displayedData.length > 0 &&\n            displayedData.every((row) => _selected.has(row.id))\n        ) {\n            allSelected = true;\n        }\n        setAllSelected(allSelected);\n    }, [_selected, filterString]);\n\n    function onToggleRow(ref, shiftOn, row) {\n        // The shift key isn't held. Only select a single item\n        if (!shiftOn) {\n            const newSelectedState = !_selected.has(row.id);\n            const newSelected = new Set(_selected);\n            if (newSelectedState === true) {\n                newSelected.add(row.id);\n                _setSelected(newSelected);\n                setLastSelected(row.id);\n            } else {\n                newSelected.delete(row.id);\n                _setSelected(newSelected);\n                setLastSelected(null);\n            }\n            return;\n        }\n        // The shift key was held, but nothing was \"last clicked\", so we should treat it\n        // as if the shift weren't held\n        if (shiftOn && lastSelected == null) {\n            return onToggleRow(ref, false, row);\n        }\n        // The shift key was held and there was a last selected, so select everything\n        // in the range between the newly clicked row and the last clicked row\n\n        // Get the displayed row data so we don't misselect things.\n        const rowIds = getDisplayedData().map((row) => row.id);\n        const lastSelectedIndex = rowIds.indexOf(lastSelected);\n        if (lastSelectedIndex === -1) {\n            // If the \"last selected\" thing is hidden, we should behave like the no-shift case\n            return onToggleRow(ref, false, row);\n        }\n        const selectedIndex = rowIds.indexOf(row.id);\n        const [start, end] = [\n            Math.min(lastSelectedIndex, selectedIndex),\n            Math.max(lastSelectedIndex, selectedIndex),\n        ];\n\n        _setSelected(\n            new Set([\n                ..._selected,\n                ...rowIds.filter((v, i) => i <= end && i >= start),\n            ])\n        );\n    }\n\n    function onToggleAll() {\n        // If everything is selected, set the selected status to `false`\n        // otherwise, set it to true.\n        const rowIds = getDisplayedData().map((row) => row.id);\n        if (allSelected) {\n            const newSelected = new Set(_selected);\n            for (const id of rowIds) {\n                newSelected.delete(id);\n            }\n            _setSelected(newSelected);\n        } else {\n            _setSelected(new Set([..._selected, ...rowIds]));\n        }\n    }\n\n    let tableComponent = (\n        <SelectTable\n            ref={(r) => (reactTableRef = r)}\n            data={filteredData}\n            columns={columns}\n            toggleSelection={onToggleRow}\n            selectAll={allSelected}\n            toggleAll={onToggleAll}\n            isSelected={isSelected}\n            selectType=\"checkbox\"\n            keyField=\"id\"\n            minRows={1}\n            showPagination={false}\n        />\n    );\n    // if `selected` was not passed in, the table rows should not be selectable\n    if (selected == null) {\n        tableComponent = <ReactTable columns={columns} data={filteredData} />;\n    }\n    return (\n        <div>\n            Filter:{\" \"}\n            <input\n                type=\"text\"\n                onChange={(e) => setFilterString(e.target.value)}\n            />\n            {tableComponent}\n        </div>\n    );\n}\nOfferTable.propTypes = {\n    selected: PropTypes.array,\n    setSelected: PropTypes.func,\n    data: PropTypes.array.isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({\n            Header: PropTypes.string,\n            accessor: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n        })\n    ),\n};\n\nexport { OfferTable };\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    assignmentsSelector,\n    upsertApplicant,\n    upsertAssignment,\n} from \"../../api/actions\";\nimport { OfferTable } from \"../../components/offer-table\";\nimport { EditableField } from \"../../components/edit-field-widgets\";\nimport { offerTableSelector, setSelectedRows } from \"./actions\";\n\nfunction capitalize(word = \"\") {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n}\n\n/**\n * A cell that renders editable applicant information\n *\n * @param {*} props\n * @returns\n */\nfunction ApplicantCell(props) {\n    const title = `Edit ${props.column.Header}`;\n    const { upsertApplicant, field } = props;\n    function onChange(newVal) {\n        const applicantId = props.original.applicant.id;\n        upsertApplicant({ id: applicantId, [field]: newVal });\n    }\n    return (\n        <EditableField\n            title={title}\n            value={props.value || \"\"}\n            onChange={onChange}\n        >\n            {props.value}\n        </EditableField>\n    );\n}\n\n/**\n * A cell that renders editable assignment information\n *\n * @param {*} props\n * @returns\n */\nfunction AssignmentCell(props) {\n    const title = `Edit ${props.column.Header}`;\n    const { upsertAssignment, field } = props;\n    const active_offer_status = props.original.active_offer_status;\n    function onChange(newVal) {\n        const applicationId = props.original.id;\n        upsertAssignment({ id: applicationId, [field]: newVal });\n    }\n    return (\n        <EditableField\n            title={title}\n            value={props.value || \"\"}\n            onChange={onChange}\n            editable={!active_offer_status}\n        >\n            {props.value}\n        </EditableField>\n    );\n}\n\nfunction EditableOfferTable(props) {\n    const { upsertApplicant, upsertAssignment, ...rest } = props;\n\n    // Bind an `ApplicantCell` to a particular field\n    function generateApplicantCell(field) {\n        return (props) => (\n            <ApplicantCell\n                field={field}\n                upsertApplicant={upsertApplicant}\n                {...props}\n            />\n        );\n    }\n\n    // Bind an `AssignmentCell` to a particular field\n    function generateAssignmentCell(field) {\n        return (props) => (\n            <AssignmentCell\n                field={field}\n                upsertAssignment={upsertAssignment}\n                {...props}\n            />\n        );\n    }\n\n    const columns = [\n        {\n            Header: \"Last Name\",\n            accessor: \"applicant.last_name\",\n            Cell: generateApplicantCell(\"last_name\"),\n        },\n        {\n            Header: \"First Name\",\n            accessor: \"applicant.first_name\",\n            Cell: generateApplicantCell(\"first_name\"),\n        },\n        {\n            Header: \"Email\",\n            accessor: \"applicant.email\",\n            Cell: generateApplicantCell(\"email\"),\n        },\n        {\n            Header: \"Position\",\n            accessor: \"position.position_code\",\n        },\n        {\n            Header: \"Hours\",\n            accessor: \"hours\",\n            Cell: generateAssignmentCell(\"hours\"),\n        },\n        {\n            Header: \"Status\",\n            id: \"status\",\n            accessor: (data) => capitalize(data.active_offer_status || \"\"),\n        },\n    ];\n\n    return <OfferTable columns={columns} {...rest} />;\n}\n\n/**\n * OfferTable that has been connected to the redux store\n * for live updates and editability.\n */\nexport const ConnectedOfferTable = connect(\n    (state) => ({\n        data: assignmentsSelector(state),\n        selected: offerTableSelector(state).selectedAssignmentIds,\n    }),\n    { upsertApplicant, upsertAssignment, setSelected: setSelectedRows }\n)(EditableOfferTable);\n","export const SET_SELECTED_ROWS = \"SET_SELECTED_ROWS\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-bootstrap\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead-bs4.css\";\nimport { docApiPropTypes } from \"../../api/defs/doc-generation\";\nimport { fieldEditorFactory, DialogRow } from \"./common-controls\";\n\nconst DEFAULT_POSITION = {\n    position_code: \"\",\n    position_title: \"\",\n    hours_per_assignment: 0,\n    contract_template: {},\n    duties:\n        \"Some combination of marking, invigilating, tutorials, office hours, and the help centre.\",\n    instructors: [],\n};\n\n/**\n * Edit information about a position\n *\n * @export\n * @param {{position: object, instructors: object[]}} props\n * @returns\n */\nexport function PositionEditor(props) {\n    const {\n        position: positionProp,\n        setPosition,\n        instructors = [],\n        contractTemplates = [],\n        defaultContractTemplate = {},\n    } = props;\n    const position = { ...DEFAULT_POSITION, ...positionProp };\n\n    /**\n     * Set `position.instructors` to the specified list.\n     *\n     * @param {*} instructors\n     */\n    function setInstructors(instructors) {\n        setPosition({ ...position, instructors });\n    }\n\n    /**\n     * Set `position.contract_template` to the most recently selected item\n     *\n     * @param {*} selectedContractTypes\n     */\n    function setContractType(selectedContractTypes) {\n        const contract_template =\n            selectedContractTypes[selectedContractTypes.length - 1] ||\n            defaultContractTemplate;\n        setPosition({ ...position, contract_template });\n    }\n\n    const createFieldEditor = fieldEditorFactory(position, setPosition);\n\n    return (\n        <Form>\n            <DialogRow>\n                {createFieldEditor(\n                    \"Course Code (e.g. MAT135H1F)\",\n                    \"position_code\"\n                )}\n                {createFieldEditor(\"Course Title\", \"position_title\")}\n            </DialogRow>\n            <DialogRow>\n                {createFieldEditor(\"Start Date\", \"start_date\", \"date\")}\n                {createFieldEditor(\"End Date\", \"end_date\", \"date\")}\n                {createFieldEditor(\n                    \"Hours per Assignment\",\n                    \"hours_per_assignment\",\n                    \"number\"\n                )}\n            </DialogRow>\n            <Form.Group>\n                <Form.Label>Instructors</Form.Label>\n                <Typeahead\n                    id=\"instructors-input\"\n                    ignoreDiacritics={true}\n                    multiple\n                    placeholder=\"Instructors...\"\n                    labelKey={(option) =>\n                        `${option.first_name} ${option.last_name}`\n                    }\n                    selected={position.instructors}\n                    options={instructors}\n                    onChange={setInstructors}\n                />\n            </Form.Group>\n            <Form.Group>\n                <Form.Label>\n                    Contract Template (which offer template will be used)\n                </Form.Label>\n                <Typeahead\n                    id=\"instructors-input\"\n                    ignoreDiacritics={true}\n                    multiple\n                    placeholder=\"Contract template...\"\n                    labelKey={(option) => `${option.template_name}`}\n                    selected={[position.contract_template]}\n                    options={contractTemplates}\n                    onChange={setContractType}\n                />\n            </Form.Group>\n            <h3>Ad-related Info</h3>\n            <DialogRow>{createFieldEditor(\"Duties\", \"duties\")}</DialogRow>\n            <DialogRow>\n                {createFieldEditor(\"Qualifications\", \"qualifications\")}\n            </DialogRow>\n            <h3>Admin Info</h3>\n            <DialogRow>\n                {createFieldEditor(\n                    \"Current Enrollment\",\n                    \"current_enrollment\",\n                    \"number\"\n                )}\n                {createFieldEditor(\n                    \"Waitlisted\",\n                    \"current_waitlisted\",\n                    \"number\"\n                )}\n                {createFieldEditor(\n                    \"Desired Number of Assignments\",\n                    \"desired_num_assignments\",\n                    \"number\"\n                )}\n            </DialogRow>\n        </Form>\n    );\n}\nPositionEditor.propTypes = {\n    position: docApiPropTypes.position.isRequired,\n    setPosition: PropTypes.func.isRequired,\n    instructors: PropTypes.arrayOf(docApiPropTypes.instructor),\n    defaultContractTemplate: docApiPropTypes.contractTemplate,\n    contractTemplates: PropTypes.arrayOf(docApiPropTypes.contractTemplate),\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-bootstrap\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead-bs4.css\";\nimport { docApiPropTypes } from \"../../api/defs/doc-generation\";\nimport { fieldEditorFactory, DialogRow } from \"./common-controls\";\n\nconst DEFAULT_ASSIGNMENT = {\n    note: \"\",\n    position: { id: null },\n    position_id: null,\n    applicant: { id: null },\n    applicant_id: null,\n};\n\n/**\n * Edit information about a position\n *\n * @export\n * @param {{position: object, instructors: object[]}} props\n * @returns\n */\nexport function AssignmentEditor(props) {\n    const {\n        assignment: assignmentProp,\n        setAssignment,\n        applicants,\n        positions,\n    } = props;\n    const assignment = { ...DEFAULT_ASSIGNMENT, ...assignmentProp };\n\n    // update the selected position; this comes with side effects\n    function setPosition(positions) {\n        const position = positions[positions.length - 1] || { id: null };\n        setAssignment({\n            ...assignment,\n            position,\n            position_id: position.id,\n            hours: position.hours_per_assignment,\n            start_date: position.start_date,\n            end_date: position.end_date,\n        });\n    }\n\n    // update the selected applicant\n    function setApplicant(applicants) {\n        const applicant = applicants[applicants.length - 1] || { id: null };\n        setAssignment({\n            ...assignment,\n            applicant,\n            applicant_id: applicant.id,\n        });\n    }\n\n    const createFieldEditor = fieldEditorFactory(assignment, setAssignment);\n\n    return (\n        <Form>\n            <DialogRow>\n                <React.Fragment>\n                    <Form.Label>Position</Form.Label>\n                    <Typeahead\n                        id=\"position-input\"\n                        ignoreDiacritics={true}\n                        placeholder=\"Position...\"\n                        multiple\n                        labelKey={(option) =>\n                            `${option.position_code} (${option.position_title})`\n                        }\n                        selected={\n                            assignment.position.id == null\n                                ? []\n                                : [assignment.position]\n                        }\n                        options={positions}\n                        onChange={setPosition}\n                    />\n                </React.Fragment>\n                <React.Fragment>\n                    <Form.Label>Applicant</Form.Label>\n                    <Typeahead\n                        id=\"applicant-input\"\n                        ignoreDiacritics={true}\n                        placeholder=\"Applicant...\"\n                        multiple\n                        labelKey={(option) =>\n                            `${option.first_name} ${option.last_name}`\n                        }\n                        selected={\n                            assignment.applicant.id == null\n                                ? []\n                                : [assignment.applicant]\n                        }\n                        options={applicants}\n                        onChange={setApplicant}\n                    />\n                </React.Fragment>\n            </DialogRow>\n            <DialogRow>\n                {createFieldEditor(\"Hours\", \"hours\", \"number\")}\n            </DialogRow>\n\n            <h4>Optional Settings</h4>\n            <DialogRow>\n                {createFieldEditor(\"Start Date\", \"start_date\", \"date\")}\n                {createFieldEditor(\"End Date\", \"end_date\", \"date\")}\n            </DialogRow>\n        </Form>\n    );\n}\nAssignmentEditor.propTypes = {\n    assignment: docApiPropTypes.assignment.isRequired,\n    setAssignment: PropTypes.func.isRequired,\n    positions: PropTypes.arrayOf(docApiPropTypes.position),\n    applicants: PropTypes.arrayOf(docApiPropTypes.applicant),\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-bootstrap\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead-bs4.css\";\nimport { docApiPropTypes } from \"../../api/defs/doc-generation\";\nimport { fieldEditorFactory, DialogRow } from \"./common-controls\";\n\nconst DEFAULT_CONTRACT_TEMPLATE = {\n    template_name: \"\",\n    template_file: \"\",\n};\n\n/**\n * Edit information about a contract_template\n *\n * @export\n * @param {{contractTemplate: object, availableTemplates: object[], setContractTemplate: function}} props\n * @returns\n */\nexport function ContractTemplateEditor(props) {\n    const {\n        contractTemplate: contractTemplateProp,\n        setContractTemplate,\n        availableTemplates = [],\n    } = props;\n    const contractTemplate = {\n        ...DEFAULT_CONTRACT_TEMPLATE,\n        ...contractTemplateProp,\n    };\n\n    // update the selected template_file; this comes with side effects\n    function setTemplateFile(templates) {\n        const templateFile = templates[templates.length - 1] || \"\";\n        setContractTemplate({\n            ...contractTemplate,\n            template_file: templateFile,\n        });\n    }\n\n    const createFieldEditor = fieldEditorFactory(\n        contractTemplate,\n        setContractTemplate\n    );\n\n    return (\n        <Form>\n            <DialogRow>\n                {createFieldEditor(\n                    'Template Name (e.g. \"OTO\" \"Invigilate\")',\n                    \"template_name\"\n                )}\n            </DialogRow>\n            <DialogRow>\n                <React.Fragment>\n                    <Form.Label title=\"This file is stored on the server; you can edit it there.\">\n                        Template File\n                    </Form.Label>\n                    <Typeahead\n                        id=\"file-name-input\"\n                        ignoreDiacritics={true}\n                        placeholder=\"File name...\"\n                        multiple\n                        labelKey={(option) => `${option}`}\n                        selected={\n                            !contractTemplate.template_file\n                                ? []\n                                : [contractTemplate.template_file]\n                        }\n                        options={availableTemplates.map((x) => x.template_file)}\n                        onChange={setTemplateFile}\n                    />\n                </React.Fragment>\n            </DialogRow>\n        </Form>\n    );\n}\nContractTemplateEditor.propTypes = {\n    contractTemplate: docApiPropTypes.contractTemplate.isRequired,\n    setContractTemplate: PropTypes.func.isRequired,\n    availableTemplates: PropTypes.arrayOf(\n        docApiPropTypes.contractTemplateMinimal\n    ),\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n    contractTemplatesSelector,\n    instructorsSelector,\n    positionsSelector,\n    assignmentsSelector,\n    applicantsSelector,\n} from \"../../api/actions\";\nimport { offerTableSelector } from \"../offertable/actions\";\nimport { SessionEditor } from \"../../components/forms/session-editor\";\nimport { ApplicantsList } from \"../../components/applicants-list\";\nimport { ContractTemplatesList } from \"../../components/contract-templates-list\";\nimport { ConnectedInstructorsList } from \"../instructors\";\nimport { PositionsList } from \"../../components/positions-list\";\nimport { AssignmentsList } from \"../../components/assignments-list\";\nimport { SearchBox } from \"../../components/search-box\";\nimport { EmailButton } from \"../../components/email-button\";\nimport { ImportButton } from \"../../components/import-button\";\nimport { EditableField } from \"../../components/edit-field-widgets\";\nimport { ConnectedOfferTable } from \"../offertable\";\nimport { PositionEditor } from \"../../components/forms/position-editor\";\nimport { InstructorEditor } from \"../../components/instructors\";\nimport { AssignmentEditor } from \"../../components/forms/assignment-editor\";\nimport { ContractTemplateEditor } from \"../../components/forms/contract-template-editor\";\n\nconst ConnectedApplicantList = connect((state) => ({\n    applicants: applicantsSelector(state),\n}))(ApplicantsList);\n\nconst ConnectedContractTemplatesList = connect((state) => ({\n    contractTemplates: contractTemplatesSelector(state),\n}))(ContractTemplatesList);\n\nconst ConnectedPositionsList = connect((state) => ({\n    positions: positionsSelector(state),\n}))(PositionsList);\n\nconst ConnectedAssignmentsList = connect((state) => ({\n    assignments: assignmentsSelector(state),\n}))(AssignmentsList);\n\nconst ConnectedSearchBox = connect((state) => ({\n    data: applicantsSelector(state),\n}))(SearchBox);\n\nconst ConnectedEmailButton = connect((state) => ({\n    data: offerTableSelector(state).selectedAssignmentIds,\n}))(EmailButton);\n\nconst ConnectedPositionEditor = connect((state) => ({\n    instructors: instructorsSelector(state),\n}))(PositionEditor);\n\nconst ConnectedAssignmentEditor = connect((state) => ({\n    positions: positionsSelector(state),\n    applicants: applicantsSelector(state),\n}))(AssignmentEditor);\n\n/**\n * Encapsulate a react component in a frame.\n *\n * @param {object} props\n * @param {string} props.title The name of the component encapsulated\n */\nfunction DashboardWidget(props) {\n    const { children, title } = props;\n    return (\n        <div style={{ margin: 5 }}>\n            <h5>\n                The{\" \"}\n                <span style={{ color: \"green\", fontFamily: \"mono\" }}>\n                    {title}\n                </span>{\" \"}\n                Component\n            </h5>\n            <div style={{ border: \"1px solid black\", padding: 5 }}>\n                {children}\n            </div>\n        </div>\n    );\n}\n\n/**\n * A dashboard containing a sample of all the widgets connected\n * appropriately to the redux store.\n *\n */\nfunction Dashboard() {\n    const [assignment, setAssignment] = React.useState({\n        position_id: 0,\n        applicant_id: 0,\n    });\n    const [position, setPosition] = React.useState({ position_code: \"\" });\n    const [instructor, setInstructor] = React.useState({\n        last_name: \"Baggins\",\n        first_name: \"Bilbo\",\n        utorid: \"bilbob\",\n    });\n    const [session, setSession] = React.useState({ name: \"\" });\n    const [contractTemplate, setContractTemplate] = React.useState({});\n    return (\n        <div>\n            <DashboardWidget title=\"ContractTemplateEditor\">\n                <ContractTemplateEditor\n                    contractTemplate={contractTemplate}\n                    setContractTemplate={setContractTemplate}\n                    availableTemplates={[\n                        { template_file: \"/math/OTO.html\" },\n                        { template_file: \"/cs/invigilate.html\" },\n                    ]}\n                />\n            </DashboardWidget>\n            <DashboardWidget title=\"AssignmentEditor\">\n                <ConnectedAssignmentEditor\n                    assignment={assignment}\n                    setAssignment={setAssignment}\n                />\n            </DashboardWidget>\n            <DashboardWidget title=\"SessionEditor\">\n                <SessionEditor session={session} setSession={setSession} />\n            </DashboardWidget>\n            <DashboardWidget title=\"InstructorEditor\">\n                <InstructorEditor\n                    instructor={instructor}\n                    setInstructor={setInstructor}\n                />\n            </DashboardWidget>\n            <DashboardWidget title=\"PositionEditor\">\n                <ConnectedPositionEditor\n                    position={position}\n                    setPosition={setPosition}\n                />\n            </DashboardWidget>\n            <DashboardWidget title=\"EditableField\">\n                <EditableField\n                    title=\"Edit this super awesome content\"\n                    value={45}\n                    onChange={console.log}\n                >\n                    Edit me!\n                </EditableField>\n            </DashboardWidget>\n            <DashboardWidget title=\"ApplicantsList\">\n                <ConnectedApplicantList />\n            </DashboardWidget>\n            <DashboardWidget title=\"PostitionTemplatesList\">\n                <ConnectedContractTemplatesList />\n            </DashboardWidget>\n            <DashboardWidget title=\"InstuctorsList\">\n                <ConnectedInstructorsList />\n            </DashboardWidget>\n            <DashboardWidget title=\"PositionsList\">\n                <ConnectedPositionsList />\n            </DashboardWidget>\n            <DashboardWidget title=\"AssignmentsList\">\n                <ConnectedAssignmentsList />\n            </DashboardWidget>\n            <DashboardWidget title=\"SearchBox\">\n                <ConnectedSearchBox />\n            </DashboardWidget>\n            <DashboardWidget title=\"ImportButton\">\n                <ImportButton />\n            </DashboardWidget>\n            <DashboardWidget title=\"EmailButton\">\n                <ConnectedEmailButton />\n            </DashboardWidget>\n            <DashboardWidget title=\"OfferTable\">\n                <ConnectedOfferTable />\n            </DashboardWidget>\n        </div>\n    );\n}\n\nexport default Dashboard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction AssignmentsList(props) {\n    const { assignments } = props;\n    let assignmentsList = <div>No assignments...</div>;\n    if (assignments.length > 0) {\n        assignmentsList = (\n            <ul>\n                {assignments.map((assignment) => (\n                    <li key={assignment.id}>\n                        {assignment.position.position_code} ({assignment.hours}{\" \"}\n                        hours): {assignment.applicant.first_name}{\" \"}\n                        {assignment.applicant.last_name}\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n    return (\n        <div>\n            <h3>Available Assignments</h3>\n            {assignmentsList}\n        </div>\n    );\n}\nAssignmentsList.propTypes = {\n    assignments: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number,\n            position: PropTypes.object,\n            applicant: PropTypes.object,\n        })\n    ).isRequired,\n};\n\nexport { AssignmentsList };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\n\n/**\n * Renders an dropdown email button\n *\n * The data is a list of ids to be emailed by the backend.\n *\n * @export\n * @param {list[object]} props.data\n */\nexport function EmailButton(props) {\n    let { data } = props;\n\n    /**\n     * Email to the applicants (using ids) by invoking email service provided by the backend\n     */\n    function emailHandler() {\n        console.log(\"data read from redux: \" + data);\n        throw new Error(\"Email function not implemented!\");\n    }\n\n    /**\n     * Email contract to the applicants (using ids) by invoking email service provided by the backend\n     */\n    function emailContract() {\n        throw new Error(\"Email contract not implemented!\");\n    }\n\n    /**\n     * Nag offers to the applicants (using ids) by invoking email service provided by the backend\n     */\n    function nagOffers() {\n        throw new Error(\"Nag offer function not implemented!\");\n    }\n\n    return (\n        <DropdownButton id=\"dropdown-basic-button\" title=\"Email\">\n            <Dropdown.Item onClick={() => emailHandler()}>\n                Email Blank\n            </Dropdown.Item>\n            <Dropdown.Item onClick={() => emailContract()}>\n                Email Contract\n            </Dropdown.Item>\n            <Dropdown.Item onClick={() => nagOffers()}>\n                Nag Offers\n            </Dropdown.Item>\n        </DropdownButton>\n    );\n}\n\nEmailButton.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.any),\n};\n","import React from \"react\";\nimport { PositionsList } from \"../../components/positions-list\";\nimport { FilteredList } from \"../../components/filtered-list\";\nimport { connect } from \"react-redux\";\nimport { positionsSelector } from \"../../api/actions\";\n\nconst ConnectedFilteredList = connect((state, ownProps) => ({\n    positions: positionsSelector(state),\n    listRenderer: ownProps.listRenderer,\n}))(FilteredList);\n\nfunction ControlPanel() {\n    // dummy filter function\n    const filter = (data, query) => {\n        if (!query) {\n            return data;\n        }\n        return data;\n    };\n\n    return (\n        <div>\n            <ConnectedFilteredList\n                listRenderer={PositionsList}\n                filterFunc={filter}\n            />\n        </div>\n    );\n}\n\nexport default ControlPanel;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Renders a component that filters and renders a list of objects.\n *\n * The data is filtered based on the filter prop function, which takes\n * as input the data and the query from the search box.\n *\n * The filtered data is rendered using the listRenderer prop.\n *\n * @export\n * @param {list[object]} props.data\n * @param {component} props.listRenderer\n * @param {function(list[object], string): list[object]} props.filterFunc\n */\nexport function FilteredList(props) {\n    const { data, listRenderer, filterFunc, ...rest } = props;\n    const Renderer = listRenderer;\n    const [query, setQuery] = useState(\"\");\n\n    let filteredData = filterFunc(data, query);\n\n    return (\n        <div>\n            <input\n                type=\"text\"\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n            />\n            <Renderer data={filteredData} {...rest} />\n        </div>\n    );\n}\n\nFilteredList.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.any),\n    listRenderer: PropTypes.elementType,\n    filterFunc: PropTypes.func,\n};\n","import React from \"react\";\nimport { strip } from \"../../libs/utils\";\nimport { connect } from \"react-redux\";\nimport { SessionEditor } from \"../../components/forms/session-editor\";\nimport { upsertSession, sessionsSelector } from \"../../api/actions\";\nimport { Modal, Button, Alert } from \"react-bootstrap\";\n\nfunction getConficts(session, sessions = []) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (\n        !strip(session.name) ||\n        !strip(session.start_date) ||\n        !strip(session.end_date)\n    ) {\n        ret.delayShow = \"A first name, start date, and end date is required\";\n    }\n    const matchingSession = sessions.find(\n        (x) => strip(x.name) === strip(session.name)\n    );\n    if (matchingSession) {\n        ret.immediateShow = (\n            <p>Another session exists with name={session.name}</p>\n        );\n    }\n    return ret;\n}\n\nconst BLANK_SESSION = {\n    name: \"\",\n    start_date: \"\",\n    end_date: \"\",\n    rate1: \"\",\n    rate2: \"\",\n};\n\nexport function AddSessionDialog(props) {\n    const { show, onHide = () => {}, sessions, upsertSession } = props;\n    const [newSession, setNewSession] = React.useState(BLANK_SESSION);\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewSession(BLANK_SESSION);\n        }\n    }, [show]);\n\n    function createInstructor() {\n        upsertSession(newSession);\n        onHide();\n    }\n\n    const conflicts = getConficts(newSession, sessions);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Session</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <SessionEditor\n                    session={newSession}\n                    setSession={setNewSession}\n                />\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createInstructor}\n                    title={conflicts.delayShow || \"Create Session\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Session\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport const ConnectedAddSessionDialog = connect(\n    (state) => ({ sessions: sessionsSelector(state) }),\n    { upsertSession }\n)(AddSessionDialog);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactTable from \"react-table\";\nimport { docApiPropTypes } from \"../api/defs/doc-generation\";\n\nconst DEFAULT_COLUMNS = [\n    { Header: \"Name\", accessor: \"name\" },\n    { Header: \"Start\", accessor: \"start_date\" },\n    { Header: \"End\", accessor: \"end_date\" },\n    { Header: \"Rate (Pre-January)\", accessor: \"rate1\" },\n    { Header: \"Rate (Post-January)\", accessor: \"rate2\" },\n];\n\n/**\n * List the sessions using a ReactTable. `columns` can be passed\n * in to customize columns/cell renderers.\n *\n * @export\n * @param {{sessions: object[], columns: object[]}} props\n * @returns\n */\nexport function SessionsList(props) {\n    const { sessions, columns = DEFAULT_COLUMNS } = props;\n    return (\n        <React.Fragment>\n            <h3>Sessions</h3>\n            <ReactTable\n                data={sessions}\n                columns={columns}\n                showPagination={false}\n                minRows={1}\n            />\n        </React.Fragment>\n    );\n}\nSessionsList.propTypes = {\n    sessions: PropTypes.arrayOf(docApiPropTypes.session).isRequired,\n    columns: PropTypes.arrayOf(\n        PropTypes.shape({ Header: PropTypes.any.isRequired })\n    ),\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { ConnectedAddSessionDialog } from \"./add-session-dialog\";\nimport { Button } from \"react-bootstrap\";\nimport { sessionsSelector } from \"../../api/actions\";\nimport { SessionsList } from \"../../components/sessions\";\n\nconst ConnectedSessionList = connect((state) => ({\n    sessions: sessionsSelector(state),\n}))(SessionsList);\n\nexport function AdminSessionsView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div>\n            <Button\n                onClick={() => {\n                    setAddDialogVisible(true);\n                }}\n            >\n                Add Session\n            </Button>\n            <ConnectedAddSessionDialog\n                show={addDialogVisible}\n                onHide={() => {\n                    setAddDialogVisible(false);\n                }}\n            />\n            <ConnectedSessionList />\n        </div>\n    );\n}\n\nexport { ConnectedAddSessionDialog };\n","import React from \"react\";\nimport { strip } from \"../../libs/utils\";\nimport { connect } from \"react-redux\";\nimport {\n    upsertPosition,\n    positionsSelector,\n    instructorsSelector,\n    contractTemplatesSelector,\n} from \"../../api/actions\";\nimport { Modal, Button, Alert } from \"react-bootstrap\";\nimport { PositionEditor } from \"../../components/forms/position-editor\";\n\nfunction getConficts(position, positions = []) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (\n        !strip(position.position_code) ||\n        !strip(position.start_date) ||\n        !strip(position.end_date)\n    ) {\n        ret.delayShow = \"A position code, start date, and end date is required\";\n    }\n    const matchingSession = positions.find(\n        (x) => strip(x.position_code) === strip(position.position_code)\n    );\n    if (matchingSession) {\n        ret.immediateShow = (\n            <p>Another position exists with name={position.position_code}</p>\n        );\n    }\n    return ret;\n}\n\nconst BLANK_POSITION = {\n    position_code: \"\",\n    position_title: \"\",\n    hours_per_assignment: 0,\n    contract_template_id: null,\n    duties:\n        \"Some combination of marking, invigilating, tutorials, office hours, and the help centre.\",\n    instructors: [],\n};\n\nexport function AddPositionDialog(props) {\n    const {\n        show,\n        onHide = () => {},\n        positions,\n        upsertPosition,\n        instructors,\n        contractTemplates,\n    } = props;\n    const [newPosition, setNewPosition] = React.useState(BLANK_POSITION);\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewPosition(BLANK_POSITION);\n        }\n    }, [show]);\n\n    // select a suitable default for the contract template\n    React.useEffect(() => {\n        // Look for a contract template whose name is \"standard\" or \"default\";\n        // If that fails, find one whose name contains \"standard\" or \"default\";\n        // If all else fails, pick the first template in the list\n        const defaultTemplate =\n            contractTemplates.find(\n                (x) => x.template_name.toLowerCase() === \"standard\"\n            ) ||\n            contractTemplates.find(\n                (x) => x.template_name.toLowerCase() === \"default\"\n            ) ||\n            contractTemplates.find((x) =>\n                x.template_name.toLowerCase().includes(\"standard\")\n            ) ||\n            contractTemplates.find((x) =>\n                x.template_name.toLowerCase().includes(\"default\")\n            ) ||\n            contractTemplates[0];\n        if (defaultTemplate) {\n            BLANK_POSITION.contract_template = defaultTemplate;\n            BLANK_POSITION.contract_template_id = defaultTemplate.id;\n        }\n    }, [contractTemplates]);\n\n    function createPosition() {\n        upsertPosition(newPosition);\n        onHide();\n    }\n\n    const conflicts = getConficts(newPosition, positions);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Position</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <PositionEditor\n                    position={newPosition}\n                    setPosition={setNewPosition}\n                    instructors={instructors}\n                    contractTemplates={contractTemplates}\n                    defaultContractTemplate={BLANK_POSITION.contract_template}\n                />\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createPosition}\n                    title={conflicts.delayShow || \"Create Position\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Position\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport const ConnectedAddPositionDialog = connect(\n    (state) => ({\n        positions: positionsSelector(state),\n        instructors: instructorsSelector(state),\n        contractTemplates: contractTemplatesSelector(state),\n    }),\n    { upsertPosition }\n)(AddPositionDialog);\n","import { connect } from \"react-redux\";\nimport { positionsSelector } from \"../../api/actions\";\nimport { PositionsList } from \"../../components/positions-list\";\n\nexport const ConnectedPositionsList = connect((state) => ({\n    positions: positionsSelector(state),\n}))(PositionsList);\n","import React from \"react\";\nimport { ConnectedAddPositionDialog } from \"./add-position-dialog\";\nimport { Button } from \"react-bootstrap\";\nimport { ConnectedPositionsList } from \"./position-list\";\n\nexport function AdminPositionsView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div>\n            <Button\n                onClick={() => {\n                    setAddDialogVisible(true);\n                }}\n            >\n                Add Position\n            </Button>\n            <ConnectedAddPositionDialog\n                show={addDialogVisible}\n                onHide={() => {\n                    setAddDialogVisible(false);\n                }}\n            />\n            <ConnectedPositionsList />\n        </div>\n    );\n}\n\nexport { ConnectedAddPositionDialog, ConnectedPositionsList };\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal, Alert, Button } from \"react-bootstrap\";\nimport { strip } from \"../../libs/utils\";\nimport {\n    positionsSelector,\n    applicantsSelector,\n    assignmentsSelector,\n    upsertAssignment,\n} from \"../../api/actions\";\nimport { AssignmentEditor } from \"../../components/forms/assignment-editor\";\n\nfunction getConficts(assignment, assignments = []) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (!strip(assignment.position_id) || !strip(assignment.applicant_id)) {\n        ret.delayShow = \"A position and applicant is required\";\n    }\n    const matchingAssignment = assignments.find(\n        (x) =>\n            strip((x.position || {}).id) ===\n                strip((assignment.position || {}).id) &&\n            strip((x.applicant || {}).id) ===\n                strip((assignment.applicant || {}).id)\n    );\n    if (matchingAssignment) {\n        ret.immediateShow = (\n            <p>\n                Another assignment exists with{\" \"}\n                <b>\n                    applicant={assignment.applicant.first_name}{\" \"}\n                    {assignment.applicant.last_name}\n                </b>{\" \"}\n                and <b>position={assignment.position.position_code}</b>\n            </p>\n        );\n    }\n    return ret;\n}\n\nconst BLANK_ASSIGNMENT = {\n    position: { id: null },\n    applicant: { id: null },\n    position_id: -1,\n    applicant_id: -1,\n};\n\nexport function AddAssignmentDialog(props) {\n    const {\n        show,\n        onHide,\n        positions,\n        applicants,\n        assignments,\n        upsertAssignment,\n    } = props;\n    const [newAssignment, setNewAssignment] = React.useState(BLANK_ASSIGNMENT);\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewAssignment(BLANK_ASSIGNMENT);\n        }\n    }, [show]);\n\n    function createAssignment() {\n        upsertAssignment(newAssignment);\n        onHide();\n    }\n\n    const conflicts = getConficts(newAssignment, assignments);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Assignment</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <AssignmentEditor\n                    positions={positions}\n                    applicants={applicants}\n                    assignment={newAssignment}\n                    setAssignment={setNewAssignment}\n                />\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createAssignment}\n                    title={conflicts.delayShow || \"Create Position\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Assignment\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport const ConnectedAddAssignmentDialog = connect(\n    (state) => ({\n        positions: positionsSelector(state),\n        applicants: applicantsSelector(state),\n        assignments: assignmentsSelector(state),\n    }),\n    { upsertAssignment }\n)(AddAssignmentDialog);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\nimport { offerTableSelector } from \"../offertable/actions\";\nimport {\n    assignmentsSelector,\n    wageChunksByAssignmentSelector,\n    fetchWageChunksForAssignment,\n    upsertWageChunksForAssignment,\n} from \"../../api/actions\";\nimport { EditableField } from \"../../components/edit-field-widgets\";\nfunction AssignmentDetails(props) {\n    const {\n        assignment,\n        wageChunksByAssignment,\n        fetchWageChunksForAssignment,\n        upsertWageChunksForAssignment,\n    } = props;\n    const [wageChunks, setWageChunks] = React.useState([]);\n    React.useEffect(() => {\n        // When the widget loads or the assignment changes, fetch data once.\n        fetchWageChunksForAssignment(assignment);\n        // We are purposely not including fetchWageChunksForAssignment in the dependency list to avoid an infite loop\n        // eslint-disable-next-line\n    }, [assignment]);\n    React.useEffect(() => {\n        // Whenever wage chunk data has changed, we need to rerender\n        setWageChunks(wageChunksByAssignment(assignment));\n    }, [assignment, wageChunksByAssignment, fetchWageChunksForAssignment]);\n    /**\n     * Creates an onChange handler for the hours field of wage chunk i\n     *\n     * @param {number} i\n     */\n    function changeHoursFactory(i) {\n        return function (hours) {\n            const newWageChunks = wageChunks.map((chunk, j) => {\n                if (i !== j) {\n                    return chunk;\n                }\n                // Update the hours for the specified chunk\n                return { ...chunk, hours: +hours };\n            });\n            upsertWageChunksForAssignment(assignment, newWageChunks);\n        };\n    }\n    return (\n        <div>\n            <h5>\n                {assignment.applicant.first_name}{\" \"}\n                {assignment.applicant.last_name}\n            </h5>\n            <div>\n                {assignment.position.position_code}{\" \"}\n                {assignment.position.position_name}\n            </div>\n            <div>{assignment.hours} hours</div>\n            Wage Chunks:\n            <ul>\n                {wageChunks.map((chunk, i) => (\n                    <li key={i}>\n                        <EditableField\n                            title=\"Hours\"\n                            value={chunk.hours}\n                            onChange={changeHoursFactory(i)}\n                        >\n                            {chunk.hours}\n                        </EditableField>{\" \"}\n                        hours at a rate of ${chunk.rate} from {chunk.start_date}{\" \"}\n                        to {chunk.end_date}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nconst ConnectedAssignmentDetails = connect(\n    (state) => ({\n        wageChunksByAssignment: wageChunksByAssignmentSelector(state),\n    }),\n    { fetchWageChunksForAssignment, upsertWageChunksForAssignment }\n)(AssignmentDetails);\nfunction ViewAssignmentDetailsButton(props) {\n    // Which assignments are selected could change with further UI interaction.\n    // So we store a copy of the assignments list as `visibleAssignments` when\n    // the view button is clicked\n    const selectedAssignments = props.assignments;\n    const [visibleAssignments, setVisibleAssignments] = React.useState([]);\n    return (\n        <React.Fragment>\n            <Button onClick={() => setVisibleAssignments(selectedAssignments)}>\n                View Selected Assignment Details\n            </Button>\n            {visibleAssignments.map((assignment, i) => (\n                <ConnectedAssignmentDetails assignment={assignment} key={i} />\n            ))}\n        </React.Fragment>\n    );\n}\nexport const ConnectedViewAssignmentDetailsButton = connect((state) => {\n    // pass in the currently selected assignments.\n    const { selectedAssignmentIds } = offerTableSelector(state);\n    const assignments = assignmentsSelector(state);\n    return {\n        assignments: assignments.filter((x) =>\n            selectedAssignmentIds.includes(x.id)\n        ),\n    };\n})(ViewAssignmentDetailsButton);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport { offerTableSelector } from \"../offertable/actions\";\nimport { assignmentsSelector } from \"../../api/actions\";\nimport {\n    offerForAssignmentCreate,\n    offerForAssignmentEmail,\n    offerForAssignmentNag,\n    offerForAssignmentWithdraw,\n    setOfferForAssignmentAccepted,\n    setOfferForAssignmentRejected,\n} from \"../../api/actions/offers\";\n\nfunction OfferActionButtons(props) {\n    const selectedAssignments = props.assignments;\n    const {\n        offerForAssignmentCreate,\n        offerForAssignmentEmail,\n        offerForAssignmentNag,\n        offerForAssignmentWithdraw,\n        setOfferForAssignmentAccepted,\n        setOfferForAssignmentRejected,\n    } = props;\n\n    function createOffers() {\n        for (const assignment of selectedAssignments) {\n            offerForAssignmentCreate(assignment);\n        }\n    }\n    function withdrawOffers() {\n        for (const assignment of selectedAssignments) {\n            offerForAssignmentWithdraw(assignment);\n        }\n    }\n    function emailOffers() {\n        for (const assignment of selectedAssignments) {\n            offerForAssignmentEmail(assignment);\n        }\n    }\n    function nagOffers() {\n        for (const assignment of selectedAssignments) {\n            offerForAssignmentNag(assignment);\n        }\n    }\n    function acceptOffers() {\n        for (const assignment of selectedAssignments) {\n            setOfferForAssignmentAccepted(assignment);\n        }\n    }\n    function rejectOffers() {\n        for (const assignment of selectedAssignments) {\n            setOfferForAssignmentRejected(assignment);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <ButtonGroup>\n                <Button onClick={createOffers}>Create Offer</Button>\n                <Button onClick={withdrawOffers}>Withdraw Offer</Button>\n                <Button onClick={emailOffers}>Email Offer</Button>\n                <Button onClick={nagOffers}>Nag Offer</Button>\n                <Button onClick={acceptOffers}>Set as Accepted</Button>\n                <Button onClick={rejectOffers}>Set as Rejected</Button>\n            </ButtonGroup>\n        </React.Fragment>\n    );\n}\nexport const ConnectedOfferActionButtons = connect(\n    (state) => {\n        // pass in the currently selected assignments.\n        const { selectedAssignmentIds } = offerTableSelector(state);\n        const assignments = assignmentsSelector(state);\n        return {\n            assignments: assignments.filter((x) =>\n                selectedAssignmentIds.includes(x.id)\n            ),\n        };\n    },\n    {\n        offerForAssignmentCreate,\n        offerForAssignmentEmail,\n        offerForAssignmentNag,\n        offerForAssignmentWithdraw,\n        setOfferForAssignmentAccepted,\n        setOfferForAssignmentRejected,\n    }\n)(OfferActionButtons);\n","import React from \"react\";\nimport { ConnectedOfferTable } from \"../offertable\";\nimport { Button } from \"react-bootstrap\";\nimport { ConnectedAddAssignmentDialog } from \"./add-assignment-dialog\";\nimport { ConnectedViewAssignmentDetailsButton } from \"./assignment-details\";\nimport { ConnectedOfferActionButtons } from \"./offer-actions\";\n\nexport function AdminAssignmentsView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div>\n            <Button\n                onClick={() => {\n                    setAddDialogVisible(true);\n                }}\n            >\n                Add Assignment\n            </Button>\n            <ConnectedOfferTable />\n            <ConnectedAddAssignmentDialog\n                show={addDialogVisible}\n                onHide={() => {\n                    setAddDialogVisible(false);\n                }}\n            />\n            <div>\n                <ConnectedViewAssignmentDetailsButton />\n            </div>\n            <div>\n                <ConnectedOfferActionButtons />\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal, Button, Alert } from \"react-bootstrap\";\nimport {\n    contractTemplatesSelector,\n    allContractTemplatesSelector,\n    upsertContractTemplate,\n    fetchAllContractTemplates,\n} from \"../../api/actions\";\nimport { strip } from \"../../libs/utils\";\nimport { ContractTemplateEditor } from \"../../components/forms/contract-template-editor\";\n\nconst BLANK_CONTRACT_TEMPLATE = {\n    template_name: \"\",\n    template_file: \"\",\n};\n\n/**\n * Find if there is a conflicting instructor in the passed in list\n * of instructors, or if any required fields are incorrect.\n *\n * @param {object} contractTemplate\n * @param {object[]} contractTemplates\n */\nfunction getConficts(contractTemplate, contractTemplates) {\n    const ret = { delayShow: \"\", immediateShow: \"\" };\n    if (\n        !strip(contractTemplate.template_name) ||\n        !strip(contractTemplate.template_file)\n    ) {\n        ret.delayShow = \"A template name and template file is required\";\n    }\n    const matchingTemplate = contractTemplates.find(\n        (x) => strip(x.template_name) === strip(contractTemplate.template_name)\n    );\n    if (matchingTemplate) {\n        ret.immediateShow = (\n            <p>\n                Another contract template exists with name=\n                {contractTemplate.template_name}:{\" \"}\n                <b>\n                    {matchingTemplate.template_name}{\" \"}\n                    {matchingTemplate.template_file}\n                </b>\n            </p>\n        );\n    }\n    return ret;\n}\n\nfunction AddContractTemplateDialog(props) {\n    const {\n        show,\n        onHide = () => {},\n        contractTemplates,\n        availableTemplates,\n        upsertContractTemplate,\n        fetchAllContractTemplates,\n    } = props;\n    const [newContractTemplate, setNewContractTemplate] = React.useState(\n        BLANK_CONTRACT_TEMPLATE\n    );\n\n    React.useEffect(() => {\n        if (!show) {\n            // If the dialog is hidden, reset the state\n            setNewContractTemplate(BLANK_CONTRACT_TEMPLATE);\n        } else {\n            // If we've just become visible, fetch all available contract templates\n            fetchAllContractTemplates();\n        }\n    }, [show, fetchAllContractTemplates]);\n\n    function createContractTemplate() {\n        upsertContractTemplate(newContractTemplate);\n        onHide();\n    }\n\n    const conflicts = getConficts(newContractTemplate, contractTemplates);\n\n    return (\n        <Modal show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>Add Contract Template</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <ContractTemplateEditor\n                    contractTemplate={newContractTemplate}\n                    setContractTemplate={setNewContractTemplate}\n                    availableTemplates={availableTemplates}\n                />\n\n                {conflicts.immediateShow ? (\n                    <Alert variant=\"danger\">{conflicts.immediateShow}</Alert>\n                ) : null}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide} variant=\"light\">\n                    Cancel\n                </Button>\n                <Button\n                    onClick={createContractTemplate}\n                    title={conflicts.delayShow || \"Create Contract Template\"}\n                    disabled={\n                        !!conflicts.delayShow || !!conflicts.immediateShow\n                    }\n                >\n                    Create Contract Template\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n/**\n * AddContractTemplateDialog that has been connected to the redux store\n */\nexport const ConnectedAddContractTemplateDialog = connect(\n    (state) => ({\n        contractTemplates: contractTemplatesSelector(state),\n        availableTemplates: allContractTemplatesSelector(state),\n    }),\n    { upsertContractTemplate, fetchAllContractTemplates }\n)(AddContractTemplateDialog);\n","import { connect } from \"react-redux\";\nimport { contractTemplatesSelector } from \"../../api/actions\";\nimport { ContractTemplatesList } from \"../../components/contract-templates-list\";\n\nexport const ConnectedContractTemplateList = connect((state) => ({\n    contractTemplates: contractTemplatesSelector(state),\n}))(ContractTemplatesList);\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { ConnectedAddContractTemplateDialog } from \"./contract-template-dialog\";\nimport { ConnectedContractTemplateList } from \"./contract-template-list\";\n\nexport function AdminContractTemplatesView() {\n    const [addDialogVisible, setAddDialogVisible] = React.useState(false);\n    return (\n        <div>\n            <Button\n                onClick={() => {\n                    setAddDialogVisible(true);\n                }}\n            >\n                Add Contract Template\n            </Button>\n            <ConnectedContractTemplateList />\n            <ConnectedAddContractTemplateDialog\n                show={addDialogVisible}\n                onHide={() => {\n                    setAddDialogVisible(false);\n                }}\n            />\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport Dashboard from \"../dashboard\";\nimport ControlPanel from \"../cp_control_panel/ControlPanel\";\nimport { AdminIstructorsView } from \"../instructors\";\nimport { AdminSessionsView } from \"../sessions\";\nimport { AdminPositionsView } from \"../positions\";\nimport { AdminAssignmentsView } from \"../assignments\";\nimport { AdminContractTemplatesView } from \"../contract_template\";\n\nexport function AdminRoutes() {\n    return (\n        <Switch>\n            <Route exact path=\"/\">\n                <Redirect to=\"/tapp\" />\n            </Route>\n            <Route exact path=\"/tapp/sessions\">\n                <AdminSessionsView />\n            </Route>\n            <Route exact path=\"/tapp/contract_templates\">\n                <AdminContractTemplatesView />\n            </Route>\n            <Route exact path=\"/tapp/instructors\">\n                <AdminIstructorsView />\n            </Route>\n            <Route exact path=\"/tapp/positions\">\n                <AdminPositionsView />\n            </Route>\n            <Route exact path=\"/tapp/assignments\">\n                <AdminAssignmentsView />\n            </Route>\n            <Route exact path=\"/dashboard\">\n                <Dashboard />\n            </Route>\n            <Route exact path=\"/cp\">\n                <ControlPanel />\n            </Route>\n        </Switch>\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Nav, Navbar, NavDropdown } from \"react-bootstrap\";\nimport { Route, NavLink } from \"react-router-dom\";\n\n/**\n * Wrap `\"react-router-dom\"`'s `NavLink` in Bootstrap\n * styling.\n *\n * @param {*} props\n * @returns\n */\nexport function BootstrapNavLink(props) {\n    return (\n        <Nav.Link as={NavLink} activeClassName=\"text-dark\" {...props}>\n            {props.children}\n        </Nav.Link>\n    );\n}\nBootstrapNavLink.propTypes = {\n    to: PropTypes.string,\n};\n\n/**\n * Render a header that dynamically adjusts depending on the route\n * (as determined by `react-router-dom`). Top-level routes appear in\n * a dropdown menu. Subroutes (which only show when the top-level route is active)\n * appear as a horizontal list. A toplevel route takes the form\n *\n * ```\n * {\n *    route: \"/some/route\"\n *    name: \"Display Name\"\n *    description: \"Alt Text\"\n *    subroutes: [<same as routes>]\n * }\n * ```\n *\n * `subroutes.route` is automatically prefixed with the parent's `route`.\n *\n * @export\n * @param {object[]} props.routes\n * @returns\n */\nexport function Header(props) {\n    const { routes = [], infoComponents = null } = props;\n\n    if (routes.length === 0) {\n        return <div>No Routes in Header</div>;\n    }\n\n    return (\n        <Navbar bg=\"light\" variant=\"light\">\n            <Navbar.Brand>\n                <NavDropdown\n                    title={routes.map((route) => (\n                        <Route path={route.route} key={route.route}>\n                            {route.name}\n                        </Route>\n                    ))}\n                >\n                    {routes\n                        .filter((route) => !route.hidden)\n                        .map((route) => (\n                            <NavDropdown.Item\n                                key={route.route}\n                                as=\"span\"\n                                tabIndex=\"0\"\n                            >\n                                <BootstrapNavLink\n                                    to={route.route}\n                                    title={route.description}\n                                >\n                                    {route.name}\n                                </BootstrapNavLink>\n                            </NavDropdown.Item>\n                        ))}\n                </NavDropdown>\n            </Navbar.Brand>\n            <Nav className=\"mr-auto\">\n                {routes.map((route) => (\n                    <Route path={route.route} key={route.route}>\n                        {(route.subroutes || []).map((subroute) => {\n                            const fullroute = `${route.route}${subroute.route}`;\n                            return (\n                                <BootstrapNavLink\n                                    to={fullroute}\n                                    key={fullroute}\n                                    title={subroute.description}\n                                >\n                                    {subroute.name}\n                                </BootstrapNavLink>\n                            );\n                        })}\n                    </Route>\n                ))}\n            </Nav>\n            {infoComponents.map((component, index) => (\n                <div key={index}>{component}</div>\n            ))}\n        </Navbar>\n    );\n}\nHeader.propTypes = {\n    routes: PropTypes.arrayOf(\n        PropTypes.shape({\n            route: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            description: PropTypes.string,\n            subroutes: PropTypes.arrayOf(\n                PropTypes.shape({\n                    route: PropTypes.string.isRequired,\n                    name: PropTypes.string.isRequired,\n                    description: PropTypes.string,\n                })\n            ),\n        })\n    ),\n    infoComponents: PropTypes.array,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Dropdown, FormControl } from \"react-bootstrap\";\n/**\n * react-bootstrap dropdown menu that is filterable. Expects\n * children which are `Dropdown.Item` and contain just text\n * as content. To use, set as the `as=` attribute on a `Dropdown.Menu`.\n *\n * Notes: Because of the way react-bootstrap works, this\n * component must be wrapped in a `React.formwardRef`.\n */\nconst FilterableMenuContents = React.forwardRef((props, ref) => {\n    const { children, style, className, clearFilter } = props;\n    const [filter, setFilter] = React.useState(\"\");\n    // If the `clearFilter` flag is set, make sure we start\n    // with an empty filter. This is used to clear the filter when the\n    // widget is hidden.\n    React.useEffect(() => {\n        if (clearFilter) {\n            setFilter(\"\");\n        }\n    }, [clearFilter]);\n    function onChange(e) {\n        setFilter(e.currentTarget.value);\n    }\n    // Filter the child `Dropdown.Item` items\n    const sessionList = React.Children.toArray(children).filter(\n        (child) =>\n            !filter.trim() ||\n            child.props.children.toLowerCase().includes(filter.trim())\n    );\n    // The sessions list could be empty for two reasons: there are\n    // no sessions, or we've filtered them all away. Display an\n    // appropriate message in either case\n    const emptyListMessage =\n        children.length === 0\n            ? \"No Available Sessions\"\n            : \"No Matching Sessions\";\n    return (\n        <div style={style} className={className} ref={ref}>\n            <FormControl\n                autoFocus\n                className=\"mx-3 my-2 w-auto\"\n                placeholder=\"Type to filter...\"\n                title=\"Filter sessions\"\n                onChange={onChange}\n                value={filter}\n                tabIndex={0}\n            />\n            <ul className=\"list-unstyled my-0\">\n                {sessionList.length > 0 ? (\n                    sessionList\n                ) : (\n                    <li className=\"dropdown-item text-muted\">\n                        {emptyListMessage}\n                    </li>\n                )}\n            </ul>\n        </div>\n    );\n});\n/**\n * A menu that nests inside a `Dropdown`. Pass in a list\n * `items` which are objects of the form `{id: ..., name: ...}`.\n * When `onSelect` is triggered, it will be passed the index of the clicked-upon\n * item in the `items` array.\n *\n * @param {*} props\n * @returns\n */\nexport function FilterableMenu(props) {\n    const { items, activeItemId, clearFilter } = props;\n    return (\n        <Dropdown.Menu as={FilterableMenuContents} clearFilter={clearFilter}>\n            {items.map((s, index) => (\n                <Dropdown.Item\n                    key={s.id}\n                    eventKey={index}\n                    active={activeItemId === s.id}\n                >\n                    {s.name}\n                </Dropdown.Item>\n            ))}\n        </Dropdown.Menu>\n    );\n}\nFilterableMenu.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.any.isRequired,\n            name: PropTypes.string.isRequired,\n        })\n    ),\n    activeItemId: PropTypes.any,\n    clearFilter: PropTypes.bool,\n};\n","import React from \"react\";\nimport { Header } from \"../../components/header\";\nimport { connect } from \"react-redux\";\nimport {\n    sessionsSelector,\n    activeSessionSelector,\n    setActiveUserRole,\n    setActiveSession,\n    activeUserSelector,\n    activeRoleSelector,\n} from \"../../api/actions\";\nimport { ActiveUserDisplay } from \"../../components/active-user\";\nimport { ActiveSessionDisplay } from \"../../components/active-session\";\n\n/**\n * Header showing the routes that a user with `role=admin`\n * can see.\n *\n * @returns\n */\nfunction AdminHeader() {\n    return (\n        <Header\n            routes={[\n                {\n                    route: \"/tapp\",\n                    name: \"TAPP\",\n                    description: \"TAPP Main View\",\n                    subroutes: [\n                        {\n                            route: \"/sessions\",\n                            name: \"Sessions\",\n                            description: \"Manage Sessions\",\n                        },\n                        {\n                            route: \"/contract_templates\",\n                            name: \"Contract Templates\",\n                            description: \"Manage Contract Templates\",\n                        },\n                        {\n                            route: \"/instructors\",\n                            name: \"Instructors\",\n                            description: \"Manage Instructors\",\n                        },\n                        {\n                            route: \"/positions\",\n                            name: \"Positions\",\n                            description: \"Manage Positions\",\n                        },\n                        {\n                            route: \"/assignments\",\n                            name: \"Assignments\",\n                            description: \"Manage Assignments\",\n                        },\n                        {\n                            route: \"/summary\",\n                            name: \"Summary\",\n                            description: \"Overivew of all data\",\n                        },\n                    ],\n                },\n                {\n                    route: \"/cp\",\n                    name: \"CP\",\n                    description: \"Contract Presentment\",\n                    subroutes: [\n                        {\n                            route: \"/statistics\",\n                            name: \"Statistics\",\n                            description:\n                                \"See statistics about accepted/rejected contracts\",\n                        },\n                    ],\n                },\n                {\n                    route: \"/dashboard\",\n                    name: \"Dashboard\",\n                    description: \"List of all widgets\",\n                    hidden: true,\n                },\n            ]}\n            infoComponents={[\n                <ConnectedActiveSessionDisplay />,\n                <ConnectedActiveUserDisplay />,\n            ]}\n        />\n    );\n}\n\nconst mapSessionsStateToProps = (state) => ({\n    sessions: sessionsSelector(state),\n    activeSession: activeSessionSelector(state),\n});\n\nconst mapSessionsDispatchToProps = { setActiveSession };\n\nconst ConnectedActiveSessionDisplay = connect(\n    mapSessionsStateToProps,\n    mapSessionsDispatchToProps\n)(ActiveSessionDisplay);\n\nconst mapActiveUserStateToProps = (state) => ({\n    activeUser: activeUserSelector(state),\n    activeRole: activeRoleSelector(state),\n});\n\nconst mapActiveUserDispatchToProps = { setActiveUserRole };\n\nconst ConnectedActiveUserDisplay = connect(\n    mapActiveUserStateToProps,\n    mapActiveUserDispatchToProps\n)(ActiveUserDisplay);\n\nexport { AdminHeader };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FilterableMenu } from \"./filterable-menu\";\nimport { Badge, Dropdown } from \"react-bootstrap\";\nimport { apiPropTypes } from \"../api/defs/prop-types\";\n\nexport function ActiveSessionDisplay(props) {\n    const { sessions = [], activeSession, setActiveSession } = props;\n    // keep track of the dropdown visibility so that the filter can be cleared\n    // whenever the dropdown is invisible.\n    const [dropdownVisible, setDropdownVisible] = React.useState(false);\n    const activeSessionId = activeSession ? activeSession.id : null;\n\n    const label = !activeSessionId ? (\n        <span className=\"text-secondary mr-2\">Select a Session</span>\n    ) : (\n        <span className=\"text-primary mr-2\">{activeSession.name}</span>\n    );\n\n    return (\n        <Badge>\n            Selected session:\n            <Dropdown\n                onSelect={(i) => {\n                    setActiveSession(sessions[i]);\n                }}\n                onToggle={(desiredVisibility) =>\n                    setDropdownVisible(desiredVisibility)\n                }\n                show={dropdownVisible}\n            >\n                <Dropdown.Toggle split variant=\"light\">\n                    {label}\n                </Dropdown.Toggle>\n                <FilterableMenu\n                    items={sessions}\n                    activeItemId={activeSessionId}\n                    clearFilter={!dropdownVisible}\n                />\n            </Dropdown>\n        </Badge>\n    );\n}\nActiveSessionDisplay.propTypes = {\n    setActiveSession: PropTypes.func.isRequired,\n    sessions: PropTypes.arrayOf(apiPropTypes.session).isRequired,\n    activeSession: apiPropTypes.session,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Badge, Dropdown } from \"react-bootstrap\";\nimport { apiPropTypes } from \"../api/defs/prop-types\";\n\nexport function ActiveUserDisplay(props) {\n    const [dropdownVisible, setDropdownVisible] = React.useState(false);\n    const {\n        activeUser = { utorid: \"<noid>\", roles: [] },\n        activeRole,\n        setActiveUserRole,\n    } = props;\n\n    const roles = activeUser.roles;\n    const label = !activeRole ? (\n        <span className=\"text-secondary mr-2\">Select a role</span>\n    ) : (\n        <span className=\"text-primary mr-2\">{activeRole}</span>\n    );\n\n    const isActiveRole = (role) => {\n        return activeRole === role;\n    };\n    return (\n        <Badge>\n            Login: {activeUser.utorid}\n            {\" as\"}\n            <Dropdown\n                onSelect={(i) => {\n                    setActiveUserRole(roles[i]);\n                }}\n                onToggle={(desiredVisibility) =>\n                    setDropdownVisible(desiredVisibility)\n                }\n                show={dropdownVisible}\n                alignRight\n            >\n                <Dropdown.Toggle split variant=\"light\">\n                    {label}\n                </Dropdown.Toggle>\n                <Dropdown.Menu flip={true}>\n                    {(roles || []).map((role, index) => (\n                        <Dropdown.Item\n                            key={index}\n                            eventKey={index}\n                            active={isActiveRole(role)}\n                        >\n                            {role}\n                        </Dropdown.Item>\n                    ))}\n                </Dropdown.Menu>\n            </Dropdown>\n        </Badge>\n    );\n}\nActiveUserDisplay.propTypes = {\n    activeUser: apiPropTypes.user,\n    activeRole: PropTypes.string,\n    setActiveUserRole: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { initFromStage } from \"./api/actions\";\nimport { ConnectedNotifications } from \"./views/notificatons\";\nimport { AdminRoutes } from \"./views/routes\";\nimport { AdminHeader } from \"./views/admin\";\nimport { globalsSelector } from \"./api/actions/globals\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.props.initFromStage(\"pageLoad\");\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <AdminHeader />\n                <AdminRoutes />\n                <ConnectedNotifications />\n            </React.Fragment>\n        );\n    }\n}\n\nconst ConnectedApp = connect(\n    (state) => ({\n        globals: globalsSelector(state),\n    }),\n    { initFromStage }\n)(App);\n\nexport default ConnectedApp;\n","import { createReducer } from \"redux-create-reducer\";\nimport { SET_GLOBALS } from \"../constants\";\n\nexport const globalReducer = createReducer(\n    {},\n    {\n        [SET_GLOBALS]: (state, action) => ({\n            ...state,\n            ...action.payload,\n        }),\n    }\n);\n","import { SET_SELECTED_ROWS } from \"./constants\";\nimport { createReducer } from \"redux-create-reducer\";\n\n// initialize the state of offer table\nconst initialState = {\n    selectedAssignmentIds: [],\n};\n\nconst offerTableReducer = createReducer(initialState, {\n    [SET_SELECTED_ROWS]: (state, action) => {\n        return { ...state, selectedAssignmentIds: action.payload };\n    },\n});\n\nexport default offerTableReducer;\n","import { reducer as formReducer } from \"redux-form\";\nimport { reducer as notificationReducer } from \"react-notification-system-redux\";\nimport { combineReducers } from \"./api/reducers/utils\";\nimport { globalReducer } from \"./api/reducers/globals\";\nimport offerTableReducer from \"./views/offertable/reducers\";\nimport {\n    statusReducer,\n    sessionsReducer,\n    positionsReducer,\n    applicantsReducer,\n    applicationsReducer,\n    assignmentsReducer,\n    instructorsReducer,\n    contractTemplatesReducer,\n} from \"./api/reducers\";\nimport { usersReducer } from \"./api/reducers/users\";\n\n// When `combineReducers` is used,\n// every action gets dispatched to every reducer.\n// Since reducers don't change the state on unrecognized\n// actions, this is okay. Further, each reducer believes\n// it has its own top-level state, but in reality it is\n// just passed a part of the whole state. E.g., if `combineReducers`\n// is passed\n//   {\n//      mypath: myReducer\n//   }\n// When `myReducer(localState)` is called, `localSate == globalState.mypath`.\nconst reducer = combineReducers({\n    model: combineReducers({\n        status: statusReducer,\n        sessions: sessionsReducer,\n        positions: positionsReducer,\n        applicants: applicantsReducer,\n        applications: applicationsReducer,\n        assignments: assignmentsReducer,\n        instructors: instructorsReducer,\n        contractTemplates: contractTemplatesReducer,\n        users: usersReducer,\n    }),\n    ui: combineReducers({\n        notifications: notificationReducer,\n        form: formReducer,\n        offerTable: offerTableReducer,\n        globals: globalReducer,\n    }),\n});\n\nexport default reducer;\n","import { createReducer } from \"./utils\";\nimport { API_INTERACTION_START, API_INTERACTION_END } from \"../constants\";\n\nconst initialState = {\n    ongoingInteraction: false,\n    ongoingInteractionsList: [],\n};\n\n// Keep a list of all ongoing interactions that are in progress.\n// This way we could display a spinner or some-such while interactions\n// are going on. Interactions will be mostly network-based interactions.\nexport const statusReducer = createReducer(initialState, {\n    [API_INTERACTION_START]: (state, action) => ({\n        ...state,\n        ongoingInteraction: true,\n        ongoingInteractionsList: [\n            ...state.ongoingInteractionsList,\n            action.payload,\n        ],\n    }),\n    [API_INTERACTION_END]: (state, action) => {\n        // remove the current interaction\n        const ongoingInteractionsList = state.ongoingInteractionsList.filter(\n            (i) => i.id !== action.payload.id\n        );\n        return {\n            ...state,\n            ongoingInteraction: ongoingInteractionsList.length > 0,\n            ongoingInteractionsList: ongoingInteractionsList,\n        };\n    },\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport rootReducer from \"./rootReducer\";\nimport thunk from \"redux-thunk\";\n\n/* eslint-disable */\nconst configureStore = () => {\n    const persistConfig = {\n        key: \"root\",\n        storage,\n        whitelist: [\"auth\", \"application\"],\n    };\n    const persistedReducer = persistReducer(persistConfig, rootReducer);\n    const store = createStore(\n        persistedReducer,\n        composeWithDevTools(applyMiddleware(thunk))\n    );\n    const persistor = persistStore(store);\n\n    if (process.env.NODE_ENV !== \"production\") {\n        if (module.hot) {\n            module.hot.accept(\"./rootReducer\", () => {\n                store.replaceReducer(persistedReducer);\n            });\n        }\n    }\n\n    return { store, persistor };\n};\n/* eslint-enable */\n\nexport default configureStore;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { DevFrame as _DevFrame } from \"./views/dev_frame\";\nimport App from \"./App\";\nimport configureStore from \"./store\";\n\nconst { store, persistor } = configureStore();\n\n// In production, we don't want to wrap the app in a dev frame,\n// but we do want to in development\nlet DevFrame = function (props) {\n    return <React.Fragment>{props.children}</React.Fragment>;\n};\n/* eslint-disable */\nif (process.env.REACT_APP_DEV_FEATURES) {\n    DevFrame = _DevFrame;\n}\n/* eslint-enable */\n\nconst render = (Component) => {\n    return ReactDOM.render(\n        <HashRouter>\n            <Provider store={store}>\n                <PersistGate persistor={persistor}>\n                    <DevFrame>\n                        <Component />\n                    </DevFrame>\n                </PersistGate>\n            </Provider>\n        </HashRouter>,\n        document.getElementById(\"root\")\n    );\n};\n\nrender(App);\n\n// Hot module reloading\n// https://medium.com/@brianhan/hot-reloading-cra-without-eject-b54af352c642\n\n/*eslint-disable */\nif (module.hot) {\n    module.hot.accept(\"./App\", () => {\n        const NextApp = require(\"./App\").default;\n        render(NextApp);\n    });\n}\n/*eslint-enable */\n"],"sourceRoot":""}